{"query_0_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "ArxivSearch.get_arxiv_article_information", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Berlin"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 36339325}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 45475252}}, {"id": 3, "prev": [2], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 47215807, "checkIn": "2023-10-20", "checkOut": "2023-10-23"}}, {"id": 4, "prev": [3], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "solar energy"}}, {"id": 5, "prev": [4], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "solar energy"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a researcher studying sustainable energy technologies, I need to find properties in Berlin and review no more than three of these properties. Moreover, I need to find articles on Arxiv related to 'solar energy' and get the meta information for up to three of these articles."}]}, "query_0_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_checkout_price"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 49634091, "checkIn": "2023-12-01", "checkOut": "2023-12-05"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 997382, "checkIn": "2023-12-01", "checkOut": "2023-12-05"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 21387647, "checkIn": "2023-12-01", "checkOut": "2023-12-05"}}, {"id": 4, "prev": [3], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an event organizer, I'm planning a conference in San Francisco from December 1st to December 5th. Could you assist me in finding out the properties and their checkout costs for these dates? Also, could you search for Arxiv articles related to 'artificial intelligence' and provide me the meta information for up to three of these articles?"}]}, "query_100_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning", "sort_by": "date", "limit": 3}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research in Computer Science, specifically in machine learning. Could you find the three most recent articles on this topic? Please provide their publication date, title, authors, and summary. Could you also tell me what day of the week it is today?"}]}, "query_101_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "Business", "abs_location": "outputs/GlobalWarming.ppt"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Global Warming", "bullet_items": "Causes[SPAN]Effects[SPAN]Solutions"}}, {"id": 2, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "Global Warming"}}, {"id": 3, "prev": [1, 2], "name": "PPT.add_text_image_page", "args": {"title": "Global Warming", "bullet_items": "Causes[SPAN]Effects[SPAN]Solutions", "image": "outputs/1697796325.6373634.jpg"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a presentation designer, I want to create a PowerPoint presentation with text and images. Please add a text page with the title 'Global Warming', bullet items 'Causes', 'Effects', and 'Solutions', and an image fetched from the Internet using the keywords 'Global Warming'. Finally, create the PowerPoint file with the 'Business' theme and save it to 'outputs/GlobalWarming.ppt'."}]}, "query_103_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "AirbnbSearch.get_property_details", "ArxivSearch.get_arxiv_article_information", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Barcelona"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 52047578}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 24533837}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 40553667}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 52047578, "checkIn": "2023-10-19", "checkOut": "2023-10-26"}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 24533837, "checkIn": "2023-10-19", "checkOut": "2023-10-26"}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 40553667, "checkIn": "2023-10-19", "checkOut": "2023-10-26"}}, {"id": 7, "prev": [6], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 8, "prev": [7], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "economic impact of tourism"}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm doing a study on how tourism affects local economies. Can you find properties in Barcelona and give me details on the top 3? Information should include title, property type, capacity, rating, and geographical location. Also, can you find out the cost of a 7-day stay at these properties, including guest fees? Furthermore, can you provide me with the latest news articles (from the last 7 days) related to stock ticker TUI.L? Lastly, can you find articles on Arxiv.org about the economic impact of tourism?"}]}, "query_104_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 4195503}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 714328565788379770}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 941597372112246343}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 4195503}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 714328565788379770}}, {"id": 7, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "Long Island City", "radius": 1000}}, {"id": 8, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "Union City", "radius": 1000}}, {"id": 9, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "New York City", "radius": 1000}}, {"id": 10, "prev": [7, 8, 9], "name": "Email.send", "args": {"address": "travelblogger@example.com", "title": "List of Attractions", "body": "Here is the list of attractions:\n\n1. The Chrysler Building\nAddress: 405 Lexington Ave, New York, NY, 10174\n\n2. Museum of the Moving Image\nAddress: 36-01 35 Ave, Astoria, NY, 11106\n\n3. The Metropolitan Museum of Art\nAddress: 405 Lexington Ave, New York, NY, 10174\n\nPlease find the attached file for more information.", "attachment": "/path/to/attractions.pdf"}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a blog about my recent trip to New York City. Can you find available properties in New York City and give me the details of the first three properties, including their names and addresses. Also, fetch the reviews of these properties. Additionally, look for popular places of interest close to these properties. Finally, I would like to send an email to travelblogger@example.com with the list of attractions attached."}]}, "query_104_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "BINGMap.get_coordinates", "AirbnbSearch.get_property_reviews", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 10803849}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 22788198}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 48347678}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 10803849}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 22788198}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 48347678}}, {"id": 7, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Monterey Park, CA, United States"}}, {"id": 8, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "Culver City, CA, United States"}}, {"id": 9, "prev": [3], "name": "BINGMap.get_coordinates", "args": {"location": "Los Angeles, CA, United States"}}, {"id": 10, "prev": [9], "name": "Email.show", "args": {"only_unread": false}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am looking for a house in Los Angeles. Could you find available properties in Los Angeles and give me the details of the first three properties, including their names, addresses, and ratings. Also, fetch the reviews of these properties. Additionally, find the coordinates of these properties. Finally, show me the emails in my Gmail inbox."}]}, "query_105_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "BINGMap.get_distance", "FileOperation.write_file", "AirbnbSearch.check_availability", "BINGMap.get_route", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 663272282290556235}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 663272282290556235}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38677942}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 38677942}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51113056}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51113056}}, {"id": 7, "prev": [6], "name": "BINGMap.get_distance", "args": {"start": "Tokyo Tower", "end": "35.71975,139.79289"}}, {"id": 8, "prev": [7], "name": "BINGMap.get_distance", "args": {"start": "Tokyo Tower", "end": "35.7049,139.81403"}}, {"id": 9, "prev": [8], "name": "BINGMap.get_distance", "args": {"start": "Tokyo Tower", "end": "35.6709,139.81034"}}, {"id": 10, "prev": [9], "name": "BINGMap.get_route", "args": {"start": "Tokyo Tower", "end": "35.71975,139.79289"}}, {"id": 11, "prev": [10], "name": "BINGMap.get_route", "args": {"start": "Tokyo Tower", "end": "35.7049,139.81403"}}, {"id": 12, "prev": [11], "name": "BINGMap.get_route", "args": {"start": "Tokyo Tower", "end": "35.6709,139.81034"}}, {"id": 13, "prev": [12], "name": "FileOperation.write_file", "args": {"file_path": "outputs/tokyo_trip_properties.txt", "text": "Property 1:\nTitle: Boutique hotel in Taito City\nType: Room in boutique hotel\nCapacity: 2\nRating: 4.72\nCoordinates: Latitude: 35.71975, Longitude: 139.79289\n\nProperty 2:\nTitle: Condo in Sumida City\nType: Entire condo\nCapacity: 2\nRating: 4.63\nCoordinates: Latitude: 35.7049, Longitude: 139.81403\n\nProperty 3:\nTitle: Hotel in Koto City\nType: Room in hotel\nCapacity: 2\nRating: 4.89\nCoordinates: Latitude: 35.6709, Longitude: 139.81034\n"}}, {"id": 14, "prev": [13], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Planning a trip to Tokyo, I need to find suitable accommodations. I am interested in the top 3 listings including details such as their title, type, capacity, rating, and geographical coordinates. Moreover, I need to know the availability for the coming week. Lastly, I would also need the distance and directions from each of these to the Tokyo Tower. Save the results to 'outputs/tokyo_trip_properties.txt'."}]}, "query_107_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 278}}, {"id": 5, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 240}}, {"id": 6, "prev": [5], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 240}}, {"id": 7, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 424}}, {"id": 8, "prev": [7], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 424}}, {"id": 9, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 19404}}, {"id": 10, "prev": [9], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 19404}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to delve into the top-rated movies and write reviews about them. Can you provide me with a list of the highest-rated films, including details like their ID, title, release date, popularity, and rating? Once I have the IDs of these movies, I want to know more about them, such as their genres, runtime, and a brief overview. It would also be helpful to read user reviews for each of these movies, including the user's name, rating, and the content of their review."}]}, "query_107_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Hollywood Walk of Fame"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "Hollywood Walk of Fame", "latitude": 34.10173035, "longitude": -118.32644653, "radius": 1000}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to provide information about nearby attractions to tourists visiting Los Angeles. Can you search for attractions near the Hollywood Walk of Fame within a distance of 1 kilometer and provide me with a list of the five closest places, including their name and address? I also need the geographical coordinates of the Hollywood Walk of Fame."}]}, "query_108_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 48347678}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 48347678}}, {"id": 3, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 48347678}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm helping a client find the first available rental property in Los Angeles. Please find a property in Los Angeles. Then, check the availability of the property for the coming week. Next, get the details of that property. Finally, retrieve the reviews of the property."}]}, "query_10_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "TimeTool.get_curr_time", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Bali"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 53931387}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 763553497595081889}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 54239108}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 53931387}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 763553497595081889}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 54239108}}, {"id": 7, "prev": [6], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 53931387, "date": "2023-10-19"}}, {"id": 8, "prev": [7], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 763553497595081889, "date": "2023-10-19"}}, {"id": 9, "prev": [8], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 54239108, "date": "2023-10-19"}}, {"id": 10, "prev": [9], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to Bali. Could you find some properties there and give me information on the top three? I would like to know their name, rating, how many people they can accommodate, and their geographical coordinates. I would also appreciate if you could share the reviews for these places. Could you also check if these properties are available for a week starting from tomorrow? Also, could you tell me what the current time is?"}]}, "query_10_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.get_property_checkout_price", "TimeTool.get_curr_time", "AirbnbSearch.search_property_by_place", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51619634}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51619634}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 4, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 941597372112246343}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 585382126083893704}}, {"id": 6, "prev": [5], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 585382126083893704}}, {"id": 7, "prev": [6], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 8, "prev": [7], "name": "TimeTool.get_weekday", "args": {}}, {"id": 9, "prev": [7], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 51619634, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 10, "prev": [7], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 941597372112246343, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 11, "prev": [7], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 585382126083893704, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I manage a property in New York City. Could you find some properties there and give me information on the top three? I would like to know their name, type, how many people they can accommodate, their rating, and their geographical coordinates. I would also appreciate if you could share the reviews for these places. Could you also tell me how much it would cost to check out from these properties today? Lastly, could you tell me what day of the week it is today?"}]}, "query_10_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "TimeTool.get_curr_time", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 1001125627615934457}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 1001125627615934457}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 731584702487700952}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 731584702487700952}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 37677930}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 37677930}}, {"id": 7, "prev": [6], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 1001125627615934457, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 8, "prev": [7], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 731584702487700952, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 9, "prev": [8], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 37677930, "checkIn": "2023-10-18", "checkOut": "2023-10-19"}}, {"id": 10, "prev": [9], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a vacation in Tokyo. Could you find some properties there and give me information on the top three? I would like to know their name, type, how many people they can accommodate, their rating, and their geographical coordinates. I would also appreciate if you could share the reviews for these places. Could you also tell me how much it would cost to check out from these properties today? Lastly, could you tell me what the current time is?"}]}, "query_110_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "BINGMap.get_distance", "BINGMap.get_coordinates", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 890123674087541242}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Los Angeles"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_distance", "args": {"start": "Los Angeles", "end": "789 Street, Los Angeles"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm working with a client who is interested in a property located in Los Angeles. Can we get some details about this property? Also, can you help us with the exact location of this property? Lastly, we would like to know the distance from this property to another one located at 789 Street, Los Angeles."}]}, "query_111_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "BINGMap.get_coordinates", "AirbnbSearch.get_property_reviews", "ReserveMeeting.get_empty_room_with_time", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 972494279345285252}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 4807875}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 972494279345285252}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 941597372112246343}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 4807875}}, {"id": 7, "prev": [4], "name": "BINGMap.get_coordinates", "args": {"location": "Bayonne, NJ, United States"}}, {"id": 8, "prev": [5], "name": "BINGMap.get_coordinates", "args": {"location": "Queens, NY, United States"}}, {"id": 9, "prev": [6], "name": "BINGMap.get_coordinates", "args": {"location": "New Brunswick, NJ, United States"}}, {"id": 10, "prev": [7], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Bayonne, NJ, United States", "latitude": 40.66907883, "longitude": -74.11717987, "radius": 500}}, {"id": 11, "prev": [8], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Queens, NY, United States", "latitude": 40.75977707, "longitude": -73.81729889, "radius": 500}}, {"id": 12, "prev": [9], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "New Brunswick, NJ, United States", "latitude": 40.49594879, "longitude": -74.44412231, "radius": 500}}, {"id": 13, "prev": [12], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 14, "prev": [13], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a tourist, I'm planning a trip to New York. Could you show me the available properties in New York and provide details of the top three properties, such as their ID, name, and address? I'd also like to see the reviews of these properties. Could you also provide the geographical coordinates for each property? Additionally, I'm interested in discovering places that are conveniently located near each property, within a reasonable walking distance. Lastly, I would like to know if there are any meeting rooms available from 10:00 to 12:00 tomorrow."}]}, "query_111_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "ReserveMeeting.get_room_status", "BINGMap.get_distance", "BINGMap.get_coordinates", "AirbnbSearch.get_property_reviews", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51403713}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 4631873}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 726986015697846171}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51403713}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 4631873}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 726986015697846171}}, {"id": 7, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "San Francisco, CA, United States"}}, {"id": 8, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "San Bruno, CA, United States"}}, {"id": 9, "prev": [7], "name": "BINGMap.get_distance", "args": {"start": "37.78007889, -122.42015839", "end": "37.7749, -122.4194"}}, {"id": 10, "prev": [7], "name": "BINGMap.get_distance", "args": {"start": "37.78007889, -122.42015839", "end": "37.7749, -122.4194"}}, {"id": 11, "prev": [8], "name": "BINGMap.get_distance", "args": {"start": "37.62727737, -122.41614532", "end": "37.7749, -122.4194"}}, {"id": 12, "prev": [11], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 13, "prev": [12], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am an event planner and I need to find a suitable venue. Could you show me the available properties in San Francisco and provide details of the first, second, and third properties, such as their ID, name, and address? I'd also like to see the reviews of these properties. Could you also provide the geographical coordinates for each property? Furthermore, I'd like to know the distance from each property to a notable landmark in San Francisco. Lastly, I need to know the current booking status of all meeting rooms."}]}, "query_114_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.check_availability", "Weather.get_weather_today", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51619634}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 700888293266225258}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 691676460109271194}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51619634}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 700888293266225258}}, {"id": 7, "prev": [4], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "40.71806,-74.00095", "radius": 1000}}, {"id": 8, "prev": [5], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "40.72301,-73.99201", "radius": 1000}}, {"id": 9, "prev": [6], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "40.71994,-74.00098", "radius": 1000}}, {"id": 10, "prev": [9], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am arranging a corporate event in New York City. Please find properties in New York City that are available from October 24 to October 31 and give me details of the first three properties sorted by rating. I would like to know their title, property type, person capacity, rating, latitude, and longitude. Also, locate the five closest restaurants within a 1 km radius of each property. Lastly, let me know the weather forecast for today, October 17, in New York City."}]}, "query_114_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "Weather.forecast_weather", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 561489475078914207}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 727017675359552471}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51403713}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 561489475078914207}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 727017675359552471}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51403713}}, {"id": 7, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "San Francisco", "latitude": 37.797432, "longitude": -122.407883, "radius": 500}}, {"id": 8, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "San Bruno", "latitude": 37.6332, "longitude": -122.41208, "radius": 500}}, {"id": 9, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "San Francisco", "latitude": 37.79108, "longitude": -122.42006, "radius": 500}}, {"id": 10, "prev": [9], "name": "Weather.forecast_weather", "args": {"location": "San Francisco", "days": 1}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am visiting San Francisco to explore the local food scene. Please find properties in San Francisco and give me details of the first three properties sorted by rating. I want to know their title, property type, person capacity, rating, latitude, and longitude. Also, I would like to read the reviews of these properties. In addition, locate the five closest restaurants within a 500-meter radius of each property. Lastly, let me know the weather forecast for today in San Francisco."}]}, "query_115_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_checkout_price", "PolygonFinance.aggregate_stock_with_time", "AirbnbSearch.search_property_by_place", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 691676460109271194, "checkIn": "2023-10-20", "checkOut": "2023-10-27"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 51634632, "checkIn": "2023-10-20", "checkOut": "2023-10-27"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 51619634, "checkIn": "2023-10-20", "checkOut": "2023-10-27"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "ZG"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "ZG", "multiplier": 1, "timespan": "day", "from": "2023-10-01", "to": "2023-10-15"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am researching the real estate market in New York City. Please find available properties in New York City and give me the details of the first 3 properties, including their ID, name, and address. Also, find out the cost of each property for check-in on October 20, 2023, and check-out on October 27, 2023. Furthermore, I'd like to get detailed information about the real estate company 'Zillow Group'. Finally, I need the aggregate stock data for the ticker symbol 'ZG' from October 1, 2023, to October 13, 2023, with a time window size of 1 day."}]}, "query_116_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "AirbnbSearch.get_property_reviews", "FileOperation.read_file", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 28722771}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": false}}, {"id": 3, "prev": [2], "name": "Email.send", "args": {"address": "jane@example.com", "title": "Property Inquiry", "body": "Content of the file located at `data_v2/template_data/paper_readme.txt`", "attachment": "data_v2/template_data/paper_readme.txt"}}, {"id": 4, "prev": [3], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for properties in Los Angeles. Get reviews of the first property listed. Show the emails in the inbox. Send an email to jane@example.com with the title 'Property Inquiry' and include the text from the file located at `data_v2/template_data/paper_readme.txt`. Read the content of the file at `data_v2/template_data/paper_readme.txt`."}]}, "query_117_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Bali"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 989020487048284489}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 989020487048284489}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 49378969}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 49378969}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 48060454}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 48060454}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a travel blogger planning for my next visit to Bali. Can you find some available accommodations in Bali and provide me the details for the best three based on their rating and reviews? Also, I would like to know if these are available for the next week."}]}, "query_118_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "AirbnbSearch.check_availability", "FilmTMDB.get_now_playing", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 10803849}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 48347678}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 22788198}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 5, "prev": [4], "name": "Email.send", "args": {"address": "planner@event.com", "title": "Movie Night Details", "body": "Here are the details for your movie night in Los Angeles:\n\nAirbnb Properties:\n1. Property ID: 10803849\n   Name: clean warm quiet otaku private room\n   Address: Monterey Park, CA, United States\n\n2. Property ID: 48347678\n   Name: Suite in DTLA w/ King & Twin bed, full kitchen\n   Address: Los Angeles, CA, United States\n\nHighly-Rated Movies:\n1. The Godfather (1972)\n2. The Shawshank Redemption (1994)\n\nCurrently Showing in Theaters:\n1. Expend4bles (Release Date: 2023-09-15)\n2. The Equalizer 3 (Release Date: 2023-08-30)\n\nEnjoy your movie night!", "attachment": ""}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a movie night in Los Angeles and need to find up to three Airbnb properties that are available for this event. Could you also provide a list of movies that are  currently showing in theaters? Please forward these details to my email at planner@event.com."}]}, "query_11_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "AirbnbSearch.check_availability", "PPT.add_text_image_page", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Barcelona"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 24424717, "date": "2023-10-19"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 52047578, "date": "2023-10-19"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 24533837, "date": "2023-10-19"}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 24424717}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 52047578}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 24533837}}, {"id": 7, "prev": [6], "name": "PPT.create_file", "args": {"theme": "Corporate", "abs_location": "outputs/Corporate_Retreat_Properties_Barcelona.ppt"}}, {"id": 8, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Corporate Retreat in Barcelona", "bullet_items": "Date: October 18-25, 2023\nLocation: Barcelona, Spain"}}, {"id": 9, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Property 1: Boutique hotel in Barcelona", "bullet_items": "Property Type: Room in boutique hotel\nCapacity: 2 persons\nRating: 4.83\nLatitude: 41.384632\nLongitude: 2.177421"}}, {"id": 10, "prev": [9], "name": "PPT.get_image", "args": {"keywords": "Barcelona,architecture"}}, {"id": 11, "prev": [7, 10], "name": "PPT.add_text_image_page", "args": {"title": "Property 1: Boutique hotel in Barcelona", "bullet_items": "Property Type: Room in boutique hotel\nCapacity: 2 persons\nRating: 4.83\nLatitude: 41.384632\nLongitude: 2.177421", "image": "outputs/1697601645.1157258.jpg"}}, {"id": 12, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Property 2: Hostel in Barcelona", "bullet_items": "Property Type: Private room in hostel\nCapacity: 1 person\nRating: 4.72\nLatitude: 41.381886\nLongitude: 2.170774"}}, {"id": 13, "prev": [12], "name": "PPT.get_image", "args": {"keywords": "Barcelona,beach"}}, {"id": 14, "prev": [7, 12, 13], "name": "PPT.add_text_image_page", "args": {"title": "Property 2: Hostel in Barcelona", "bullet_items": "Property Type: Private room in hostel\nCapacity: 1 person\nRating: 4.72\nLatitude: 41.381886\nLongitude: 2.170774", "image": "outputs/1697601667.7879188.jpg"}}, {"id": 15, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Property 3: Hostel in El Prat de Llobregat", "bullet_items": "Property Type: Room in hostel\nCapacity: 1 person\nRating: 4.47\nLatitude: 41.3238\nLongitude: 2.09509"}}, {"id": 16, "prev": [15], "name": "PPT.get_image", "args": {"keywords": "Barcelona,culture"}}, {"id": 17, "prev": [7, 15, 16], "name": "PPT.add_text_image_page", "args": {"title": "Property 3: Hostel in El Prat de Llobregat", "bullet_items": "Property Type: Room in hostel\nCapacity: 1 person\nRating: 4.47\nLatitude: 41.3238\nLongitude: 2.09509", "image": "outputs/1697601692.936694.jpg"}}, {"id": 18, "prev": [7, 8, 9, 11, 12, 14, 15, 17], "name": "PPT.save_file", "args": {}}, {"id": 19, "prev": [18], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a corporate retreat in Barcelona and I need to find available properties for the next 7 days. Can you get the details of the top 3 available properties, such as title, property type, capacity, rating, latitude, and longitude? Create a PowerPoint with a title slide and a slide for each property. On each property slide, include the property's title, bullet points for its details, and an image related to Barcelona using keywords like 'architecture', 'beach', and 'culture'. Please save the PowerPoint presentation to 'outputs/Corporate_Retreat_Properties_Barcelona.ppt'."}]}, "query_121_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "AirbnbSearch.get_property_reviews", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 53132475}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 941597372112246343}}, {"id": 4, "prev": [3], "name": "Email.show", "args": {"only_unread": false}}, {"id": 5, "prev": [4], "name": "GoogleSearch.serper_search", "args": {"query": "average rental prices in different neighborhoods of New York City"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a real estate agent, I need to gather information about properties in New York City. Please find properties in New York City. Retrieve the reviews of the first three properties. Show me the emails in my inbox related to property inquiries. Also, look up the average rental prices in different neighborhoods of New York City."}]}, "query_127_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "FilmDouban.now_playing_out_filter", "FileOperation.write_file", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 858697692672545141}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 858697692672545141, "date": "2023-10-25"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 858697692672545141, "checkIn": "2023-10-25", "checkOut": "2023-10-27"}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 593322347340602809}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 593322347340602809, "date": "2023-10-25"}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 593322347340602809, "checkIn": "2023-10-25", "checkOut": "2023-10-27"}}, {"id": 7, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51619634}}, {"id": 8, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51619634, "date": "2023-10-25"}}, {"id": 9, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 51619634, "checkIn": "2023-10-25", "checkOut": "2023-10-27"}}, {"id": 10, "prev": [9], "name": "FileOperation.write_file", "args": {"file_path": "chosen_property.txt", "text": "Chosen Property: Rental unit in New York\nProperty ID: 51619634\nCheck-in Date: 2023-10-25\nCheck-out Date: 2023-10-27\nTotal Cost: $705.60"}}, {"id": 11, "prev": [10], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm traveling to New York next week for business and I need to find three suitable places to stay. Please give me the details, checkout price, and availability for these properties. I also need to review my meeting agenda. After reviewing the options, I need to keep a record of the chosen property details. Additionally, I'm interested in the top 5 movies currently being shown in China."}]}, "query_132_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "13:00", "end_time": "14:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "13:00", "end_time": "14:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a meeting organizer, I have a meeting to plan for today. Could you help me find a suitable room that is available in the upcoming hours? Once we find a suitable room, could we reserve it for the duration of the meeting?"}]}, "query_133_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51113056}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 44783505}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 984458557997768943}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51113056, "date": "2023-10-19"}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 44783505, "date": "2023-10-19"}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 984458557997768943, "date": "2023-10-19"}}, {"id": 7, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51113056, "date": "2023-10-20"}}, {"id": 8, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 44783505, "date": "2023-10-20"}}, {"id": 9, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 984458557997768943, "date": "2023-10-20"}}, {"id": 10, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51113056, "date": "2023-10-21"}}, {"id": 11, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 44783505, "date": "2023-10-21"}}, {"id": 12, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 984458557997768943, "date": "2023-10-21"}}, {"id": 13, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51113056}}, {"id": 14, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 44783505}}, {"id": 15, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 984458557997768943}}, {"id": 16, "prev": [15], "name": "TimeTool.get_weekday", "args": {}}, {"id": 17, "prev": [16], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to Tokyo. Could you find properties in Tokyo and provide me with the details of the first, second, and third properties ranked by popularity, including their names, ratings, capacities, and addresses? Also, could you verify if these properties are available for the next 3 days? Additionally, I would like to know what previous visitors have said about these properties. Could you also let me know what day of the week it is today?"}]}, "query_134_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "FileOperation.write_file", "FileOperation.read_file", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 855819398716503903}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 855819398716503903}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 855819398716503903, "checkIn": "2023-11-10", "checkOut": "2023-11-15"}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 7559897}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 7559897}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 7559897, "checkIn": "2023-11-10", "checkOut": "2023-11-15"}}, {"id": 7, "prev": [6], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/ParisTrip.ppt"}}, {"id": 8, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Paris Trip", "bullet_items": "Paris is the capital city of France.[SPAN] It is known for its iconic landmarks such as the Eiffel Tower and Louvre Museum.[SPAN] The city is also famous for its cuisine and fashion."}}, {"id": 9, "prev": [8], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 10, "prev": [7, 9], "name": "FileOperation.write_file", "args": {"file_path": "outputs/ParisTrip.ppt", "text": "To make a sample Conference paper, copy the contents of this directory\nsomewhere, and type\n latex egpaper_final\nor \n pdflatex egpaper_final\n\nTo make a copy with the review style for anonymous review, and\nincluding line numbers, replace 'egpaper_final' with\n'egpaper_for_review' in the commands above.\n\nNote that in some environments, it may be necessary to run bibtex explicitly (bibtex egpaper_final)."}}, {"id": 11, "prev": [10], "name": "PPT.save_file", "args": {}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I plan to travel to Paris from November 10th to November 15th. Can you please find some Airbnb properties in Paris? I would like to know the details, reviews, and checkout cost of these properties. Also, I need to know the availability of these properties for my desired dates. Then, I would like to create a presentation about the trip, with a text page containing some information about Paris. Please read the content for the presentation from 'data_v2/template_data/paper_readme.txt'. After creating the presentation, save it to 'outputs/ParisTrip.ppt'."}]}, "query_134_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "FileOperation.write_file", "PPT.add_text_image_page", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Miami"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 29592742}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 29592742}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 29592742, "checkIn": "2023-10-20", "checkOut": "2023-10-25"}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 834833864568549748}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 834833864568549748}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 834833864568549748, "checkIn": "2023-10-20", "checkOut": "2023-10-25"}}, {"id": 7, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 53555858}}, {"id": 8, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 53555858}}, {"id": 9, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 53555858, "checkIn": "2023-10-20", "checkOut": "2023-10-25"}}, {"id": 10, "prev": [9], "name": "PPT.create_file", "args": {"theme": "Miami", "abs_location": "outputs/MiamiProperties.ppt"}}, {"id": 11, "prev": [10], "name": "PPT.add_text_page", "args": {"title": "Property 1", "bullet_items": "Guest suite in Miami\n- ★4.59\n- 1 bedroom\n- 1 bed\n- 1 bath"}}, {"id": 12, "prev": [11], "name": "PPT.get_image", "args": {"keywords": "Miami property"}}, {"id": 13, "prev": [10, 12], "name": "PPT.add_text_image_page", "args": {"title": "Property 1 Image", "bullet_items": "Image of Property 1", "image": "outputs/1697708361.41023.jpg"}}, {"id": 14, "prev": [10], "name": "PPT.add_text_page", "args": {"title": "Property 2", "bullet_items": "Rental unit in Miami\n- ★4.98\n- Studio\n- 2 beds\n- 1 bath"}}, {"id": 15, "prev": [10], "name": "PPT.add_text_page", "args": {"title": "Property 3", "bullet_items": "Rental unit in Miami Beach\n- ★4.90\n- 1 bedroom\n- 1 bed\n- 1 bath"}}, {"id": 16, "prev": [10, 11, 14, 15, 13], "name": "PPT.save_file", "args": {}}, {"id": 17, "prev": [16], "name": "FileOperation.write_file", "args": {"file_path": "outputs/query_summary.txt", "text": "The presentation for the Miami properties has been successfully created and saved as 'outputs/MiamiProperties.ppt'."}}, {"id": 18, "prev": [17], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a real estate agent and I need to prepare a presentation for a client who is interested in buying a property in Miami. Please find properties in Miami. I would like to know the details, reviews, and checkout cost of these properties. Also, I need to know the availability of these properties for the client's desired dates. Once I have the information, I would like to create a presentation about the properties, with a text and image page for each property. After creating the presentation, save it to 'outputs/MiamiProperties.ppt'."}]}, "query_136_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_checkout_price"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 28722771}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 1004413709358464188}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 10803849}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 28722771, "checkIn": "2023-11-20", "checkOut": "2023-11-27"}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 1004413709358464188, "checkIn": "2023-11-20", "checkOut": "2023-11-27"}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 10803849, "checkIn": "2023-11-20", "checkOut": "2023-11-27"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a property investor, I'm interested in properties in Los Angeles. Could we search for properties in Los Angeles and provide me with the details of the first 3 properties, including their ID, name, and address? Can we also find out the checkout cost for each property for a stay for the next week? Lastly, I need the coordinates (latitude and longitude) of each property."}]}, "query_137_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.search_property_by_place", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 847456265351637680}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 933732691116240543}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38268855}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 5, "prev": [4], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 550}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to Tokyo and I need a good place to stay. Search for properties in Tokyo and show me details of the top 3, including their name, rating, and the cost for a 3-night stay. Could you also show me the top 5 rated movies? And I'd like to know more about a movie with the ID 550."}]}, "query_139_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.get_author_id", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "WLaj9ZUvTjoJ"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Patrick Henry Winston"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm researching artificial intelligence and need some relevant scholarly articles. Could you find the top three papers on Google Scholar related to this subject, and give me their titles, citation counts, excerpts, and publication details? Also, could you provide me with the MLA citation for the first paper? I'd also like information about the author of the first paper, including their name, affiliation, their top three articles, and their website. Finally, could you give me the author ID of this author?"}]}, "query_13_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_distance"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "research institutions", "places": "Stanford University", "radius": 5000}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Institute for Research in the Social Sciences"}}, {"id": 3, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Stanford Institute For Economic Policy Research"}}, {"id": 4, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Health Policy Research: Research Institute: Palo Alto Medical Foundation"}}, {"id": 5, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Bay Research Institute"}}, {"id": 6, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Michelle R. Clayman Institute for Gender Research"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of artificial intelligence. Please find articles related to 'artificial intelligence' on Arxiv.org and provide me with the metadata of the first 3 articles, including the published date, title, authors, and summary. Also, search for research institutions or universities close to Stanford University and provide me with a list of a maximum of 5 places, including their names and addresses. Lastly, calculate the distance between Stanford University and each of these research institutions."}]}, "query_13_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "BINGMap.get_route", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "art exhibitions"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "art gallery", "places": "Metropolitan Museum of Art, New York City"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "Metropolitan Museum of Art, New York City", "end": "TAMBARAN GALLERY"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am currently visiting New York City and I want to explore the art scene in the city. Please find articles related to 'art exhibitions' on Arxiv.org and provide me with the metadata of the first 3 articles, including the published date, title, authors, and summary. Also, search for art galleries or museums close to the Metropolitan Museum of Art in New York City and provide me with a list of a maximum of 5 places, including their names and addresses. Lastly, provide me with the route from the Metropolitan Museum of Art to the nearest art gallery."}]}, "query_140_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "涉过愤怒的海"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "惊奇队长2"}}, {"id": 4, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "河边的错误"}}, {"id": 5, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "金手指"}}, {"id": 6, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "红猪 电影 预告片"}}, {"id": 7, "prev": [2], "name": "GoogleSearch.serper_search", "args": {"query": "涉过愤怒的海 电影 预告片"}}, {"id": 8, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "惊奇队长2 电影 预告片"}}, {"id": 9, "prev": [4], "name": "GoogleSearch.serper_search", "args": {"query": "河边的错误 电影 预告片"}}, {"id": 10, "prev": [5], "name": "GoogleSearch.serper_search", "args": {"query": "金手指 电影 预告片"}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Provide the details of the first five movies that are releasing soon in China. Also, look for the trailers of these movies."}]}, "query_142_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "AirbnbSearch.search_property_by_place", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for properties available for rent in Paris for a short duration. Find out which movies will be released in China in the near future. Also, check what time it is right now."}]}, "query_142_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.check_availability", "FilmDouban.now_playing_out_filter", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.check_availability", "args": {"propertyId": "ABC456", "date": "2023-10-23"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Determine if the Airbnb property with the ID 601428225599197224 is available to rent tomorrow. Find out which movies are being shown in China at the moment. Also, check the current time."}]}, "query_143_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "AirbnbSearch.get_property_details", "FilmDouban.now_playing_out_filter", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "PPT.add_text_image_page", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 972494279345285252}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 4195503}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 47158717}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 972494279345285252}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 4195503}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 47158717}}, {"id": 7, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 972494279345285252}}, {"id": 8, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 4195503}}, {"id": 9, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 47158717}}, {"id": 10, "prev": [9], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 11, "prev": [10], "name": "PPT.create_file", "args": {"theme": "marketing", "abs_location": "outputs/marketing_presentation.ppt"}}, {"id": 12, "prev": [1], "name": "PPT.add_text_image_page", "args": {"title": "Property 1", "bullet_items": "Property Type: Private room in home[SPAN]Rating: 4.71[SPAN]Location: Bayonne, NJ, United States", "image": "/path/to/image1.jpg"}}, {"id": 13, "prev": [12], "name": "PPT.get_image", "args": {"keywords": "New York skyline"}}, {"id": 14, "prev": [13], "name": "PPT.add_text_image_page", "args": {"title": "Property 1", "bullet_items": "Property Type: Private room in home[SPAN]Rating: 4.71[SPAN]Location: Bayonne, NJ, United States", "image": "outputs/1697745182.1838884.jpg"}}, {"id": 15, "prev": [2, 13], "name": "PPT.add_text_image_page", "args": {"title": "Property 2", "bullet_items": "Property Type: Room in boutique hotel[SPAN]Rating: 4.54[SPAN]Location: Union City, NJ, United States", "image": "outputs/1697745182.1838884.jpg"}}, {"id": 16, "prev": [3, 13], "name": "PPT.add_text_image_page", "args": {"title": "Property 3", "bullet_items": "Property Type: Private room in guest suite[SPAN]Rating: 4.81[SPAN]Location: Baldwin, NY, United States", "image": "outputs/1697745182.1838884.jpg"}}, {"id": 17, "prev": [12, 14, 15], "name": "PPT.save_file", "args": {}}, {"id": 18, "prev": [17], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to create a presentation for a marketing campaign. Please search for available properties in New York. Retrieve the details of the top three properties, including their title, property type, rating, and location. Check the availability of these properties for the next 7 days. Get the reviews of these properties. Then, retrieve the details of the top three currently playing films in China. Create a PPT file with a custom theme. Add a text page for each property, with the property title as the page title and the property details as the bullet points. Also, add an image to each page. Finally, save the PowerPoint file to 'outputs/marketing_presentation.ppt'."}]}, "query_144_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the three most anticipated films that are about to be released in China. Choose one of these movies and provide a description of it."}]}, "query_144_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_checkout_price"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 691676460109271194, "checkIn": "2023-10-20", "checkOut": "2023-10-23"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 691676460109271194, "date": "2023-10-18"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find available accommodations in New York City. Once a property is selected, determine the cost of staying there for three days. Also, verify if there is a vacant meeting room at this property that can be used for a two-hour event."}]}, "query_148_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_details", "FilmTMDB.get_now_playing", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to stay updated with the latest movies. Please provide me with a list of movies that are currently playing in theaters, including their titles, release dates, popularity, and ratings. Also, provide me with a list of popular movies ranked by popularity, including the same details. Lastly, I would like to get the top-level details of the most popular movie currently playing, such as its genres, release date, runtime, overview, vote average, and popularity."}]}, "query_148_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "GoogleSearch.serper_search", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "FilmTMDB.search_movie", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51634632}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 700888293266225258}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 691676460109271194}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51634632}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 700888293266225258}}, {"id": 7, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 691676460109271194, "date": "2023-10-19"}}, {"id": 8, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51634632, "date": "2023-10-19"}}, {"id": 9, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 700888293266225258, "date": "2023-10-19"}}, {"id": 10, "prev": [9], "name": "FilmTMDB.search_movie", "args": {"query": "New York City"}}, {"id": 11, "prev": [10], "name": "GoogleSearch.serper_search", "args": {"query": "popular tourist attractions in New York City"}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City. Please search for available properties in New York City and provide me with the details of the first, second, and third properties, including their names and addresses. Also, provide me with the reviews of the first, second, and third properties. Additionally, check the availability of the first, second, and third properties for the next 7 days. Furthermore, provide me with the movie ID and title of movies that have New York City as their primary filming location. Lastly, I would like to search for information about popular tourist attractions in New York City on Google."}]}, "query_148_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299054}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "food"}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 299054}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm looking for some food recommendations. Please provide me with the reviews of the most popular movie, including the user's name, rating, and review. Additionally, search for a movie having 'food' in its title and provide me with the movie ID and title. Lastly, find similar movies to the most popular one based on genres and keywords."}]}, "query_149_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 575264}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a movie enthusiast, I'm looking for some movie recommendations. Could you provide me with a list of the top three popular movies along with their name, release date, popularity rating, and overall rating? Similarly, could you also give me a list of the top three highest-rated movies with the same details? Additionally, could you show me a list of the top three movies currently being shown in theaters? Lastly, could you recommend some similar movies based on one of the popular movies?"}]}, "query_14_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Latest Article on Quantum Computing", "body": "Published: 2022-08-01\nTitle: The Rise of Quantum Internet Computing\nAuthors: Seng W. Loke\nSummary: This article highlights quantum Internet computing as referring to\ndistributed quantum computing over the quantum Internet, analogous to\n(classical) Internet computing involving (classical) distributed computing over\nthe (classical) Internet. Relevant to quantum Internet computing would be areas\nof study such as quantum protocols for distributed nodes using quantum\ninformation for computations, quantum cloud computing, delegated verifiable\nblind or private computing, non-local gates, and distributed quantum\napplications, over Internet-scale distances."}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the latest article related to 'quantum computing' from Arxiv. Then, dispatch an email with the title and summary of this article to john.doe@example.com. Afterward, display the emails present in my inbox."}]}, "query_14_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning in healthcare"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "jane.doe@example.com", "title": "Top 3 Articles on Machine Learning in Healthcare", "body": "Here are the top three articles on machine learning in healthcare:\n\n1. Title: Fair Machine Learning in Healthcare: A Review\n   Authors: Qizhang Feng, Mengnan Du, Na Zou, Xia Hu\n   Summary: Benefiting from the digitization of healthcare data and the development of computing power, machine learning methods are increasingly used in the healthcare domain. Fairness problems have been identified in machine learning for healthcare, resulting in an unfair allocation of limited healthcare resources or excessive health risks for certain groups. Therefore, addressing the fairness problems has recently attracted increasing attention from the healthcare community. However, the intersection of machine learning for healthcare and fairness in machine learning remains understudied. In this review, we build the bridge by exposing fairness problems, summarizing possible biases, sorting out mitigation methods and pointing out challenges along with opportunities for the future.\n\n2. Title: Machine Learning Applications In Healthcare: The State Of Knowledge and Future Directions\n   Authors: Mrinmoy Roy, Sarwar J. Minar, Porarthi Dhar, A T M Omor Faruq\n   Summary: Detection of easily missed hidden patterns with fast processing power makes machine learning (ML) indispensable to today's healthcare system. Though many ML applications have already been discovered and many are still under investigation, only a few have been adopted by current healthcare systems. As a result, there exists an enormous opportunity in the healthcare system for ML but distributed information, scarcity of properly arranged and easily explainable documentation in the related sector are major impediments that are making ML applications difficult for healthcare professionals. This study aimed to gather ML applications in different areas of healthcare concisely and more effectively so that necessary information can be accessed immediately with relevant references. We divided our study into five major groups: community level work, risk management/preventive care, healthcare operation management, remote care, and early detection. Dividing these groups into subgroups, we provided relevant references with a description in tabular form for quick access. Our objective is to inform people about ML applicability in the healthcare industry, reduce the knowledge gap of clinicians about the ML applications, and motivate healthcare professionals towards a more machine learning-based healthcare system.\n\n3. Title: Probabilistic Machine Learning for Healthcare\n   Authors: Irene Y. Chen, Shalmali Joshi, Marzyeh Ghassemi, Rajesh Ranganath\n   Summary: Machine learning can be used to make sense of healthcare data. Probabilistic machine learning models help provide a complete picture of observed data in healthcare. In this review, we examine how probabilistic machine learning can advance healthcare. We consider challenges in the predictive model building pipeline where probabilistic models can be beneficial, including calibration and missing data. Beyond predictive models, we also investigate the utility of probabilistic machine learning models in phenotyping, in generative models for clinical use cases, and in reinforcement learning.\n\nPlease find attached the full articles for your reference."}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Fetch articles related to 'machine learning in healthcare' from Arxiv and rank them based on the number of citations. Then, send an email with the title, authors, and summary of the top three articles to jane.doe@example.com."}]}, "query_14_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "neural networks"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "prof.johnson@example.com", "title": "Lecture Notes: Neural Network Architectures", "body": "These lecture notes provide an overview of Neural Network architectures from a mathematical point of view. Especially, Machine Learning with Neural Networks is seen as an optimization problem. Covered are an introduction to Neural Networks and the following architectures: Feedforward Neural Network, Convolutional Neural Network, ResNet, and Recurrent Neural Network."}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent article related to 'neural networks' on Arxiv. Then, send an email with the title and summary of this article to prof.johnson@example.com. Afterward, reveal the emails in my inbox."}]}, "query_151_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "AirbnbSearch.check_availability", "FilmTMDB.get_now_playing", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 42409434}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/EventDetails.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Event Details", "bullet_items": "1. Date: [SPAN]2. Time: [SPAN]3. Location: [SPAN]4. Movie: [SPAN]5. Food and Drinks: [SPAN]"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am organizing a movie night event for a group of friends. I need to find available Airbnb properties in Los Angeles for the event date, and would like a list of up to three properties, including the property ID, name, and address. Additionally, I need to know the availability of a specific property for the next ten days. Also, I'd like to know about movies currently showing in theaters, including the title, release date, popularity, and rating of up to three movies. Finally, I want to create a PowerPoint presentation with a text page titled 'Event Details'. Please save the presentation as 'EventDetails.ppt' in the 'outputs' folder."}]}, "query_152_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "Weather.get_weather_today", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "Weather.get_weather_today", "args": {"location": "Los Angeles"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to know the reviews of the movie titled 'Inception'. Also, provide me with the details of this movie, including its genres, release date, runtime, title, overview, vote average, and popularity. Lastly, I would like to know the weather in Los Angeles for today, October 17, 2023."}]}, "query_152_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "Weather.forecast_weather", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "London", "days": 0}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am looking for Airbnb properties in New York City. Also, I would like to have a list of the top-rated movies. Lastly, I want to know the weather forecast for London for today."}]}, "query_153_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 663272282290556235}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38677942}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51113056}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 663272282290556235}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 38677942}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51113056}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Being a travel blogger, I'm interested in writing about unique accommodations around the globe. Currently, I'm focusing on Tokyo. Could you help me find the three top-rated properties in Tokyo? I would like to know their titles, property type, capacity, ratings, geolocation (latitude and longitude). Additionally, I'm interested in reading the reviews of these properties."}]}, "query_155_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "GaodeMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Eiffel Tower, Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 15297775}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 15297775}}, {"id": 3, "prev": [1], "name": "GaodeMap.search_nearby", "args": {"location": "(2.29519, 48.85354)", "keywords": "restaurant"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find a place to stay near the Eiffel Tower in Paris. Obtain detailed information about the first property listed, such as its name, type, capacity, reviews, and exact location. Additionally, find restaurants within a 1 km radius of this location."}]}, "query_156_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "GaodeMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 933732691116240543}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 49470166}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 37677930}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 933732691116240543}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 49470166}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 37677930}}, {"id": 7, "prev": [6], "name": "GaodeMap.search_nearby", "args": {"location": "35.64458976563521,139.74395288003788", "keywords": "restaurant"}}, {"id": 8, "prev": [7], "name": "GaodeMap.search_nearby", "args": {"location": "35.60381,139.73119", "keywords": "restaurant"}}, {"id": 9, "prev": [8], "name": "GaodeMap.search_nearby", "args": {"location": "35.70468,139.77436", "keywords": "restaurant"}}, {"id": 10, "prev": [9], "name": "GaodeMap.search_nearby", "args": {"location": "Tokyo", "keywords": "food market"}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a food blogger, I am interested in exploring Tokyo. Could you help me find available accommodations in Tokyo and share the details of the top three, including their names, ratings, and geographical coordinates? Could you also share the reviews of these accommodations? Additionally, could you tell me the distance from each accommodation to the nearest restaurant within a 1 km radius? Lastly, could you find popular food markets in Tokyo?"}]}, "query_15_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.read_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find recent scholarly articles about 'quantum computing' and gather more information from the file located at 'data_v2/template_data/paper_readme.txt' for my research."}]}, "query_15_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.read_file", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/movies.txt"}}, {"id": 2, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/ML_articles_summary.txt", "text": "Published: 2019-09-08\nTitle: Lecture Notes: Optimization for Machine Learning\nAuthors: Elad Hazan\nSummary: Lecture notes on optimization for machine learning, derived from a course at\nPrinceton University and tutorials given in MLSS, Buenos Aires, as well as\nSimons Foundation, Berkeley.\n\nPublished: 2018-11-11\nTitle: An Optimal Control View of Adversarial Machine Learning\nAuthors: Xiaojin Zhu\nSummary: I describe an optimal control view of adversarial machine learning, where the\ndynamical system is the machine learner, the input are adversarial actions, and\nthe control costs are defined by the adversary's goals to do harm and be hard\nto detect. This view encompasses many types of adversarial machine learning,\nincluding test-item attacks, training-data poisoning, and adversarial reward\nshaping. The view encourages adversarial machine learning researcher to utilize\nadvances in control theory and reinforcement learning.\n\nPublished: 2017-07-16\nTitle: Minimax deviation strategies for machine learning and recognition with short learning samples\nAuthors: Michail Schlesinger, Evgeniy Vodolazskiy\nSummary: The article is devoted to the problem of small learning samples in machine\nlearning. The flaws of maximum likelihood learning and minimax learning are\nlooked into and the concept of minimax deviation learning is introduced that is\nfree of those flaws."}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find articles related to 'machine learning', read the content of a file at 'data_v2/template_data/movies.txt', analyze the articles, and save the summary of my findings to 'outputs/ML_articles_summary.txt'."}]}, "query_15_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.read_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "neural networks"}}, {"id": 1, "prev": [0], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find scholarly articles about 'neural networks' and gather more information from the file located at 'data_v2/template_data/paper_readme.txt' to prepare for my upcoming presentation."}]}, "query_162_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Pavel Hamet"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "9zb7YrEAAAAJ"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 6, "prev": [4], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Pavel Hamet"}}, {"id": 7, "prev": [6], "name": "GoogleScholar.get_author_information", "args": {"author_id": "9zb7YrEAAAAJ"}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please find scholarly articles related to the topic 'artificial intelligence' on Google Scholar and provide me with the titles, citation numbers, and publication information for the top three papers. Next, for the first paper, provide me with its MLA citation format using its organic result ID. Lastly, find the information of the first author mentioned in the first paper."}]}, "query_162_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "17:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "101", "start_time": "14:30", "end_time": "16:30"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please check for available rooms today between 14:00 and 17:00 and provide me with the IDs. Then, if room 101 is available, I would like to reserve it for the event from 14:30 to 16:30. Lastly, I need to check the current booking status of room 101."}]}, "query_163_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "GoogleScholar.search_google_scholar", "AirbnbSearch.get_property_reviews", "GoogleScholar.get_citation_format", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "sustainable architecture"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "O89oBDOtbPMJ"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "cV77_aKKeAYJ"}}, {"id": 3, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "CdeY2EeXYiAJ"}}, {"id": 4, "prev": [3], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Copenhagen"}}, {"id": 5, "prev": [4], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "815771399638335578"}}, {"id": 6, "prev": [4], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "12358255"}}, {"id": 7, "prev": [4], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "894801997354800272"}}, {"id": 8, "prev": [7], "name": "TimeTool.get_weekday", "args": {}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm working on a research project about sustainable architecture. I need help in finding a few relevant articles and property reviews. Could you find scholarly articles related to sustainable architecture and provide the titles, citation counts, and publication details for the top three? Following that, search for accommodations in Copenhagen, a city known for sustainable architecture, and provide reviews for the top three properties. Lastly, could you tell me what day of the week it is today?"}]}, "query_164_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51634632}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 700888293266225258}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Impact of Short-Term Rentals on Local Communities"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "aa0yAA7T27oJ"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Sabine Muschter"}}, {"id": 7, "prev": [6], "name": "PPT.create_file", "args": {"theme": "Research", "abs_location": "outputs/research_findings.ppt"}}, {"id": 8, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Top Airbnb Properties in New York City", "bullet_items": "[SPAN]Property 1: Loft in New York, Entire loft, Capacity: 2, Rating: 4.61[SPAN]Property 2: Rental unit in Brooklyn, Entire rental unit, Capacity: 2, Rating: 4.72[SPAN]Property 3: Loft in New York, Private room in loft, Capacity: 3, Rating: 4.53"}}, {"id": 9, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "MLA Citation", "bullet_items": "Muschter, Sabine, et al. 'Third-party impacts of short-term rental accommodation: A community survey to inform government responses.' Journal of sustainable tourism 30.5 (2022): 1102-1121."}}, {"id": 10, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Author Information", "bullet_items": "Author: Sabine Muschter[SPAN]Affiliation: N/A[SPAN]Website: N/A"}}, {"id": 11, "prev": [7, 8, 9, 10], "name": "PPT.save_file", "args": {}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you find details for the top three Airbnb properties in New York City including property type, capacity, rating, latitude, and longitude? Also, I need the MLA citation format for the article titled 'Impact of Short-Term Rentals on Local Communities' from Google Scholar. Can you provide the name, affiliation, and website of the author of this article? Lastly, create a PowerPoint presentation summarizing these research findings. Include the property details, the citation, and the author information on separate slides. Save the presentation as research_findings.ppt in the outputs folder."}]}, "query_164_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "GoogleScholar.search_google_scholar", "GoogleScholar.get_citation_format", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 4464347}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 35494221}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51541759}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "conference planning and organization"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "luTaq8PfhYcJ"}}, {"id": 6, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "Xk8GurSkkSUJ"}}, {"id": 7, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "yt_vFfMib7MJ"}}, {"id": 8, "prev": [7], "name": "PPT.create_file", "args": {"theme": "Conference", "abs_location": "outputs/conference_plan.ppt"}}, {"id": 9, "prev": [8], "name": "PPT.add_text_page", "args": {"title": "Conference Agenda", "bullet_items": "1. Introduction\n2. Keynote Speech\n3. Breakout Sessions\n4. Networking Lunch\n5. Panel Discussion"}}, {"id": 10, "prev": [8], "name": "PPT.add_text_page", "args": {"title": "Logistics", "bullet_items": "1. Venue and Date\n2. Accommodation\n3. Transportation\n4. Registration Process\n5. AV Equipment"}}, {"id": 11, "prev": [1, 2, 3, 8], "name": "PPT.add_text_page", "args": {"title": "Property Information", "bullet_items": "1. Property 1: Bed and breakfast in San Francisco\n   - Type: Shared room in bed and breakfast\n   - Capacity: 1 person\n   - Rating: 4.74\n   - Latitude: 37.79821\n   - Longitude: -122.40521\n\n2. Property 2: Hostel in San Francisco\n   - Type: Shared room in hostel\n   - Capacity: 1 person\n   - Rating: 4.63\n   - Latitude: 37.78856\n   - Longitude: -122.41952\n\n3. Property 3: Aparthotel in San Francisco\n   - Type: Room in aparthotel\n   - Capacity: 1 person\n   - Rating: 4.88\n   - Latitude: 37.79101\n   - Longitude: -122.42011"}}, {"id": 12, "prev": [5, 6, 7, 8], "name": "PPT.add_text_page", "args": {"title": "Key Points from Scholarly Articles", "bullet_items": "1. Utilizing digital advocacy in community organizing: Lessons learned from organizing in virtual spaces to promote worker rights and economic justice\n   - Citation: Brady, Shane R., Jimmy A. Young, and David A. McLeod. \"Utilizing digital advocacy in community organizing: Lessons learned from organizing in virtual spaces to promote worker rights and economic justice.\" Journal of Community Practice 23.2 (2015): 255-273\n\n2. So you think you want to run an environmental conservation meeting? Advice on the slings and arrows of outrageous fortune that accompany academic conference planning\n   - Citation: Parsons, E. C. M. \"So you think you want to run an environmental conservation meeting? Advice on the slings and arrows of outrageous fortune that accompany academic conference planning.\" Journal of Environmental Studies and Sciences 5 (2015): 735-744\n\n3. Manpower planning and organization design\n   - Citation: Bryant, Donald T., and Richard J. Niehaus. Manpower planning and organization design. Vol. 7. Springer Science & Business Media, 2013"}}, {"id": 13, "prev": [9, 10, 11, 12], "name": "PPT.save_file", "args": {}}, {"id": 14, "prev": [13], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you find details for the top five Airbnb properties in San Francisco including property type, capacity, rating, latitude, and longitude? Also, search for the top three scholarly articles about conference planning and organization on Google Scholar. Lastly, create a PowerPoint presentation with details about the conference agenda, logistics, property information, and key points from the scholarly articles. Save the presentation as conference_plan.ppt in the outputs folder."}]}, "query_165_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "machine learning"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "ITZ1e7MAAAAJ"}}, {"id": 3, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for academic articles associated with 'machine learning' on Google Scholar. Fetch the information about the author, including their name, affiliation, articles, and website, of the first author in the result list. Furthermore, fetch the MLA citation format for the first article in the list."}]}, "query_166_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "PolygonFinance.get_daliy_open_close", "PolygonFinance.aggregate_stock_with_time", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 2, "prev": [0], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 1, "timespan": "day", "from": "2023-09-18", "to": "2023-10-18"}}, {"id": 3, "prev": [0], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-10"}}, {"id": 4, "prev": [0], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in investing in stocks. Could you look up the company 'Apple' to find its ticker symbol? Once the symbol is found, give me a detailed report about the company. Moreover, I'd like to examine the aggregate bars for the stock over the past month, each bar representing a day. Please also provide the opening and closing prices of the stock on October 10, 2023. Lastly, could you point me to the latest news articles about the company?"}]}, "query_166_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm conducting a research project and need information from scholarly articles. Could you help me find articles related to 'climate change'? I'd like to know the titles, number of citations, organic result IDs, snippets, and publication information for the first three articles. After that, could you find the information about the author with a certain ID? Also, I need the MLA citation format for the first organic result ID and the author's ID using their name."}]}, "query_168_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Bali"}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 989020487048284489}}, {"id": 3, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 49378969}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 802573060713138056}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am preparing a blog post about the top Airbnb accommodations in Bali. Could you help me find three properties with the best ratings and provide their names and addresses? Also, what is the current time for accurate timestamping in my blog post?"}]}, "query_169_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 858697692672545141}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 858697692672545141}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/New_York_City_Properties.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Property Details", "bullet_items": "Property Type: Private room in bed and breakfast\nCapacity: 1 person\nRating: 4.71\nLatitude: 40.74972075408687\nLongitude: -73.99472394752505"}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Client Testimonials", "bullet_items": "Review 1: Great place\nRating: 5\n\nReview 2: The place is so clean and well managed, it’s impressive. All staff were amazing but big thanks to Ravi who was such a warm, friendly spirit. Location v central. My only critique is the noise, something they can’t easily change. If you’re spending very late nights out and aren’t a heavy sleeper, this place may not be ideal. It is really hard even w/earplugs to sleep uninterrupted during the day because the place has so many people walking around and talking and the walls are thin. \nI was near the front desk which was especially noisy but they did move me to a quieter spot when available, which was sweet of them. I didn’t spend my last nights there to know if the new spot helped but the staff really go above and beyond to make your stay as best as it can be and I would stay here again for that alone.\nRating: 5\n\nReview 3: Great place to stay\nRating: 5"}}, {"id": 6, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a real estate agent looking for properties in New York City. Please find available accommodations in New York City. Retrieve the details, including property type, capacity, rating, latitude, and longitude, for the first property. Also, retrieve up to 3 reviews for that property. Create a PowerPoint presentation titled 'New York City Properties' and add a text page with the title 'Property Details' and the property details. Add another text page with the title 'Client Testimonials' and the property reviews. Save the presentation to `outputs/New_York_City_Properties.ppt`."}]}, "query_16_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "movies currently playing in China"}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 3, "prev": [0, 1, 2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find three recent articles related to quantum computing, and retrieve the authors, titles, and summaries. Also, provide information about the movies currently playing in China and give a detailed description of the movie '驯龙高手'."}]}, "query_16_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "ArxivSearch.get_arxiv_article_information", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "侏罗纪公园"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for three articles related to machine learning and retrieve the publication details, including authors, titles, and summaries. Additionally, find upcoming comedy movies in China, and provide a detailed description of the movie '侏罗纪公园'."}]}, "query_16_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "ArxivSearch.get_arxiv_article_information", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "data analysis"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve three articles related to data analysis and extract the publication information, including authors, titles, and summaries. Also, obtain the details of the movies currently playing in China and the upcoming action movies in China."}]}, "query_172_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 41020735, "date": "2023-10-25"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 41020735}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 38931663, "date": "2023-10-25"}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38931663}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 989883752603321143, "date": "2023-10-25"}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 989883752603321143}}, {"id": 7, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 41020735}}, {"id": 8, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 38931663}}, {"id": 9, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 989883752603321143}}, {"id": 10, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 41020735, "checkIn": "2023-10-25", "checkOut": "2023-10-26"}}, {"id": 11, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 38931663, "checkIn": "2023-10-25", "checkOut": "2023-10-26"}}, {"id": 12, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 989883752603321143, "checkIn": "2023-10-25", "checkOut": "2023-10-26"}}, {"id": 13, "prev": [12], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find Airbnb accommodations in Paris that are available for the next week. Retrieve information, cost at checkout, and customer feedback for the three properties with the highest guest ratings."}]}, "query_172_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "AirbnbSearch.get_property_details", "ReserveMeeting.get_room_status", "ReserveMeeting.get_empty_room_with_time", "AirbnbSearch.get_property_reviews", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51113056, "date": "2023-12-01"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 44783505, "date": "2023-12-01"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 38677942, "date": "2023-12-01"}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51113056}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 44783505}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38677942}}, {"id": 7, "prev": [4], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51113056}}, {"id": 8, "prev": [5], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 44783505}}, {"id": 9, "prev": [6], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 38677942}}, {"id": 10, "prev": [9], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 11, "prev": [10], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "18:00", "end_time": "19:00"}}, {"id": 12, "prev": [11], "name": "ReserveMeeting.reserve", "args": {"room_id": "101", "start_time": "18:00", "end_time": "19:00"}}, {"id": 13, "prev": [10], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "19:00", "end_time": "20:00"}}, {"id": 14, "prev": [13], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "19:00", "end_time": "20:00"}}, {"id": 15, "prev": [10], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "20:00", "end_time": "21:00"}}, {"id": 16, "prev": [15], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "20:00", "end_time": "21:00"}}, {"id": 17, "prev": [6], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 38677942, "checkIn": "2023-12-01", "checkOut": "2023-12-31"}}, {"id": 18, "prev": [17], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find Airbnb accommodations in Tokyo that are available for the month of December. Retrieve information, cost at checkout, and customer feedback for the three properties with the most number of bookings."}]}, "query_174_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "AirbnbSearch.get_property_details", "ReserveMeeting.get_empty_room_with_time", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "Weather.forecast_weather", "Weather.get_weather_today", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "37.7749,-122.4194,37.7833,-122.4081"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51746773}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51746773}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 727017675359552471}}, {"id": 5, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 727017675359552471}}, {"id": 6, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51541759}}, {"id": 7, "prev": [5], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51541759}}, {"id": 8, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51746773}}, {"id": 9, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 727017675359552471}}, {"id": 10, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51541759}}, {"id": 11, "prev": [10], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "09:00", "end_time": "11:00"}}, {"id": 12, "prev": [10], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "09:00", "end_time": "11:00"}}, {"id": 13, "prev": [12], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51746773, "date": "2023-10-18"}}, {"id": 14, "prev": [13], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 727017675359552471, "date": "2023-10-18"}}, {"id": 15, "prev": [14], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51541759, "date": "2023-10-18"}}, {"id": 16, "prev": [15], "name": "Weather.get_weather_today", "args": {"location": "San Francisco"}}, {"id": 17, "prev": [16], "name": "Weather.get_weather_today", "args": {"location": "San Francisco, CA"}}, {"id": 18, "prev": [17], "name": "Weather.forecast_weather", "args": {"location": "San Francisco, CA", "days": 3}}, {"id": 19, "prev": [18], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a real estate agent and I need information about properties within the area bounded by (37.7749, -122.4194) and (37.7833, -122.4081). Provide me with the details of the first, second, and third properties including their name, average rating, latitude, and longitude. Also, provide me with the reviews for these properties. Additionally, calculate the distance between each property and the nearest supermarket within a 1 km radius. Furthermore, find schools and parks within a 2 km radius of the area."}]}, "query_175_0": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.get_property_reviews", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 855819398716503903}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 855819398716503903, "checkIn": "2023-10-22", "checkOut": "2023-10-25"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you confirm if a property on Airbnb is open for reservations on October 20, 2023? If it is, I would appreciate details about it. I'm also interested in seeing up to three properties located in Paris. Once a property has been chosen, I'd like to read some reviews about it. Could you also inform me of the total cost for staying at the property from October 22, 2023, to October 25, 2023? Lastly, can you provide the current status of our meeting room reservations?"}]}, "query_176_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.save_file", "AirbnbSearch.get_property_details", "TimeTool.get_curr_time", "PPT.create_file", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "Conference", "abs_location": "outputs/conference.ppt"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51634632}}, {"id": 4, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 977756995339499057}}, {"id": 5, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 598488193327054398}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an event planner, I'm organizing a conference in New York. I need to get the details of the top three properties available there, including their ID, name, and address. I also need to know the current time. Then, I need a PowerPoint file themed 'Conference' which should be saved to 'outputs/conference.ppt'."}]}, "query_177_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.search_property_by_place", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 10803849}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 10803849}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am looking for properties in Los Angeles for my clients. Can you please search for properties in Los Angeles and provide me with the details of the first 3 properties including their IDs, names, and addresses? I would also like to retrieve the reviews of the first property from the search results. Lastly, can you tell me the weekday today?"}]}, "query_178_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "PolygonFinance.aggregate_stock_with_time", "AirbnbSearch.search_property_by_place", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Tesla"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "TSLZ", "multiplier": 1, "timespan": "week", "from": "2023-10-10", "to": "2023-10-17"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in investing in the real estate market and the stock market. Firstly, I would like to search for available Airbnb properties in New York City. Please provide me with a list of the first three properties, including the property ID, name, and address. Secondly, I'm looking for information about a company called 'Tesla'. Can you provide me with the stock ticker and the aggregate bars for the week of October 10 to October 17, 2023? I'm also interested in the most recent news articles about the company. Thank you!"}]}, "query_17_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 240}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting a research on machine learning. Please look for scholarly articles related to machine learning and provide information for the first three articles, including their publication date, title, authors, and abstract. I am also interested in the details of the top three rated movies, including their genres, release date, length, title, summary, vote average, and popularity."}]}, "query_17_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a movie enthusiast and I'm interested in finding information about movies. Please find a movie titled 'Inception' and provide me with its identifier. Then, get the top five popular movies and list them by popularity, including their identifier, title, release date, popularity, and rating. Finally, provide the user reviews for 'Inception', including the user's name, rating, and review."}]}, "query_17_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 2109}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 2109}}, {"id": 4, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 2501}}, {"id": 5, "prev": [4], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 2501}}, {"id": 6, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 2503}}, {"id": 7, "prev": [6], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 2503}}, {"id": 8, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 2493}}, {"id": 9, "prev": [8], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 2493}}, {"id": 10, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 203801}}, {"id": 11, "prev": [10], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 203801}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a film critic and I need to analyze movies. Please provide a list of movies similar to the movie titled 'Inception', based on their genres and keywords. Then, get the details of these similar movies, including their genres, release date, runtime, title, overview, vote average, and popularity. Additionally, get the user reviews for these movies, including the user's name, rating, and review."}]}, "query_181_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.check_availability", "Weather.forecast_weather", "AirbnbSearch.search_property_by_place", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 50971005, "date": "2023-10-18"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 50971005, "date": "2023-10-19"}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 50971005, "date": "2023-10-20"}}, {"id": 4, "prev": [3], "name": "Weather.forecast_weather", "args": {"location": "Paris", "days": 3}}, {"id": 5, "prev": [4], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Airbnb"}}, {"id": 6, "prev": [5], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "ABNB"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for properties in Paris on Airbnb. Check the availability of the first property for October 18, 19, and 20, 2023. Also, get the forecasted weather for Paris for these dates. Finally, search for the Airbnb's stock ticker and get detailed information about the company."}]}, "query_181_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "PolygonFinance.get_daliy_open_close", "Weather.get_weather_today", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Miami"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 733251743064542501}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 733251743064542501}}, {"id": 3, "prev": [2], "name": "Weather.get_weather_today", "args": {"location": "Miami"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "ABNB", "date": "2023-10-17"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for properties in Miami on Airbnb. Get the details and reviews of the first property. Also, get the current weather in Miami. Finally, get the open and close prices of Airbnb stock for October 17, 2023."}]}, "query_182_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_route", "Email.show", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "sustainable tourism"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hotel", "places": "JFK Airport"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "JFK Airport", "end": "TWA Hotel"}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": true}}, {"id": 4, "prev": [3], "name": "Email.send", "args": {"address": "family@home.com", "title": "Arrived Safely", "body": "Dear family,\n\nI have arrived safely at the TWA Hotel near JFK Airport. The address is JFK Access Road, One Idlewild Drive JFK Internatio, New York, NY, 11430.\n\nBest regards,\n[Your Name]"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look up articles related to 'sustainable tourism'. Locate a hotel in the vicinity of JFK Airport. Determine the route from JFK Airport to the identified hotel. Display the unread emails in my inbox. Send an email to family@home.com with the subject 'Arrived Safely' and include the hotel's address in the email body."}]}, "query_182_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_coordinates", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "customer behavior"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "123 Main Street, New York"}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": true}}, {"id": 3, "prev": [2], "name": "Email.send", "args": {"address": "potentialclient@business.com", "title": "Product Demo", "body": "Dear potential client,\n\nI hope this email finds you well. I wanted to reach out to you to schedule a product demo for our latest offering. Our office is located at 123 Main Street, New York.\n\nPlease let me know a convenient time for you to have the demo, and I will be happy to arrange it.\n\nLooking forward to hearing from you.\n\nBest regards,\n[Your Name]"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for articles related to 'customer behavior'. Find the coordinates of the office located at 123 Main Street, New York. Show the unread emails in my inbox. Send an email to potentialclient@business.com with the subject 'Product Demo' and include the office location in the email body."}]}, "query_183_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/quantum_computing_articles.txt", "text": "Published: 2022-08-01\nTitle: The Rise of Quantum Internet Computing\nAuthors: Seng W. Loke\nSummary: This article highlights quantum Internet computing as referring to\ndistributed quantum computing over the quantum Internet, analogous to\n(classical) Internet computing involving (classical) distributed computing over\nthe (classical) Internet. Relevant to quantum Internet computing would be areas\nof study such as quantum protocols for distributed nodes using quantum\ninformation for computations, quantum cloud computing, delegated verifiable\nblind or private computing, non-local gates, and distributed quantum\napplications, over Internet-scale distances.\n\nPublished: 2000-03-31\nTitle: Unconventional Quantum Computing Devices\nAuthors: Seth Lloyd\nSummary: This paper investigates a variety of unconventional quantum computation\ndevices, including fermionic quantum computers and computers that exploit\nnonlinear quantum mechanics. It is shown that unconventional quantum computing\ndevices can in principle compute some quantities more rapidly than\n`conventional' quantum computers.\n\nPublished: 2013-11-20\nTitle: Geometrical perspective on quantum states and quantum computation\nAuthors: Zeqian Chen\nSummary: We interpret quantum computing as a geometric evolution process by\nreformulating finite quantum systems via Connes' noncommutative geometry. In\nthis formulation, quantum states are represented as noncommutative connections,\nwhile gauge transformations on the connections play a role of unitary quantum\noperations. Thereby, a geometrical model for quantum computation is presented,\nwhich is equivalent to the quantum circuit model. This result shows a geometric\nway of realizing quantum computing and as such, provides an alternative\nproposal of building a quantum computer."}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to search for articles related to quantum computing on Arxiv and save this information. Please save the article information to the file named 'quantum_computing_articles.txt' located at 'outputs/quantum_computing_articles.txt'."}]}, "query_185_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing", "num_articles": 3}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "San Francisco"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "New York City"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "San Francisco"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As part of my research on quantum computing, I need to gather information from Arxiv on this topic. I require the metadata of the top three articles, which includes their publication dates, titles, authors, and abstracts. Could you also help me determine the distance between a research institution in New York City and another in San Francisco? It would also be helpful to have the coordinates of these two places."}]}, "query_185_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 272}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "action"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 137599}}, {"id": 4, "prev": [0, 1, 3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a big fan of movies, and I like to keep up with the latest releases. Could you give me a list of films that are currently showing in theaters? I'd like to know their names, release dates, how popular they are, and their ratings. I'm also interested in the movie 'Inception'. Could you give me information about its genres, when it was released, how long it runs, a summary of the plot, its average vote, and how popular it is? In addition, could you search for any movies that have 'action' in their titles and give me their IDs and names?"}]}, "query_185_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "BINGMap.search_nearby", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "Eiffel Tower", "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Eiffel Tower", "end": "Louvre Museum"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a travel blogger, I'm planning to write about the attractions around the Eiffel Tower in Paris. Could you find places within 1 km of the tower and give me a list of up to five places, including their names and addresses? I would also like to know the route from the Eiffel Tower to the Louvre Museum, along with the steps required to get there. Additionally, I plan to recommend some movies in my blog post. Could you give me a list of popular movies, including their names, release dates, how popular they are, and their ratings?"}]}, "query_187_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "recent scholarly articles about quantum computing"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York", "end": "San Francisco"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "academic articles related to quantum computing"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_citation_format", "args": {"q": "aRCT0jKYjgIJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find recent scholarly articles about 'quantum computing'. Obtain the publication date, title, authors, and summary of these articles. Determine the distance from 'New York' to 'San Francisco'. Look for academic articles related to 'quantum computing' and get information about the title, number of citations, snippets, and publication details for these papers. Additionally, generate the MLA citation for the selected paper."}]}, "query_187_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_coordinates", "GoogleScholar.get_author_id", "BINGMap.search_nearby", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Times Square", "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Central Park"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find restaurants within a 1-kilometer radius from 'Times Square' and list up to 5 of them along with their names and addresses. Determine the latitude and longitude of 'Central Park'. Look up information about an author with a known name. Get details including the name, affiliation, up to 3 articles, and website URL."}]}, "query_188_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Stanford University", "end": "Google Headquarters"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Stanford University", "end": "Google Headquarters"}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "Stanford University", "radius": 1000}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find three recent research papers related to 'quantum computing' on arxiv.org. Then, find the route from 'Stanford University' to 'Google Headquarters' and the distance between them. Also, search for nearby restaurants within a 1 km radius of 'Stanford University'."}]}, "query_188_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "BINGMap.get_distance", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "top tourist attractions in Paris"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Eiffel Tower", "end": "Louvre Museum"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Eiffel Tower", "end": "Louvre Museum"}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "cafe", "places": "Eiffel Tower", "radius": 500}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find three top-ranked tourist attractions in 'Paris' using Google search. Then, find the route from 'Eiffel Tower' to 'Louvre Museum' and the distance between them. Also, search for nearby cafes within a 500 meter radius of 'Eiffel Tower'."}]}, "query_18_0": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.search_nearby", "GaodeMap.get_distance", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_distance", "args": {"origins": "31.2345,121.4321", "destination": "31.1956,121.4413"}}, {"id": 2, "prev": [1], "name": "GaodeMap.search_nearby", "args": {"location": "31.206075,121.425413", "keywords": "coffee shop"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the most recent articles about quantum computing from the online scientific article database. Determine the distance from my present location at latitude 31.2345 and longitude 121.4321 to Shanghai Jiao Tong University located at latitude 31.1956 and longitude 121.4413. Also, find coffee shops in the vicinity of the university."}]}, "query_190_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_distance"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing research"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "University of California, Berkeley", "end": "Massachusetts Institute of Technology"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent articles on 'quantum computing research' from academic resources and retrieve the information of the first three articles. Determine the physical distance between the University of California, Berkeley and the Massachusetts Institute of Technology. Additionally, notify me of the current date and time."}]}, "query_190_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "BINGMap.get_route", "BINGMap.search_nearby", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "European history"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "well-liked restaurants", "places": "Eiffel Tower", "latitude": 48.8584, "longitude": 2.2945, "radius": 1000}}, {"id": 2, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "Times Square", "end": "Statue of Liberty"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent academic articles on 'European history' and provide the details of the first three articles. Look for well-liked restaurants around the Eiffel Tower within a 1 km radius. Determine the travel path from Times Square to the Statue of Liberty. Additionally, let me know what day of the week it is today."}]}, "query_191_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.create_file", "PPT.save_file", "BINGMap.get_distance", "ArxivSearch.get_arxiv_article_information", "PPT.add_text_image_page", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "university", "places": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "latitude": 38.8977, "longitude": -77.0365, "radius": 5000}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "1100 17th St NW Ste 650, Washington, DC, 20036"}}, {"id": 3, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "655 15th St NW, Washington, DC, 20005"}}, {"id": 4, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "2121 I St NW, Washington, DC, 20052"}}, {"id": 5, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "1747 Pennsylvania Ave NW Ste 400, Washington, D.C., 20006"}}, {"id": 6, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "1325 G St NW, Washington, Dc, 20005-3127"}}, {"id": 7, "prev": [6], "name": "PPT.create_file", "args": {"theme": "Quantum Computing", "abs_location": "outputs/Quantum_Computing_Research.ppt"}}, {"id": 8, "prev": [7], "name": "PPT.get_image", "args": {"keywords": "quantum computing"}}, {"id": 9, "prev": [7, 8], "name": "PPT.add_text_image_page", "args": {"title": "Quantum Computing Research", "bullet_items": "Research on quantum computing\n- Meta information of top 3 articles\n- Universities and research institutions nearby\n- Distance from 1600 Pennsylvania Avenue NW\n- Image related to quantum computing", "image": "outputs/1697703644.9069078.jpg"}}, {"id": 10, "prev": [7, 9], "name": "PPT.save_file", "args": {}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on quantum computing. Can you help me find articles related to this topic on a scientific article database, and give me the meta information of the top three articles, which includes their published date, title, authors, and summary? Could you also help me find universities or research Institutions within a 5 km radius of 1600 Pennsylvania Avenue NW, Washington, DC 20500, and provide a list of up to 5 places with their names and addresses? Can you calculate the distance from each place to 1600 Pennsylvania Avenue NW, Washington, DC 20500? Lastly, prepare a PowerPoint slide titled 'Quantum Computing Research', add an image related to quantum computing from the internet, and save the file to 'outputs/Quantum_Computing_Research.ppt'."}]}, "query_191_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "BINGMap.get_coordinates", "BINGMap.get_route"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Washington Convention Center", "end": "Marriott Marquis Washington, DC"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Marriott Marquis Washington, DC"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Conference Schedule", "bullet_items": "1. Opening Remarks\n2. Keynote Speech\n3. Panel Discussion\n4. Break\n5. Paper Presentations\n6. Lunch\n7. Workshop Sessions\n8. Closing Remarks"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am organizing a conference on artificial intelligence and I need to prepare a presentation. Could you help me find articles related to artificial intelligence on a scientific article database, and give me the meta information of the top three articles, which includes their published date, title, authors, and summary? Then, can you help me find the route from the 'Washington Convention Center' to 'Marriott Marquis Washington, DC' and provide the route details? Additionally, can you provide the coordinates of the Marriott Marquis Washington, DC? Next, prepare a PowerPoint slide titled 'Conference Schedule' and add the schedule details as bullet points. Finally, save the file to 'outputs/AI_Conference_Schedule.ppt'."}]}, "query_192_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "sustainable tourism"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "coffee shops", "places": "Amsterdam", "radius": 500}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Amsterdam"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for scientific studies about 'sustainable tourism'. How many coffee shops are within a 500-meter radius in Amsterdam? What is the current weather like in Amsterdam?"}]}, "query_192_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "BINGMap.get_route", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "number theory"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Oxford", "end": "Cambridge"}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "London", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the research studies related to 'number theory'. What is the best way to get from Oxford to Cambridge? What is the weather forecast for London for the next 3 days?"}]}, "query_193_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_news", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "University of California, Berkeley"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find recent academic papers about 'quantum computing' on Arxiv and retrieve the metadata for the first three. Next, determine the geographical coordinates for the University of California, Berkeley. Lastly, fetch the latest news related to 'IBM' stock from PolygonFinance."}]}, "query_193_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_daliy_open_close", "BINGMap.search_nearby", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "sustainable tourism"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hotels", "places": "Times Square"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-18"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find academic papers about 'sustainable tourism' on Arxiv and retrieve the metadata for the first three. Then, locate hotels in the vicinity of 'Times Square'. Finally, obtain the opening and closing prices for 'AAPL' stock on October 18, 2023."}]}, "query_194_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "ArxivSearch.get_arxiv_article_information", "FileOperation.read_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": false}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": false}}, {"id": 4, "prev": [3], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/movies.txt"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on quantum computing. Can you find articles related to quantum computing and provide me with the detailed information of the first three papers, including their published dates, titles, authors, and summaries. Also, could you show me my emails and read the content of the most recent one? Lastly, could you read the text from a file located at 'data_v2/template_data/movies.txt'?"}]}, "query_194_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "colleague@example.com", "title": "Machine Learning Article", "attachment": "outputs/article.docx"}}, {"id": 2, "prev": [1], "name": "FileOperation.write_file", "args": {"file_path": "outputs/status.txt", "text": "Email sent successfully."}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing an article on machine learning. Could you help me find articles related to machine learning and provide me with the detailed information of the first three papers, including their published dates, titles, authors, and summaries. After reviewing the articles, I would like to email my colleague. The email should be addressed to 'colleague@example.com' with the subject 'Machine Learning Article' and it should include the file 'outputs/article.docx'. Lastly, could you write the status of the email sending operation to a file located at 'outputs/status.txt'?"}]}, "query_195_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "FilmDouban.coming_out_filter", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent scholarly articles on the topic of 'artificial intelligence'. Then, look at my unread emails and provide information on the five soon-to-be-released movies in China."}]}, "query_195_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "长安三万里"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Provide detailed information about the movie '长安三万里'. Afterwards, look at my unread emails and provide information on the top three movies currently being screened in China."}]}, "query_196_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "film theory"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for the latest articles on film theory and get the meta data of the three most recent papers. List the top-rated movies, including their IDs, titles, release dates, popularity, and ratings. Lastly, get user reviews for one of the top-rated movies."}]}, "query_198_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Conduct a research on artificial intelligence by finding articles from Arxiv.org. Please retrieve meta information for the first three articles including their publication date, title, authors, and summary. Also, I need to view my unread emails in my inbox. Lastly, locate scholarly articles on artificial intelligence from Google Scholar."}]}, "query_199_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Latest Quantum Computing Articles", "body": "Published: 2022-08-01\nTitle: The Rise of Quantum Internet Computing\nAuthors: Seng W. Loke\nSummary: This article highlights quantum Internet computing as referring to\ndistributed quantum computing over the quantum Internet, analogous to\n(classical) Internet computing involving (classical) distributed computing over\nthe (classical) Internet. Relevant to quantum Internet computing would be areas\nof study such as quantum protocols for distributed nodes using quantum\ninformation for computations, quantum cloud computing, delegated verifiable\nblind or private computing, non-local gates, and distributed quantum\napplications, over Internet-scale distances.\n\nPublished: 2000-03-31\nTitle: Unconventional Quantum Computing Devices\nAuthors: Seth Lloyd\nSummary: This paper investigates a variety of unconventional quantum computation\ndevices, including fermionic quantum computers and computers that exploit\nnonlinear quantum mechanics. It is shown that unconventional quantum computing\ndevices can in principle compute some quantities more rapidly than\n`conventional' quantum computers.\n\nPublished: 2013-11-20\nTitle: Geometrical perspective on quantum states and quantum computation\nAuthors: Zeqian Chen\nSummary: We interpret quantum computing as a geometric evolution process by\nreformulating finite quantum systems via Connes' noncommutative geometry. In\nthis formulation, quantum states are represented as noncommutative connections,\nwhile gauge transformations on the connections play a role of unitary quantum\noperations. Thereby, a geometrical model for quantum computation is presented,\nwhich is equivalent to the quantum circuit model. This result shows a geometric\nway of realizing quantum computing and as such, provides an alternative\nproposal of building a quantum computer."}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": false}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the latest 'quantum computing' articles on arxiv.org and email the title and summary of the first three articles to my colleague John Doe at john.doe@example.com. After that, let me see the emails in my inbox."}]}, "query_199_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning algorithms"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "smith@example.com", "title": "Academic Papers on Machine Learning Algorithms", "body": "Published: 2023-04-13\nTitle: Parallelization of Machine Learning Algorithms Respectively on Single Machine and Spark\nAuthors: Jiajun Shen\nSummary: With the rapid development of big data technologies, how to dig out useful information from massive data becomes an essential problem. However, using machine learning algorithms to analyze large data may be time-consuming and inefficient on the traditional single machine. To solve these problems, this paper has made some research on the parallelization of several classic machine learning algorithms respectively on the single machine and the big data platform Spark. We compare the runtime and efficiency of traditional machine learning algorithms with parallelized machine learning algorithms respectively on the single machine and Spark platform. The research results have shown significant improvement in runtime and efficiency of parallelized machine learning algorithms.\n\nPublished: 2016-11-12\nTitle: An Introduction to MM Algorithms for Machine Learning and Statistical\nAuthors: Hien D. Nguyen\nSummary: MM (majorization--minimization) algorithms are an increasingly popular tool for solving optimization problems in machine learning and statistical estimation. This article introduces the MM algorithm framework in general and via three popular example applications: Gaussian mixture regressions, multinomial logistic regressions, and support vector machines. Specific algorithms for the three examples are derived and numerical demonstrations are presented. Theoretical and practical aspects of MM algorithm design are discussed.\n\nPublished: 2019-09-19\nTitle: Machine Learning for Clinical Predictive Analytics\nAuthors: Wei-Hung Weng\nSummary: In this chapter, we provide a brief overview of applying machine learning techniques for clinical prediction tasks. We begin with a quick introduction to the concepts of machine learning and outline some of the most common machine learning algorithms. Next, we demonstrate how to apply the algorithms with appropriate toolkits to conduct machine learning experiments for clinical prediction tasks. The objectives of this chapter are to (1) understand the basics of machine learning techniques and the reasons behind why they are useful for solving clinical prediction problems, (2) understand the intuition behind some machine learning models, including regression, decision trees, and support vector machines, and (3) understand how to apply these models to clinical prediction problems using publicly available datasets via case studies."}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "beginner-friendly tutorials on machine learning algorithms"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for academic papers about 'machine learning algorithms' on arxiv.org and send an email with the title and summary of the first three papers to my professor, Professor Smith at smith@example.com. Then, look for beginner-friendly tutorials on 'machine learning algorithms' on Google."}]}, "query_199_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence in healthcare"}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "johnson@example.com", "title": "Articles on Artificial Intelligence in Healthcare", "body": "Published: 2023-04-05\nTitle: A Survey on Federated Learning for the Healthcare Metaverse: Concepts, Applications, Challenges, and Future Directions\nAuthors: Ali Kashif Bashir, Nancy Victor, Sweta Bhattacharya, Thien Huynh-The, Rajeswari Chengoden, Gokul Yenduri, Praveen Kumar Reddy Maddikunta, Quoc-Viet Pham, Thippa Reddy Gadekallu, Madhusanka Liyanage\nSummary: Recent technological advancements have considerately improved healthcare systems to provide various intelligent healthcare services and improve the quality of life. Federated learning (FL), a new branch of artificial intelligence (AI), opens opportunities to deal with privacy issues in healthcare systems and exploit data and computing resources available at distributed devices. Additionally, the Metaverse, through integrating emerging technologies, such as AI, cloud edge computing, Internet of Things (IoT), blockchain, and semantic communications, has transformed many vertical domains in general and the healthcare sector in particular. Obviously, FL shows many benefits and provides new opportunities for conventional and Metaverse healthcare, motivating us to provide a survey on the usage of FL for Metaverse healthcare systems. First, we present preliminaries to IoT-based healthcare systems, FL in conventional healthcare, and Metaverse healthcare. The benefits of FL in Metaverse healthcare are then discussed, from improved privacy and scalability, better interoperability, better data management, and extra security to automation and low-latency healthcare services. Subsequently, we discuss several applications pertaining to FL-enabled Metaverse healthcare, including medical diagnosis, patient monitoring, medical education, infectious disease, and drug discovery. Finally, we highlight significant challenges and potential solutions toward the realization of FL in Metaverse health\n\nPublished: 2022-08-16\nTitle: Fair Machine Learning in Healthcare: A Review\nAuthors: Qizhang Feng, Mengnan Du, Na Zou, Xia Hu\nSummary: Benefiting from the digitization of healthcare data and the development of computing power, machine learning methods are increasingly used in the healthcare domain. Fairness problems have been identified in machine learning for healthcare, resulting in an unfair allocation of limited healthcare resources or excessive health risks for certain groups. Therefore, addressing the fairness problems has recently attracted increasing attention from the healthcare community. However, the intersection of machine learning for healthcare and fairness in machine learning remains understudied. In this review, we build the bridge by exposing fairness problems, summarizing possible biases, sorting out mitigation methods and pointing out challenges along with opportunities for the future.\n\nPublished: 2022-09-06\nTitle: Autonomous Mobile Clinics: Empowering Affordable Anywhere Anytime Healthcare Access\nAuthors: Shaoshan Liu, Yuzhang Huang, Leiyu Shi\nSummary: We are facing a global healthcare crisis today as the healthcare cost is ever climbing, but with the aging population, government fiscal revenue is ever dropping. To create a more efficient and effective healthcare system, three technical challenges immediately present themselves: healthcare access, healthcare equity, and healthcare efficiency. An autonomous mobile clinic solves the healthcare access problem by bringing healthcare services to the patient by the order of the patient's fingertips. Nevertheless, to enable a universal autonomous mobile clinic network, a three-stage technical roadmap needs to be achieved: In stage one, we focus on solving the inequity challenge in the existing healthcare system by combining autonomous mobility and telemedicine. In stage two, we develop an AI doctor for primary care, which we foster from infancy to adulthood with clean healthcare data. With the AI doctor, we can solve the inefficiency problem. In stage three, after we have proven that the autonomous mobile clinic network can truly solve the target clinical use cases, we shall open up the platform for all medical verticals, thus enabling universal healthcare through this whole new system."}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": false}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find articles about 'artificial intelligence in healthcare' on arxiv.org and email the title and summary of the first three articles to my potential employer, Mrs. Johnson at johnson@example.com. After sending the email, show me the messages in my inbox."}]}, "query_19_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Seng W. Loke"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "ZbdN-0AAAAAJ"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_citation_format", "args": {"q": "aRCT0jKYjgIJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find articles related to quantum computing. Collect the meta information such as title, authors, and abstract of the top 3 articles. About the first articles, look for an author on scholarly publications platform and gather his details like name, affiliation, and his 3 latest articles. Lastly, provide the citation format, specifically MLA, for the primary organic result on the scholarly publications platform."}]}, "query_1_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Tokyo"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 48596594}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 50426764}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 37677930}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 48596594}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 50426764}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 37677930}}, {"id": 7, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Minato City, Tokyo, Japan", "radius": 500}}, {"id": 8, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Chiyoda City, Tokyo, Japan", "radius": 500}}, {"id": 9, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Taito City, Tokyo, Japan", "radius": 500}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a food lover, I would like to organize a trip to Tokyo. Could you find properties that are available in Tokyo and give me details on the first three properties? This should include their name, type, capacity, rating, and their geographical coordinates. Could you also provide the reviews for these properties? Lastly, could you find three popular restaurants near each property?"}]}, "query_1_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 49634091}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51746773}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 997382}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 49634091}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 51746773}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 997382}}, {"id": 7, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 49634091}}, {"id": 8, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51746773}}, {"id": 9, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 997382}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm in the process of planning a conference in San Francisco. Could you find properties that are available in San Francisco and provide me with details on the first three properties? This should include their name, address, capacity, and rating. Could you also check if these properties are available for the next week? Lastly, could you provide me with the reviews for these properties?"}]}, "query_1_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 909363587647904523}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 33884250}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 20654271}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 909363587647904523}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 33884250}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 20654271}}, {"id": 7, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "gym", "places": "Torrance, CA, United States", "radius": 500}}, {"id": 8, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "gym", "places": "Huntington Beach, CA, United States", "radius": 500}}, {"id": 9, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "gym", "places": "Culver City, CA, United States", "radius": 500}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a fitness enthusiast, I'm planning a trip to Los Angeles. Could you find properties that are available in Los Angeles and provide me with details on the first three properties? This should include their name, type, capacity, rating, and geographical coordinates. Could you also provide me with the reviews for these properties? Lastly, could you find three nearby gyms or fitness centers near each property?"}]}, "query_200_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to find the latest papers about quantum computing on arXiv from the last month. Afterwards, could you show me the latest messages in my inbox?"}]}, "query_200_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to arrange a meeting for the 18th of October. Could you check if there are any meeting rooms free between 10:00 AM and 12:00 PM? If there's an available room, please book it."}]}, "query_200_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "ReserveMeeting.get_room_status"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 2, "prev": [0, 1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'd like to read my most recent emails and also, can you check the current booking status of Room 101?"}]}, "query_201_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [0, 1], "name": "Email.send", "args": {"address": "supervisor@example.com", "title": "Papers on Machine Learning", "body": "Dear Supervisor,\\n\\nI hope this email finds you well. I wanted to share with you some newly published papers on the topic of machine learning that I found. Please find them attached to this email.\\n\\nBest regards,\\nYour Name", "attachment": "path/to/found_papers.pdf"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the newly published papers within the past week on the topic of \"machine learning\" from the online academic paper repository. Afterwards, send an email to my supervisor with the subject \"Papers on Machine Learning\" at supervisor@example.com and attach the found papers. Make sure to mention the exact time at the moment of sending the email."}]}, "query_202_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "standard", "abs_location": "outputs/quantum_research.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Quantum Computing Research", "bullet_items": "Bullet item 1.[SPAN]Bullet item 2.[SPAN]Bullet item 3."}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the newest 'quantum computing' research papers on arXiv and obtain the details of the first three papers. Afterwards, look at the unread messages in my email at 'john@example.com'. Proceed to generate a PowerPoint presentation using the standard design and include a text slide named 'Quantum Computing Research'. Finally, store the PowerPoint presentation at 'outputs/quantum_research.ppt'."}]}, "query_203_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "sustainable tourism"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for articles on Arxiv about 'sustainable tourism'. Show me the latest 3 articles. Also, let me know the weather forecast for today in New York City."}]}, "query_204_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "ArxivSearch.get_arxiv_article_information", "Email.show", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "deep learning"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent research papers on the topic of 'deep learning'. Display the emails in my inbox that I have not yet opened. Retrieve the latest information and news articles related to the stock 'AAPL'."}]}, "query_205_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmDouban.print_detail", "FileOperation.read_file", "FilmDouban.coming_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "FileOperation.read_file", "args": {"file_path": "/home/user/Documents/file.txt"}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find articles pertaining to 'artificial intelligence' and provide the meta information of the first three results. Then, read the content of a real file such as 'data_v2/template_data/hotel.txt'. Finally, show me the details of the upcoming action movies in China, especially the movie '驯龙高手'."}]}, "query_206_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.read_file", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FileOperation.read_file", "args": {"file_path": "data/research_question.txt"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Let's find some recent articles about 'quantum computing'. I need the meta information for the first three articles that come up. After that, could you read the content of the text file in the 'data' directory with the name 'research_question.txt'? Finally, I am interested in the details of a movie, let's say, the one with the highest rating."}]}, "query_206_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.search_movie", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "dreams"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in the movie 'Inception'. Can you show me its details? Based on 'Inception's' genres and keywords, could we find some similar movies? Finally, let's look at the first three articles about 'dreams' and their meta information."}]}, "query_206_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_now_playing"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "data analysis"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you fetch the meta information from the first three articles about 'data analysis'? After that, I would like to know what movies are currently showing in theaters. Lastly, could you show me some of the highest-rated movies?"}]}, "query_208_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "quantum computing"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "aRCT0jKYjgIJ"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "tIXO4GnPdDEJ"}}, {"id": 4, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "oSwmxabWRNwJ"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Seng W. Loke"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.get_author_information", "args": {"author_id": "ZbdN-0AAAAAJ"}}, {"id": 7, "prev": [6], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Seth Lloyd"}}, {"id": 8, "prev": [7], "name": "GoogleScholar.get_author_information", "args": {"author_id": "lyMGnwIAAAAJ"}}, {"id": 9, "prev": [8], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Zeqian Chen"}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am engaged in a research project related to quantum computing. I would like to retrieve the meta data of the first three papers on arxiv.org in this field, such as published date, title, authors, and abstract. Similarly, I want to look for scholarly articles on Google Scholar with the same topic and gather their titles, number of citations, organic result IDs, snippets, and publication details. Additionally, I am interested in acquiring details about the authors of these papers, including their names, affiliations, up to three articles they have authored, and their website URLs."}]}, "query_208_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.get_author_id", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am compiling a research paper and need to reference some scholarly articles. I want to search for articles related to 'machine learning' on Google Scholar and gather the titles, number of citations, organic result IDs, snippets, and publication details of the first three articles. Additionally, I'd like to obtain the MLA citation format for the first article using its organic result ID. Lastly, I need to find the author ID for the first author I come across named 'John Doe' for my citation purposes."}]}, "query_20_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "fundamentals and applications of quantum computing"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a task about quantum computing. Kindly locate articles related to quantum computing on an academic database and provide meta information of the initial three articles, including their publication date, title, authors, and abstract. Simultaneously, conduct a web search to accumulate more data on the fundamentals and applications of quantum computing and supply up to three pertinent search results."}]}, "query_20_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "big data analytics"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "latest instruments and techniques in big data analytics"}}, {"id": 2, "prev": [0, 1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am embarking on a project involving big data analysis. Kindly locate articles related to big data analytics on an academic database and provide meta information of the initial three articles, including their publication date, title, authors, and abstract. Concurrently, conduct a web search to gather data on the latest instruments and techniques used in big data analytics and supply up to three pertinent search results."}]}, "query_210_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "13:00", "end_time": "17:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "13:00", "end_time": "17:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a group project and I need a meeting room. Could you please check if any rooms are available this afternoon? If there are, could you please book the first available one? Lastly, could you confirm the status of the reservation for me?"}]}, "query_211_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "sample.txt", "text": "This is a sample text."}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing an article on artificial intelligence. Please find articles related to artificial intelligence and provide me with the meta information of the first three papers, including their published date, title, authors, and summary. Also, create a new text file with a content of \"This is a sample text.\". Lastly, could you tell me the current time?"}]}, "query_212_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/quantum_computing_articles.txt", "text": "Published: 2022-08-01\nTitle: The Rise of Quantum Internet Computing\nAuthors: Seng W. Loke\nSummary: This article highlights quantum Internet computing as referring to\ndistributed quantum computing over the quantum Internet, analogous to\n(classical) Internet computing involving (classical) distributed computing over\nthe (classical) Internet. Relevant to quantum Internet computing would be areas\nof study such as quantum protocols for distributed nodes using quantum\ninformation for computations, quantum cloud computing, delegated verifiable\nblind or private computing, non-local gates, and distributed quantum\napplications, over Internet-scale distances.\n\nPublished: 2000-03-31\nTitle: Unconventional Quantum Computing Devices\nAuthors: Seth Lloyd\nSummary: This paper investigates a variety of unconventional quantum computation\ndevices, including fermionic quantum computers and computers that exploit\nnonlinear quantum mechanics. It is shown that unconventional quantum computing\ndevices can in principle compute some quantities more rapidly than\n`conventional' quantum computers.\n\nPublished: 2013-11-20\nTitle: Geometrical perspective on quantum states and quantum computation\nAuthors: Zeqian Chen\nSummary: We interpret quantum computing as a geometric evolution process by\nreformulating finite quantum systems via Connes' noncommutative geometry. In\nthis formulation, quantum states are represented as noncommutative connections,\nwhile gauge transformations on the connections play a role of unitary quantum\noperations. Thereby, a geometrical model for quantum computation is presented,\nwhich is equivalent to the quantum circuit model. This result shows a geometric\nway of realizing quantum computing and as such, provides an alternative\nproposal of building a quantum computer."}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on quantum computing and I need to find relevant articles. Please look for articles related to 'quantum computing' and provide me with the meta information of the first three articles, including the published date, title, authors, and summary. Additionally, I would like to store this meta information. Please save the meta information to a file named 'quantum_computing_articles.txt' in the 'outputs' folder."}]}, "query_212_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Modern", "abs_location": "outputs/ML_Research_Papers.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Machine Learning Papers", "bullet_items": "Published: 2019-09-08\nTitle: Lecture Notes: Optimization for Machine Learning\nAuthors: Elad Hazan\nSummary: Lecture notes on optimization for machine learning, derived from a course at Princeton University and tutorials given in MLSS, Buenos Aires, as well as Simons Foundation, Berkeley.\n\nPublished: 2018-11-11\nTitle: An Optimal Control View of Adversarial Machine Learning\nAuthors: Xiaojin Zhu\nSummary: I describe an optimal control view of adversarial machine learning, where the dynamical system is the machine learner, the input are adversarial actions, and the control costs are defined by the adversary's goals to do harm and be hard to detect. This view encompasses many types of adversarial machine learning, including test-item attacks, training-data poisoning, and adversarial reward shaping. The view encourages adversarial machine learning researcher to utilize advances in control theory and reinforcement learning.\n\nPublished: 2017-07-16\nTitle: Minimax Deviation Strategies for Machine Learning and Recognition with Short Learning Samples\nAuthors: Michail Schlesinger, Evgeniy Vodolazskiy\nSummary: The article is devoted to the problem of small learning samples in machine learning. The flaws of maximum likelihood learning and minimax learning are looked into and the concept of minimax deviation learning is introduced that is free of those flaws."}}, {"id": 3, "prev": [2], "name": "PPT.save_file", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a presentation on machine learning and I need to include some recent research papers as references. Please find articles related to 'machine learning' and provide me with the meta information of the first three articles, including the published date, title, authors, and summary. Then, I would like to create a PowerPoint presentation with the theme 'Modern' and save it as 'ML_Research_Papers.pptx' in the 'outputs' folder. Finally, add a text page to the presentation titled 'Machine Learning Papers' and list the meta information of the three articles as bullet points."}]}, "query_215_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "quantum computing"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "quantum"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 858711}}, {"id": 4, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 858711}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of quantum computing. Please find articles on Arxiv.org related to quantum computing and provide me with the meta information of the top 3 articles, including their published date, title, authors, and summary. Additionally, I would like to get the details and user reviews of the first movie about quantum computing that comes up in the search."}]}, "query_215_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 238}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in watching movies. Please provide me with a list of movies that are currently in theaters. Also, give me a list of top-rated movies. Finally, I would like to get a list of similar movies based on genres and keywords for the first movie in the top-rated list."}]}, "query_216_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.search_nearby", "FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GaodeMap.search_nearby", "args": {"location": "31.23967,121.49977", "keywords": "restaurant"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a movie enthusiast and I'd like to know about the three most anticipated upcoming movies in China, including details like release date, title, genre, region, and audience interest. Also, could you tell me about the three most popular movies currently being shown in China? Finally, I need to find restaurants around The Bund, Shanghai."}]}, "query_217_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find out which movies are currently showing in China and retrieve the details of the first three movies. Afterward, choose the first movie and obtain its description."}]}, "query_217_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Elad Hazan"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "LnhCGNMAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for the latest articles on Arxiv that discuss 'machine learning' and obtain the meta information for the first three articles. Also, look for scholarly articles on Google Scholar that discuss 'machine learning' and retrieve the title, citation count, organic result IDs, snippets, and publication details for the first three articles. In addition, retrieve information about the author of the first article on Google Scholar."}]}, "query_218_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmDouban.now_playing_out_filter", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "latest news about quantum computing"}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for the latest three articles about quantum computing on arXiv. Then find out which movies are currently being shown in China and list the top three. Finally, find the newest news related to quantum computing on Google."}]}, "query_218_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "number theory"}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "definition and examples of prime numbers"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the three most recent articles related to number theory on arXiv. Also, find information about the movies that will be released soon in China, specifically those in the 'Fantasy' category. Finally, find the definition and examples of 'prime numbers' on Google."}]}, "query_218_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "most recent academic papers on 'graph neural networks'"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for the latest three articles on ArXiv that are related to machine learning. Get the detailed information of the first movie listed on Douban. Lastly, use Google to search for the most recent academic papers on 'graph neural networks'."}]}, "query_219_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I love watching movies and staying updated with the latest releases. Could you provide me with the release date, title, category, region, and the number of people who want to watch the first 3 movies currently playing in China? Also, could you provide the same information for the first 3 upcoming movies in China? Furthermore, could you find articles related to artificial intelligence and provide me with the meta information of the first 3 articles?"}]}, "query_219_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to organize a meeting today. Could you check if there are any available meeting rooms between 14:00 and 16:00? If there are, could you reserve the first available meeting room for this time slot? Lastly, could you provide me with the current booking status of all the meeting rooms?"}]}, "query_21_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Quantum Computing"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a research discussion on the topic of 'Quantum Computing' from 2:00 PM to 4:00 PM tomorrow. Could you help me find a meeting room available at that time and reserve it? Also, could you find me the latest 'Quantum Computing' related articles and provide me with the meta information of the top 3 articles?"}]}, "query_21_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "09:00", "end_time": "17:00"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Artificial Intelligence"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have to set up a workshop on the topic of 'Artificial Intelligence' tomorrow from 9:00 AM to 5:00 PM. Could you find an available meeting room for this duration and book it? Also, could you find the latest 'Artificial Intelligence' related articles and provide me with the meta information of the top 3 articles?"}]}, "query_220_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "ArxivSearch.get_arxiv_article_information", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence", "num_articles": 3}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm conducting research on the topic of artificial intelligence. Could you please find the first three articles related to artificial intelligence which were published the most recently on Arxiv and provide their meta information including their published date, title, authors, and summary? Also, I am interested in the first three films that are currently playing in theaters in China. Can you provide their details including the date, title, category, region? Finally, could you tell me what day of the week it is today?"}]}, "query_220_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "TimeTool.get_curr_time", "FilmDouban.coming_out_filter", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 3, "prev": [2], "name": "FilmDouban.print_detail", "args": {"film_name": "涉过愤怒的海"}}, {"id": 4, "prev": [3], "name": "FilmDouban.print_detail", "args": {"film_name": "惊奇队长2"}}, {"id": 5, "prev": [4], "name": "TimeTool.get_weekday", "args": {}}, {"id": 6, "prev": [5], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 7, "prev": [6], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 8, "prev": [7], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 9, "prev": [8], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 10, "prev": [9], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 11, "prev": [10], "name": "TimeTool.get_weekday", "args": {}}, {"id": 12, "prev": [11], "name": "FilmDouban.print_detail", "args": {"film_name": "侏罗纪公园"}}, {"id": 13, "prev": [12], "name": "FilmDouban.print_detail", "args": {"film_name": "功夫熊猫"}}, {"id": 14, "prev": [13], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning to watch some upcoming movies in China. Can you provide me with the details of the first three upcoming movies in China, including the date, title, category, region, and the number of people who are interested in watching them? Also, could you tell me the current time?"}]}, "query_221_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/recent_papers.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Recent Machine Learning Research Papers"}}, {"id": 3, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Lecture Notes: Optimization for Machine Learning", "bullet_items": "Authors: Elad Hazan\nSummary: Lecture notes on optimization for machine learning, derived from a course at Princeton University and tutorials given in MLSS, Buenos Aires, as well as Simons Foundation, Berkeley."}}, {"id": 4, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "An Optimal Control View of Adversarial Machine Learning", "bullet_items": "Authors: Xiaojin Zhu\nSummary: I describe an optimal control view of adversarial machine learning, where the dynamical system is the machine learner, the input are adversarial actions, and the control costs are defined by the adversary's goals to do harm and be hard to detect. This view encompasses many types of adversarial machine learning, including test-item attacks, training-data poisoning, and adversarial reward shaping. The view encourages adversarial machine learning researcher to utilize advances in control theory and reinforcement learning."}}, {"id": 5, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Minimax Deviation Strategies for Machine Learning and Recognition with Short Learning Samples", "bullet_items": "Authors: Michail Schlesinger, Evgeniy Vodolazskiy\nSummary: The article is devoted to the problem of small learning samples in machine learning. The flaws of maximum likelihood learning and minimax learning are looked into and the concept of minimax deviation learning is introduced that is free of those flaws."}}, {"id": 6, "prev": [1, 2, 3, 4, 5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to compile information about recent computer science research papers, focusing on the topic of machine learning. Can you find the latest 3 papers, getting details like the publication date, title, authors, and summary? Afterwards, please create a presentation, starting with an introductory slide, and then follow that with a slide dedicated to each paper. On these slides, include the paper's title, authors, and summary. Lastly, save the presentation in the directory 'outputs/recent_papers.ppt'."}]}, "query_221_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/now_playing_movies.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Top 3 Movies Currently Showing in China", "bullet_items": "1. 珍·古道尔的传奇一生\n2. 奥本海默\n3. 驯龙高手"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_image_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "Category: 纪录片、传记电影\nRegion: 美国\nNumber of Interested Viewers: 9.2\nSynopsis: 珍·古道尔的传奇一生是一部美国的纪录片、传记电影，由布莱特·摩根导演，简·古道尔、雨果·凡·拉维克、雨果·埃里克·路易斯·凡·拉维克等人主演。剧情简介：影片主角是在世界上拥有极高声誉的动物学家珍·古道尔，她二十多岁时前往非洲的原始森林，为了观察黑猩猩，在那里度过了三十八年的野外生涯，后来常年奔走于世界各地，呼吁人们保护野生动物、保护地球环境。 导演布莱特·摩根尤其擅长人物刻画，他从100多个小时从未公布过的珍·古道尔在野外考察和访谈的影像资料中选材剪辑，以第一人称视角，讲述了珍·古道尔年轻时在非洲研究黑猩猩的故事。伴随菲利普·格拉斯的迷人配乐，让观众感受到在那个仍由男性主导野外科研的年代，一个女人如何通过激情、奉献和毅力改变世界。影片还把人类的命运与动物交织在一起，大大强化了人与自然的关系。", "image": "image_path_1"}}, {"id": 5, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "珍·古道尔的传奇一生"}}, {"id": 6, "prev": [3, 5], "name": "PPT.add_text_image_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "Category: 纪录片、传记电影\nRegion: 美国\nNumber of Interested Viewers: 9.2\nSynopsis: 珍·古道尔的传奇一生是一部美国的纪录片、传记电影，由布莱特·摩根导演，简·古道尔、雨果·凡·拉维克、雨果·埃里克·路易斯·凡·拉维克等人主演。剧情简介：影片主角是在世界上拥有极高声誉的动物学家珍·古道尔，她二十多岁时前往非洲的原始森林，为了观察黑猩猩，在那里度过了三十八年的野外生涯，后来常年奔走于世界各地，呼吁人们保护野生动物、保护地球环境。 导演布莱特·摩根尤其擅长人物刻画，他从100多个小时从未公布过的珍·古道尔在野外考察和访谈的影像资料中选材剪辑，以第一人称视角，讲述了珍·古道尔年轻时在非洲研究黑猩猩的故事。伴随菲利普·格拉斯的迷人配乐，让观众感受到在那个仍由男性主导野外科研的年代，一个女人如何通过激情、奉献和毅力改变世界。影片还把人类的命运与动物交织在一起，大大强化了人与自然的关系。", "image": "outputs/1697752201.9295337.jpg"}}, {"id": 7, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 8, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "奥本海默"}}, {"id": 9, "prev": [7, 8], "name": "PPT.add_text_image_page", "args": {"title": "奥本海默", "bullet_items": "Category: 剧情、传记、历史电影\nRegion: 美国 / 英国\nNumber of Interested Viewers: 8.9\nSynopsis: 奥本海默是一部美国/英国的剧情、传记、历史电影，由克里斯托弗·诺兰导演，基里安·墨菲、艾米莉·布朗特、马特·达蒙等人主演。剧情简介：当我们为权力金钱焦虑、兴奋与愤怒时，却根本想象不到“他们”在谈论着怎样更重要的事情。", "image": "outputs/1697752236.1743202.jpg"}}, {"id": 10, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 11, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "驯龙高手"}}, {"id": 12, "prev": [10, 11], "name": "PPT.add_text_image_page", "args": {"title": "驯龙高手", "bullet_items": "Category: 动画、奇幻、冒险电影\nRegion: 美国\nNumber of Interested Viewers: 8.8\nSynopsis: 驯龙高手是一部美国的动画、奇幻、冒险电影，由迪恩·德布洛斯导演，杰伊·巴鲁切尔、杰拉德·巴特勒、克雷格·费格森等人主演。剧情简介：维京岛国的少年小嗝嗝（杰伊•巴鲁切尔 Jay Baruchel 配音）是部落统领伟大的斯托里克（杰拉德·巴特勒 Gerard Butler 配音）的儿子，他非常想像自己的父亲一样亲手屠龙——这些飞龙是岛上维京人放牧羊群的主要天敌——但他每次出现在部落屠龙的战斗中都只给大家徒增烦恼。在一次对抗飞龙的战斗中，希卡普偷偷用射龙器击伤了一只最神秘的“夜之怒龙”，并背着族人放生、豢养，甚至驯服了这只龙，还给它起名“无牙”。希卡普的神秘行径引起了一同训练屠龙技巧的女孩阿斯特丽德（亚美莉卡·费雷拉 America Ferrera 配音）的怀疑。阿斯特丽德发现了希卡普的秘密，却同时被身骑“无牙”御风而飞的美妙体验所震撼。格雷决定在屠龙成人礼上向远征归来的斯托里克和族人讲明真相，说服大家放弃屠龙，却偏偏弄巧成拙，害得“无牙”被俘，一场更大的灾难就在眼前……", "image": "outputs/1697752260.5545056.jpg"}}, {"id": 13, "prev": [2, 6, 9, 12], "name": "PPT.save_file", "args": {}}, {"id": 14, "prev": [13], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in creating a presentation on the top 3 movies currently showing in China. Could you find the details of these movies, including their title, category, region, number of interested viewers, and a short synopsis? Additionally, get an image related to each of these movies. Let's have an introductory slide and one slide dedicated to each movie in the PowerPoint. On each movie's slide, include the movie's details and the associated image. Please save the presentation as 'outputs/now_playing_movies.ppt'."}]}, "query_221_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "Education", "abs_location": "outputs/science_education.ppt"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Introduction to Science", "bullet_items": "Science is the systematic study of the natural world through observation and experimentation."}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Famous Scientists", "bullet_items": "1. Isaac Newton - Laws of motion\n2. Albert Einstein - Theory of relativity\n3. Marie Curie - Discovery of radioactivity"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_image_page", "args": {"title": "Science Experiments", "bullet_items": "", "image": "science_experiment.jpg"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "science experiment"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_image_page", "args": {"title": "Science Experiments", "bullet_items": "", "image": "outputs/1697752346.531927.jpg"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to prepare an educational slide deck for my students on the topic 'Education'. Start with a title slide named 'Introduction to Science' and a bullet point slide with the content: 'Science is the systematic study of the natural world through observation and experimentation.' Then, create a slide titled 'Famous Scientists' and list at least 3 renowned scientists along with their contributions. Finally, add a slide named 'Science Experiments' and include an image related to a science experiment. Save this presentation as 'outputs/science_education.ppt'."}]}, "query_223_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "ArxivSearch.get_arxiv_article_information", "FilmDouban.print_detail", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "deep learning"}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "沙丘"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent scholarly articles about 'deep learning'. Show comprehensive information about the movie 'Dune'. Show comprehensive data and recent news about the stock ticker 'AAPL'."}]}, "query_223_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.aggregate_stock_with_time", "ArxivSearch.get_arxiv_article_information", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantitative finance"}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "大空头"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 1, "timespan": "week", "from": "2023-10-10", "to": "2023-10-16"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent scholarly articles on 'quantitative finance'. Show comprehensive information about the movie 'The Big Short'. Show aggregated data for the stock 'AAPL' for the week of 2023-10-10."}]}, "query_224_0": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_distance", "ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 157336}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_distance", "args": {"origins": "39.9042,116.4074", "destination": "31.2304,121.4737"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the details of the most recent research paper on quantum computing, including its title, authors, and abstract. Also, provide information about the film 'Interstellar', including its genre, release date, length, synopsis, average rating, and popularity. Lastly, measure the distance between the coordinates '39.9042,116.4074' and '31.2304,121.4737'."}]}, "query_224_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.search_nearby", "FilmTMDB.search_movie", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "The Dark Knight"}}, {"id": 2, "prev": [1], "name": "GaodeMap.search_nearby", "args": {"location": "40.7128, -74.0060", "keywords": "theater"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for the most recent research papers on artificial intelligence and provide the titles, authors, and abstracts of the first three papers. Additionally, provide the details of the movie titled 'The Dark Knight', including its movie ID. Lastly, find theaters in the vicinity of the location with coordinates '40.7128, -74.0060'."}]}, "query_224_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "computer vision"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_coordinate", "args": {"address": "洛杉矶, 加利福尼亚"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the most recent research papers on computer vision and provide the titles, authors, and abstracts of the first three papers. Additionally, provide a list of the highest-rated movies and their details, including genres, release dates, lengths, synopses, average ratings, and popularities. Lastly, obtain the longitude and latitude of 'Los Angeles, California'."}]}, "query_225_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in the subject of machine learning and want recent articles on this topic. Could you fetch the meta-information for the top three articles related to machine learning from a database of academic papers? Besides, I would also like to find more scholarly articles on machine learning from an academic search engine, can you provide the titles, citations, and publication data for the top three articles?"}]}, "query_225_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 299054}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in discovering some fresh movies. Could you provide a list of movies that are presently showing in cinemas from a movie database? Then, could you select one of the movies and fetch its details including genres, release date, runtime, title, overview, average vote, and popularity? And finally, based on the selected movie's genres and keywords, could you find similar movies?"}]}, "query_225_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am working on a research project and need to collect information from scholarly articles. Could you perform a search in an academic search engine using the keyword 'climate change' and provide the titles, citations, snippets, and publication information of the top three search results? Additionally, could you find the author information for one of the articles, including their name, affiliation, a list of their articles, and their website, using the author's unique identifier? Lastly, could you get the MLA citation format for one of the search results using its unique identification number?"}]}, "query_226_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "quantum computing"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "quantum computing"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting a research on the topic of quantum computing. Please find scientific articles relevant to this topic and provide me with the meta information of the first 3 articles, including their published date, title, authors, and summary. Furthermore, I also need details of the first movie you find that is related to quantum computing, including genres, release date, runtime, title, overview, vote average, and popularity. Lastly, look up any additional information on the topic on the Internet."}]}, "query_226_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a big fan of movies and I want to explore some popular and top-rated films. Please provide me with a list of the first 3 popular movies, including their ID, title, release date, popularity, and rating. Also, give me a list of the first 3 highest-rated movies, including the same details. Additionally, I am interested in the movie named 'Inception'. Could you find it and provide me with its ID?"}]}, "query_227_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 240}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm conducting a research on machine learning. Could you find articles related to this topic on Arxiv.org and give me the meta information for the top three? I need their publication dates, titles, authors, and summaries. In addition, I need to know the details of the top-rated movies, such as their genres, release date, runtime, title, overview, vote average, and popularity."}]}, "query_227_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 103, "start_time": "14:30", "end_time": "15:30"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to arrange a meeting today and am searching for an available meeting room. Could you find out if any rooms are free between 14:00 and 16:00 and give me a list of their IDs? Once I have the ID of the room, I would like to book it from 14:30 to 15:30."}]}, "query_228_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of machine learning. Please gather metadata for three articles related to this topic. Also, could you provide details about the movie 'Inception' and find movies that are similar to it in terms of genre and keywords?"}]}, "query_228_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_now_playing", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to stay up to date with the latest movies. Could you provide me with a list of currently popular movies, top-rated ones, and those now playing in theaters?"}]}, "query_228_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FilmTMDB.search_movie", "TimeTool.get_weekday", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "Avengers: Endgame"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299534}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to manage my time effectively. Could you tell me the current date and time, along with today's weekday? Also, I would like to know more about the movie 'Avengers: Endgame'."}]}, "query_229_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "Education", "abs_location": "outputs/EducationLecture.pptx"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Introduction to Programming", "bullet_items": "Variables[SPAN]Loops[SPAN]Functions"}}, {"id": 2, "prev": [1], "name": "PPT.get_image", "args": {"keywords": "programming"}}, {"id": 3, "prev": [1, 2], "name": "PPT.add_text_image_page", "args": {"title": "Programming Image", "bullet_items": "Image related to programming", "image": "outputs/1697714123.2114513.jpg"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to prepare a lecture on programming. Can you create a PowerPoint file with the theme 'Education' and save it to 'outputs/EducationLecture.pptx'? Add a text page titled 'Introduction to Programming' with bullet points for 'Variables', 'Loops', and 'Functions'. Also, find an image related to programming online and add it to the presentation."}]}, "query_22_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a researcher, I need the latest articles on 'quantum computing' and also the current time."}]}, "query_22_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a journalist, I'm looking for scientific articles related to 'climate change' and also need to know the current time."}]}, "query_230_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm writing a research paper on quantum computing. Please find the most recent articles on Arxiv related to quantum computing and give me the meta information of the first 3 articles, including their published date, title, authors, and summary. Also, I'm interested in watching a top-rated film. Could you please find the list of top-rated movies for me? Lastly, I want to know the weather forecast for today in New York."}]}, "query_230_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "Weather.forecast_weather", "FilmTMDB.search_movie", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Interstellar"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 157336}}, {"id": 3, "prev": [2], "name": "Weather.forecast_weather", "args": {"location": "Los Angeles", "days": 3}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm looking for information about the latest movies and scientific articles. Please find the most recent articles on Arxiv related to artificial intelligence and give me the meta information of the first 3 articles, including their published date, title, authors, and summary. Additionally, I want to search for the movie 'Interstellar' by its title. Once I have the movie ID, fetch the details of the movie, including its genres, release date, runtime, and vote average. Lastly, I would like to know the weather forecast for the next 3 days in Los Angeles."}]}, "query_230_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today", "FilmTMDB.get_now_playing"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "neuroscience"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Chicago"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an entertainment blogger, I need to stay updated with the latest movies and scientific research. Please find the most recent articles on Arxiv related to neuroscience and give me the meta information of the first 3 articles, including their published date, title, authors, and summary. Additionally, I want to know the movies that are currently playing in theatres. Fetch the list of movies currently in theatres, including their title, release date, popularity, and rating. Lastly, I would like to know the weather forecast for today in Chicago."}]}, "query_231_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies", "PolygonFinance.get_ticker_news"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the highest-rated research articles related to quantum computing. Get the details of the highest-rated movie and find the latest news articles related to the company associated with the ticker symbol 'AAPL'."}]}, "query_231_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "ArxivSearch.get_arxiv_article_information", "FilmTMDB.search_movie", "FilmTMDB.get_movie_details", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "film analysis"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "WB"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "WB"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "WBIL"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 6, "prev": [5], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for recent research articles on film analysis. Find the movie with the title 'Inception' and get detailed information about the company behind the ticker symbol 'WB'."}]}, "query_231_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.aggregate_stock_with_time", "ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_now_playing"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "stock market analysis"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "MSFT", "multiplier": 1, "timespan": "day", "from": "2023-10-01", "to": "2023-10-18"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the latest research articles on stock market analysis. Get the list of movies currently playing in theaters and get the aggregate stock data for the stock ticker symbol 'MSFT'."}]}, "query_235_0": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_route", "GaodeMap.get_distance", "ArxivSearch.get_arxiv_article_information", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_coordinate", "args": {"address": "研究机构"}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_distance", "args": {"origins": "current_location", "destination": "(102.963036,25.486193)"}}, {"id": 3, "prev": [2], "name": "GaodeMap.get_route", "args": {"origin": "current_location", "destination": "(102.963036,25.486193)"}}, {"id": 4, "prev": [3], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_route', {'name': 'GaodeMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'origin', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of quantum computing. Please find articles related to quantum computing and provide me with the details of the first three articles, including their publication date, title, authors, and summary. Additionally, find out how far I am from the closest research facility. Also, find libraries near my current location."}]}, "query_237_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.search_nearby", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.search_nearby", "args": {"location": "116.397428,39.90923", "keywords": "restaurant"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "Tiananmen Square, Beijing, China"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify restaurants located in the vicinity of 'Tiananmen Square' in Beijing, China, and provide the current day's weather forecast for the same location."}]}, "query_238_0": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_distance", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.aggregate_stock_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_distance", "args": {"origins": "39.908722,116.397496", "destination": "31.230416,121.473701"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 7, "timespan": "day", "from": "2023-01-01", "to": "2023-01-31"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the latest scholarly articles that focus on the subject of 'quantum computing' from Arxiv. Determine the geographical distance between the coordinates '39.908722,116.397496' and '31.230416,121.473701'. Finally, provide a collection of stock data for the company known by the ticker symbol 'AAPL' for the period starting from the 1st of January 2023 to the 31st of January 2023, with the data aggregated on a weekly basis."}]}, "query_238_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_route", "ArxivSearch.get_arxiv_article_information", "GaodeMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "travel destinations"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_route", "args": {"origin": "39.908722,116.397496", "destination": "31.230416,121.473701"}}, {"id": 2, "prev": [1], "name": "GaodeMap.search_nearby", "args": {"location": "39.908722,116.397496", "keywords": "restaurant"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_route', {'name': 'GaodeMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'origin', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find scholarly articles that delve into the topic of 'travel destinations' from Arxiv. Provide the driving directions from the coordinates '39.908722,116.397496' to '31.230416,121.473701'. In addition, identify restaurants within a 1km radius from the location '39.908722,116.397496'."}]}, "query_239_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning algorithms"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning algorithms"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "sR_ChBn63tIJ"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on machine learning algorithms. Please find articles on Arxiv.org related to machine learning algorithms and give me the metadata information of the first three articles, including the published date, title, authors, and summary. Also, find scholarly articles on Google Scholar using the same query and give me the titles, citation numbers, and publication information of the first three articles. Additionally, generate an MLA citation format for the first article from the list."}]}, "query_240_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Quantum computing"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "Pn8ouvAAAAAJ"}}, {"id": 3, "prev": [2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a research paper on quantum computing, and I need information about the first author of the articles. Please find articles related to quantum computing and provide me with the meta information of the first three articles. Lastly, I need to know if there are any meeting rooms available tomorrow from 2:00 PM to 4:00 PM."}]}, "query_240_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "ReserveMeeting.get_room_status", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_citation_format"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 2, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a research paper on machine learning and I need to include proper citations. Please find relevant articles and provide me with the MLA citation format for the first article. Also, provide me with the meta information of the first three articles. Lastly, I need to know the booking status of all the meeting rooms."}]}, "query_241_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "GoogleScholar.search_google_scholar", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "machine learning"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "ITZ1e7MAAAAJ"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 5, "prev": [4], "name": "TimeTool.get_weekday", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for three 'machine learning' articles. Obtain the publication date, title, authors, and summary of these articles. Find the information of the author who has written the most articles on 'machine learning'. Also, get the citation format of the most cited 'machine learning' article. Finally, find out the current day of the week."}]}, "query_242_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.get_author_id", "PPT.add_text_image_page", "PPT.create_file", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Richard S. J. Tol"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "AjZwhtwAAAAJ"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "climate change"}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "simple", "abs_location": "outputs/climate_change_presentation.ppt"}}, {"id": 5, "prev": [4, 3], "name": "PPT.add_text_image_page", "args": {"title": "Climate Change", "bullet_items": "", "image": "outputs/1697734594.6192734.jpg"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a presentation on the topic of climate change. Please search for relevant articles on Arxiv related to climate change and provide me with the meta information of the top 3 articles, including their published dates, titles, authors, and summaries. Additionally, I need the information of the first author who is an expert in this field. Once I have the author ID, please provide me with the author name, affiliation, a list of at most 3 articles written by the author, and the author's homepage URL. Lastly, I need an image related to climate change to include in my presentation. Please search for an image using the keywords 'climate change' and provide me with the file path of the image. Then, create a PowerPoint file with a simple theme and add a page with the title 'Climate Change' and the image obtained. Finally, save the PowerPoint file in the location 'outputs/climate_change_presentation.ppt'."}]}, "query_242_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "ArxivSearch.get_arxiv_article_information", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum mechanics"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "quantum mechanics"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "NBjp4NBMU-oJ"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "hjmWmdXL6nEJ"}}, {"id": 4, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "iyxBtazI0SMJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am preparing a lecture on the topic of quantum mechanics. Please find relevant articles on Arxiv related to quantum mechanics and provide me with the meta information of the top 3 articles, including their published dates, titles, authors, and summaries. Additionally, I need the MLA citation format for 3 relevant articles related to quantum mechanics found on Google Scholar."}]}, "query_244_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_detail", "GoogleScholar.get_author_id", "GoogleScholar.get_author_information", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning interpretability"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning interpretability"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Finale Doshi-Velez"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "hwQtFB0AAAAJ"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Google"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "GOOGL"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find articles on Arxiv related to 'machine learning interpretability' published in the last month. Then, look for scholarly articles on Google Scholar on the same topic. Identify the author ID of the author of the paper with the highest citation count from 2022. Retrieve the author information using this author ID. Lastly, identify the stock ticker symbol for the company known as 'Google' and obtain detailed information about this company."}]}, "query_245_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum error correction"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Obtain information on the most recent research papers related to 'quantum computing' and gather the meta information for the first three papers. Conduct an information search for 'quantum error correction'. Check if a conference room is available from 2pm to 4pm and secure it for a discussion on quantum computing."}]}, "query_245_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "neural networks"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "18:00", "end_time": "20:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": 101, "start_time": "18:00", "end_time": "20:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find information on research papers related to 'machine learning' and gather the meta information for the first three papers. Look up articles on 'neural networks'. Check if the first available meeting room is free and reserve it for a study group session from 6pm to 8pm."}]}, "query_246_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "quantum computing news"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a researcher seeking to accumulate some study resources on quantum computing. I would like to probe for pertinent articles on Arxiv.org with the phrase 'quantum computing'. I am interested in the meta details of the three best search results, such as the date of publication, title, authors, and abstract. Furthermore, I would like you to conduct a Google search to discover any current news or progress in the quantum computing domain. Lastly, I need to know the current date and time."}]}, "query_246_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "TimeTool.get_weekday", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "history of artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "recent breakthroughs in artificial intelligence"}}, {"id": 2, "prev": [1], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a student, I have a project on artificial intelligence. I would like you to conduct a Google search to discover information about the history of AI. Also, look for any recent breakthroughs or advancements in the field. In addition, I want you to scour for relevant articles on Arxiv.org with the phrase 'artificial intelligence'. I am interested in the meta details of the three best search results, including the date of publication, title, authors, and abstract. Lastly, I am curious about the weekday today."}]}, "query_246_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "methods of data analysis"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "data analysis"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Being a data analyst, I need to collect data on data analysis methodologies. I would like you to conduct a Google search to find articles or tutorials on methods of data analysis. Also, look for relevant articles on Arxiv.org with the phrase 'data analysis'. I am interested in the meta details of the three best search results, such as the date of publication, title, authors, and abstract. Lastly, I need to know the current date and time."}]}, "query_247_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleSearch.serper_search", "ArxivSearch.get_arxiv_article_information", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "deep learning"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "DeepLearning_Advances", "abs_location": "outputs/DeepLearning_Advances.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Deep learning is a subfield of machine learning that focuses on learning representations of data through multiple layers of neural networks."}}, {"id": 3, "prev": [2], "name": "PPT.save_file", "args": {}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "recent research papers on deep learning"}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Key Points about Deep Learning", "bullet_items": "1. Deep learning is a subfield of machine learning\n2. It focuses on learning representations of data through multiple layers of neural networks\n3. Deep learning has achieved great success in various fields\n4. Understanding the internal mechanism of deep learning is important for its development and effective application\n5. Deep learning is based on mathematics and can be examined from different perspectives\n6. Concepts are the foundation of human deep learning\n7. Concept-oriented deep learning extends machine deep learning with concept representations and understanding capability\n8. Deep learning research landscape and roadmap provides insights into the past, present, and future of deep learning"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Kindly find the most recent research papers on 'deep learning' from Arxiv and Google. Please make a PowerPoint presentation named 'Deep Learning Advances', include a text page titled 'Introduction' and note down some key points about deep learning. Once done, save the presentation at 'outputs/DeepLearning_Advances.ppt'."}]}, "query_247_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleSearch.serper_search", "ArxivSearch.get_arxiv_article_information", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "data analysis"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "data analysis images"}}, {"id": 2, "prev": [0, 1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/DataAnalysis_Insights.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_image_page", "args": {"title": "Key Concepts", "bullet_items": "1. Data collection methods[SPAN]2. Data cleaning and preprocessing[SPAN]3. Exploratory data analysis[SPAN]4. Statistical analysis[SPAN]5. Data visualization", "image": "path/to/data_analysis_image.png"}}, {"id": 4, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Key Concepts", "bullet_items": "1. Data collection methods[SPAN]2. Data cleaning and preprocessing[SPAN]3. Exploratory data analysis[SPAN]4. Statistical analysis[SPAN]5. Data visualization"}}, {"id": 5, "prev": [2, 4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please look for pertinent articles on 'data analysis' from Arxiv and find related images on Google. Proceed to create a PowerPoint presentation titled 'Data Analysis Insights', incorporate a text and image page with the title 'Key Concepts' and some bullet points alongside an image related to data analysis. Please save the presentation at 'outputs/DataAnalysis_Insights.ppt'."}]}, "query_247_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleSearch.serper_search", "ArxivSearch.get_arxiv_article_information", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "mathematics education"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "latest articles on mathematics education"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "Mathematics Education", "abs_location": "outputs/Math_Education_Trends.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "1. Blended learning\n2. Incorporating technology\n3. Focus on problem-solving\n4. Emphasis on conceptual understanding"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you search for the latest articles on 'mathematics education' from Arxiv and Google. Create a PowerPoint presentation named 'Mathematics Education Trends', add a text page titled 'Introduction' and jot down some key points about the current trends in mathematics education. Finally, save the presentation at 'outputs/Math_Education_Trends.ppt'."}]}, "query_248_0": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "artificial intelligence"}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "current", "days": 3}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting a study on artificial intelligence. Can you find recent publications related to this topic and provide details of the first three, including when they were published, their titles, the authors, and a brief. Could you also do a general online search for more details about artificial intelligence? Lastly, what is the weather going to be like for the next three days?"}]}, "query_248_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "quantum physics details"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "recent publications on quantum physics"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "current location"}}, {"id": 3, "prev": [2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "recent publications on quantum physics"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have an assignment on quantum physics. Can you do an online search for quantum physics details and give me the first three results? Also, can you find recent publications on this topic and give me details of the first three, including their publication date, title, authors, and a summary? Could you also tell me what the weather is like today?"}]}, "query_249_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_detail", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning", "limit": 3}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "machine learning algorithms"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on machine learning algorithms. Please find the latest 3 research articles related to machine learning from Arxiv.org and provide their publication dates, titles, authors, and summaries. Additionally, find any recent news articles or discussions about these machine learning algorithms from the internet. Finally, retrieve the detailed information of the stock with the ticker symbol \"AAPL\"."}]}, "query_249_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_daliy_open_close", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "finance economics"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-15"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "company name"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to analyze the stock market and specific companies. First, find the latest 3 research articles related to finance and economics from Arxiv.org and provide their publication dates, titles, authors, and summaries. Then, retrieve the daily open and close prices of the stock symbol \"AAPL\" for October 15, 2023. Finally, find the stock ticker symbol of a company using its name."}]}, "query_24_0": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "Cambridge, MA", "days": 1}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the latest research papers on 'quantum computing' from Arxiv, and check the weather forecast for October 18, 2023 in Cambridge, MA."}]}, "query_24_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "San Francisco, CA"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the most recent papers on 'machine learning' from Arxiv, and get the current weather in San Francisco, CA."}]}, "query_250_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please find recent quantum computing articles on Arxiv.org and give me the metadata of the top three, including date of publication, title, authors, and abstract. Could you also tell me what the current date and time are?"}]}, "query_250_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_room_status", "ReserveMeeting.get_empty_room_with_time", "TimeTool.get_curr_time", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "TimeTool.get_weekday", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you please check the status of rooms 101, 102, and 103? If any of them are free between 2pm and 4pm today, please reserve it for that time. Also, could you tell me the current date and time?"}]}, "query_251_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "ReserveMeeting.reserve", "ArxivSearch.get_arxiv_article_information", "ReserveMeeting.get_empty_room_with_time", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/QuantumComputingOverview.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Quantum Computing Overview", "bullet_items": "Introduction to Quantum Computing[SPAN]Quantum Computing Applications[SPAN]Challenges in Quantum Computing"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "quantum computing"}}, {"id": 5, "prev": [2, 4], "name": "PPT.add_text_image_page", "args": {"title": "Image related to Quantum Computing", "bullet_items": "Introduction to Quantum Computing[SPAN]Quantum Computing Applications[SPAN]Challenges in Quantum Computing", "image": "outputs/1697777634.9573996.jpg"}}, {"id": 6, "prev": [2, 3, 5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need recent articles about 'quantum computing' from Arxiv. I also need to book a room for a discussion tomorrow from 14:00 to 16:00. A presentation should be created with the title 'Quantum Computing Overview' and we should include a text page with bullet points: Introduction to Quantum Computing, Quantum Computing Applications, Challenges in Quantum Computing. An image related to quantum computing should be added to the second page. The presentation should be saved to 'outputs/QuantumComputingOverview.ppt'."}]}, "query_251_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "ReserveMeeting.reserve", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "ReserveMeeting.get_empty_room_with_time", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "number theory"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "10:00", "end_time": "12:00"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/NumberTheoryIntroduction.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "What is Number Theory?", "bullet_items": "Basic concepts[SPAN]Prime numbers[SPAN]Number patterns"}}, {"id": 5, "prev": [4], "name": "PPT.get_image", "args": {"keywords": "number theory"}}, {"id": 6, "prev": [5], "name": "PPT.add_text_image_page", "args": {"title": "Image related to Number Theory", "bullet_items": "Image: [SPAN]Basic concepts, Prime numbers, Number patterns", "image": "outputs/1697777690.2402813.jpg"}}, {"id": 7, "prev": [6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to find research articles about 'number theory' from Arxiv. I also want to know if rooms 101, 102, and 103 are available. If room 102 is available next Monday from 10:00 to 12:00, reserve it for a math club meeting. A presentation should be created with the title 'Introduction to Number Theory' and a text page should be added with the title 'What is Number Theory?' and bullet points: Basic concepts, Prime numbers, Number patterns. An image related to number theory should be included on the second page. The presentation should be saved to 'outputs/NumberTheoryIntroduction.ppt'."}]}, "query_251_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "ReserveMeeting.get_empty_room_with_time", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "data analysis techniques"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "16:00", "end_time": "18:00"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/DataAnalysisTechniques.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Advanced Data Analysis Techniques", "bullet_items": "Regression analysis[SPAN]Hypothesis testing[SPAN]Clustering methods"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to find articles about 'data analysis techniques' from Arxiv. I also need to find a meeting room available from 16:00 to 18:00. A presentation should be created with the title 'Advanced Data Analysis Techniques' and a text page should be added with the title 'Common Data Analysis Techniques' and bullet points: Regression analysis, Hypothesis testing, Clustering methods. The presentation should be saved to 'outputs/DataAnalysisTechniques.ppt'."}]}, "query_254_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Scientific", "abs_location": "outputs/quantum_computing.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Introduction to Quantum Computing", "bullet_items": "Bullet point 1[SPAN]Bullet point 2[SPAN]Bullet point 3"}}, {"id": 3, "prev": [2], "name": "PPT.save_file", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on quantum computing. Please find articles on Arxiv.org on the topic of quantum computing and give me the metadata of the first three articles, such as their publication date, title, authors, and summary. Along with this, create a PowerPoint presentation with the theme 'Scientific' and add a page with text that has the title 'Introduction to Quantum Computing'. The PowerPoint presentation should be saved in 'outputs/quantum_computing.ppt'."}]}, "query_254_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "ArxivSearch.get_arxiv_article_information", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "computer vision"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Technology", "abs_location": "outputs/computer_vision.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Computer Vision in Action", "bullet_items": "1. Introduction to computer vision\n2. Applications of computer vision\n3. Computer vision algorithms"}}, {"id": 3, "prev": [1], "name": "PPT.get_image", "args": {"keywords": "computer vision,image recognition"}}, {"id": 4, "prev": [2, 3], "name": "PPT.add_text_image_page", "args": {"title": "Recent Advances in Computer Vision", "bullet_items": "1. Deep learning in computer vision\n2. Object detection and tracking\n3. Image segmentation", "image": "outputs/1697753813.4184632.jpg"}}, {"id": 5, "prev": [1, 2, 4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a presentation on computer vision tomorrow. Could you look up some recent articles on Arxiv.org on the subject of computer vision and give me the metadata of the first three articles, such as their publication date, title, authors, and summary? In addition, create a PowerPoint presentation with the 'Technology' theme and add a text page titled 'Computer Vision in Action'. Also add a text page titled 'Recent Advances in Computer Vision' with an image from the internet related to computer vision. Save this PowerPoint presentation to 'outputs/computer_vision.ppt'."}]}, "query_255_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "TimeTool.get_weekday", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Quantum Computing"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the three most recent research papers related to 'Quantum Computing' from Arxiv.org. Also, could you inform me about the current day of the week and the weather conditions today in New York?"}]}, "query_255_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "Weather.forecast_weather"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Artificial Intelligence"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "London", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the three newest papers on 'Artificial Intelligence' on Arxiv.org. Could you also let me know the current time and the weather predictions for the coming three days in London?"}]}, "query_255_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Data Science"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "San Francisco"}}, {"id": 3, "prev": [2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "Data Science"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get me the three newest articles pertaining to 'Data Science' from Arxiv.org. Also, could you provide the current time and today's weather in San Francisco?"}]}, "query_256_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "IBM"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "IBM"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for recent articles on arxiv.org related to 'quantum computing' and get the meta information of the first three papers. Also, find the ticker symbol and detailed information of IBM, a company known for its work on quantum computing."}]}, "query_256_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_news"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "financial markets"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the most recent news articles related to the stock ticker symbol 'AAPL'. Also, search for articles on arxiv.org related to 'financial markets' and get the meta information of the first three papers. Additionally, get the current time."}]}, "query_258_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "cryptocurrency regulations"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Bitcoin"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "ABIT"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for publications about 'cryptocurrency regulations' that have been published. Then, find the ticker symbol for Bitcoin. Afterwards, collect detailed information about Bitcoin and fetch the news articles related to Bitcoin that have been published  after October 10, 2023."}]}, "query_259_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_detail", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "Mountain View, California"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "GOOGL"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve three recent articles on the topic of 'quantum computing' from Arxiv. Also, I would like to know the current weather in Mountain View, California. Lastly, could you provide detailed information about the stock with the ticker symbol 'GOOGL'?"}]}, "query_259_1": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "ArxivSearch.get_arxiv_article_information", "PolygonFinance.aggregate_stock_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 3}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 1, "timespan": "day", "from": "2023-10-15", "to": "2023-10-17"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you find three articles about 'artificial intelligence' on Arxiv? I would also like the weather forecast for the next three days in New York City. Lastly, could you show me the aggregate stock bars for the ticker 'AAPL' from October 15, 2023 to October 17, 2023 with a daily time interval?"}]}, "query_259_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "PolygonFinance.get_ticker_news", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "London, UK"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you search for three articles on 'machine learning' on Arxiv? I would also like to know the weather today in London, UK. Finally, could you provide me with the latest news articles related to the stock with the ticker symbol 'TSLA'?"}]}, "query_25_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "123 Main St, Springfield"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "456 Broad St, Springfield", "end": "123 Main St, Springfield"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "456 Broad St, Springfield", "end": "123 Main St, Springfield"}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "456 Broad St, Springfield", "radius": 2000}}, {"id": 4, "prev": [0, 1, 2, 3], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Delivery Confirmation", "body": "Hello John, I am confirming the successful delivery to 123 Main St, Springfield."}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a delivery driver and I need to find the geographical position of 123 Main St, Springfield. I want to determine how far this location is from my current location at 456 Broad St, Springfield, and the best way to get there. Also, I want to know if there are any gas stations within 2km of my current location for refueling. Lastly, I want to send an email to john.doe@example.com to confirm the successful delivery."}]}, "query_25_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_coordinates", "Email.show", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "789 Park Ave, New York"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hotel", "places": "789 Park Ave, New York", "latitude": 40.7715133, "longitude": -73.9632433, "radius": 5000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "789 Park Ave, New York", "latitude": 40.7715133, "longitude": -73.9632433, "radius": 5000}}, {"id": 3, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "attraction", "places": "789 Park Ave, New York", "latitude": 40.7715133, "longitude": -73.9632433, "radius": 5000}}, {"id": 4, "prev": [3], "name": "Email.send", "args": {"address": "attendee1@example.com", "title": "Thank You for Attending the Event", "body": "Dear Attendee 1, \n\nThank you for attending our event at 789 Park Ave, New York. We hope you had a great time and found it informative. If you have any further questions or feedback, please don't hesitate to reach out to us. \n\nBest regards, \nEvent Planner"}}, {"id": 5, "prev": [4], "name": "Email.send", "args": {"address": "attendee2@example.com", "title": "Thank You for Attending the Event", "body": "Dear Attendee 2, \n\nThank you for attending our event at 789 Park Ave, New York. We hope you had a great time and found it informative. If you have any further questions or feedback, please don't hesitate to reach out to us. \n\nBest regards, \nEvent Planner"}}, {"id": 6, "prev": [5], "name": "Email.send", "args": {"address": "attendee3@example.com", "title": "Thank You for Attending the Event", "body": "Dear Attendee 3, \n\nThank you for attending our event at 789 Park Ave, New York. We hope you had a great time and found it informative. If you have any further questions or feedback, please don't hesitate to reach out to us. \n\nBest regards, \nEvent Planner"}}, {"id": 7, "prev": [6], "name": "Email.show", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an event planner, I need to find the geographical position of the conference center at 789 Park Ave, New York. I am also interested in finding hotels, restaurants, and attractions within a 5km radius of this location for recommending to the attendees. After the event, I need to send a thank-you email to all attendees at their respective email addresses at attendee1@example.com, attendee2@example.com, attendee3@example.com. Additionally, I would like to check my inbox at event.planner@example.com for any replies or inquiries."}]}, "query_25_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_distance", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "123 Orchard St, Springfield", "end": "321 Industrial Ln, Springfield"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "123 Orchard St, Springfield", "end": "321 Industrial Ln, Springfield"}}, {"id": 2, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "grocery", "places": "123 Orchard St, Springfield", "radius": 1000}}, {"id": 3, "prev": [2], "name": "Email.send", "args": {"address": "neighbor@example.com", "title": "Plant watering request", "body": "Dear neighbor, \n\nI hope this message finds you well. I will be going on vacation and I was wondering if you could kindly water my plants while I am away. I will be leaving on October 20th and returning on October 30th. I would greatly appreciate your help. Please let me know if you have any questions. \n\nThank you so much!\n\nBest regards, \n[Your Name]"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a homeowner and I want to find out how far my workplace at 321 Industrial Ln, Springfield is from my home at 123 Orchard St, Springfield, and the best path to take. Also, I want to find grocery stores within 1km of my home. Lastly, I want to send an email to my neighbor at neighbor@example.com to ask them to water my plants while I'm on vacation."}]}, "query_260_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "tourist attractions", "places": "Central Park", "radius": 5000}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/attractions.txt", "text": "{places}"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am currently visiting Central Park in New York City and I want to write a blog post about the top tourist attractions in the city. Please find places within a radius of 5 kilometers from Central Park and provide me with a list of the top 5 places, including their names and addresses. Additionally, calculate the distance between each place and Central Park and write this information to a file located at 'outputs/attractions.txt'."}]}, "query_261_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmDouban.print_detail", "BINGMap.get_coordinates", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "The Bund"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "The Bund", "latitude": 31.23885536, "longitude": 121.48716736, "radius": 500}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "疯狂元素城"}}, {"id": 3, "prev": [2], "name": "Email.send", "args": {"address": "foodblogger@email.com", "title": "Upcoming Movie Details", "body": "Please find the details of the upcoming movie '疯狂元素城' in China attached to this email.", "attachment": "疯狂元素城_details.pdf"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a blog post about the best restaurants in Shanghai. I need the coordinates of the Bund and a list of nearby restaurants within a 500 meter radius. Also, could you send the details of the upcoming movie '疯狂元素城' in China to my email address at foodblogger@email.com?"}]}, "query_262_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "123 Main Street", "end": "456 Oak Avenue"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "456 Oak Avenue", "radius": 5000}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": true}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a delivery driver and I need to plan my route for the day. Could you help me get the route and directions from 123 Main Street to 456 Oak Avenue? Also, I need to find gas stations along this route. Lastly, I would like to view my unread emails."}]}, "query_262_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_details", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 575264}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 926393}}, {"id": 4, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 1151534}}, {"id": 5, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 678512}}, {"id": 6, "prev": [5], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a film enthusiast and I would like to stay updated on the latest films. Could you help me get a list of popular movies and their details, including the title, release date, popularity, and rating? Additionally, I would like to know the top-rated movies and read some user reviews for the movie 'Inception'."}]}, "query_264_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Times Square, New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Times Square, New York City", "radius": 500}}, {"id": 2, "prev": [1], "name": "Email.show", "args": {"only_unread": false}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you assist me in finding the geographical coordinates of Times Square in New York City? Furthermore, could you recommend five restaurants within 500 meters of Times Square? Lastly, could you display the emails in my primary inbox?"}]}, "query_266_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.get_empty_room_with_time", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "accommodation", "places": "Times Square, New York City", "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Hotel Mela Times Square", "end": "Empire State Building"}}, {"id": 2, "prev": [1], "name": "Email.send", "args": {"address": "your_email@example.com", "title": "Accommodation and Route Details", "body": "Dear Sir/Madam,\n\nPlease find below the details of accommodation options near Times Square in New York City and the route from Hotel Mela Times Square to the Empire State Building:\n\nAccommodation Options:\n- Hotel Mela Times Square: 120 W 44th St, New York, NY, 10036\n- Casablanca Hotel: 147 W 43rd St, New York, NY, 10036\n- Kimpton Muse Hotel: 130 W 46th St, New York, NY, 10036\n- Econo Lodge Times Square: 302 W 47th St, New York, NY, 10036\n- Hotel 46 Times Square: 129 W 46th St, New York, NY, 10036\n\nRoute from Hotel Mela Times Square to Empire State Building:\n- Head southwest on 7th Ave toward W 43rd St\n- Turn left onto W 34th St\n- Turn right onto 5th Ave, then immediately turn right onto W 33rd St\n- Arrive at Empire State Building, NY on the right\n\nKindly let me know if you need any further assistance.\n\nThank you.\n\nBest regards,\nYour Name"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "09:00", "end_time": "12:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you help me find accommodation options located within a 1-kilometer radius of Times Square in New York City? Also, I would like to know the way to reach the Empire State Building from the first hotel. Kindly send these details to example@example.com . Please also check if there are any conference rooms available in the hotel for a meeting today."}]}, "query_266_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.get_empty_room_with_time", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "conference venue in Chicago", "radius": 1609}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "conference venue in Chicago", "end": "closest train station"}}, {"id": 2, "prev": [1], "name": "Email.send", "args": {"address": "attendees", "title": "Restaurant Options and Directions", "body": "Here are some restaurant options within a 1-mile radius of the conference venue in Chicago:\n\n1. 312 Chicago - 136 N La Salle St, Chicago, IL, 60602\n2. Petterino's - 150 N Dearborn St, Chicago, IL, 60601\n3. Italian Village Restaurants - 71 W Monroe St, Chicago, IL, 60603\n4. House of Blues Restaurant & Bar - 329 N Dearborn St., Chicago, IL, 60654\n5. Roti Mediterranean Bowls. Salads. Pitas. - 33 N Dearborn St, Chicago, IL, 60602\n\nDirections from the venue to the closest train station:\n\n- Head north on N La Salle St toward W Randolph St\n- Turn left onto W Randolph St\n- Take the ramp on the left for I-90 E / I-94 E\n- At Exit 59A, head right on the ramp for I-90 East toward Indiana Toll Rd / Skyway\n- Keep straight to stay on I-90 E\n- Keep straight to stay on I-80 E / I-90 E\n- Keep left to get onto I-80 East\n- Keep straight, heading toward Pa Turnpike / Pittsburgh\n- Keep straight to get onto I-76 E\n- Keep straight to stay on I-76 E\n- Keep right to stay on I-76 E\n- Keep straight to get onto I-276 East\n- At Exit 351, head right on the ramp for US-1 / I-95 South toward Philadelphia / Trenton\n- Keep left, heading toward Princeton / Trenton\n- Keep straight to stay on US-1 N\n- Take the ramp on the right for NJ-33 East and head toward NJ Transit / S Clinton Ave / Train Station\n- Keep straight, heading toward S Clinton Ave N / Trenton Train Station\n- Arrive at Train Station, NJ"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00 AM", "end_time": "12:00 PM"}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to locate restaurants within a 1-mile radius of the conference venue in Chicago. Also, I need directions from the venue to the closest train station. Once I have this information, I'll email the restaurant options and the directions attendees@example.com. Additionally, I need to know if there are any meeting rooms available at the venue for a pre-conference meeting from 10:00 AM to 12:00 PM today."}]}, "query_267_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "BINGMap.search_nearby", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Times Square", "radius": 500}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a tourist visiting New York City. I am looking for some restaurants around Times Square within a short walk, could you suggest the top 5 places along with their names and addresses? Also, I need to check my unread emails in the inbox. Lastly, I would like to know what day of the week it is today."}]}, "query_268_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.create_file", "PPT.save_file", "BINGMap.get_distance", "BINGMap.get_coordinates", "PPT.add_text_image_page", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Times Square"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Times Square", "end": "Central Park"}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "coffee shop", "latitude": 40.75699997, "longitude": -73.98600006, "radius": 500}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "New York City", "abs_location": "outputs/NewYorkTrip.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "Times Square"}}, {"id": 5, "prev": [3, 4], "name": "PPT.add_text_image_page", "args": {"title": "New York City", "bullet_items": "Times Square is a major tourist attraction in New York City.", "image": "outputs/1697708460.765058.jpg"}}, {"id": 6, "prev": [3, 5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City. Could you help me identify the exact location of Times Square? I would also like to know how far it is from Central Park. Can you find coffee shops within 500 meters of Times Square? Please create a PowerPoint slide titled 'New York City' with an image of Times Square and save it in 'outputs/NewYorkTrip.ppt'."}]}, "query_268_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_distance", "BINGMap.get_route", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Los Angeles", "end": "San Francisco"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Los Angeles", "end": "San Francisco"}}, {"id": 2, "prev": [1], "name": "Email.send", "args": {"address": "recipient@example.com", "title": "Package Delivery Details", "body": "Dear recipient,\n\nI am writing to inform you that your package will be delivered from Los Angeles to San Francisco. The estimated distance for the delivery is approximately 614.771 km. The route for the delivery is as follows:\n\n- Head northeast on N Main St toward W Temple St\n- Turn left onto W Arcadia St\n- Turn right onto N Broadway toward Harbor Fwys / Hollywood / Pasadena\n- Take the ramp on the right for US-101 North and head toward Harbor Fwys / Hollywood / Pasadena\n- Keep straight, heading toward Sacramento\n- Keep straight to get onto I-5 N\n- Keep left, heading toward San Francisco / Tracy\n- Take the ramp on the left for I-580 W\n- At Exit 19A, head left on the ramp for I-80 West toward San Francisco\n- At Exit 1B, head right on the ramp for US-101 North toward Bridge / Golden Gate\n- At Exit 434A, head right on the ramp for US-101 North toward Duboce Ave / G G Br\n- Turn right onto US-101 N / Mission St toward G G Bridge / Van Ness Ave / Mission St / US-101 North\n- Arrive at San Francisco, CA\n\nPlease feel free to contact me if you have any further questions or concerns.\n\nBest regards,\n[Your Name]", "attachment": ""}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": false}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm tasked with delivering a package from Los Angeles to San Francisco. Could you help me determine the distance between these two cities and suggest a route? After receiving the route, I will need to email the recipient with the delivery details and his email address is recipient@example.com. Once the email has been sent, can you display the emails in my inbox?"}]}, "query_269_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_distance", "BINGMap.get_route"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Ave NW, Washington, DC", "end": "350 5th Ave, New York, NY"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "350 5th Ave, New York, NY", "end": "1 Infinite Loop, Cupertino, CA"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "1 Infinite Loop, Cupertino, CA", "end": "1600 Pennsylvania Ave NW, Washington, DC"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "1600 Pennsylvania Ave NW, Washington, DC", "end": "350 5th Ave, New York, NY"}}, {"id": 4, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "350 5th Ave, New York, NY", "end": "1 Infinite Loop, Cupertino, CA"}}, {"id": 5, "prev": [2], "name": "BINGMap.get_route", "args": {"start": "1 Infinite Loop, Cupertino, CA", "end": "1600 Pennsylvania Ave NW, Washington, DC"}}, {"id": 6, "prev": [3, 4, 5], "name": "Email.send", "args": {"address": "customer1@example.com", "title": "Delivery Update", "body": "Dear Customer,\n\nWe are pleased to inform you that your package will be delivered on October 19, 2023.\n\nEstimated Delivery Time:\n\nRoute 1: Washington, DC to New York, NY - Distance: 367.293 km, Estimated Time: 4 hours 30 minutes\n\nRoute 2: New York, NY to Cupertino, CA - Distance: 4734.993 km, Estimated Time: 1 day 2 hours\n\nRoute 3: Cupertino, CA to Washington, DC - Distance: 4580.5 km, Estimated Time: 1 day 1 hour\n\nPlease feel free to contact us if you have any questions.\n\nBest regards,\nDelivery Team"}}, {"id": 7, "prev": [3, 4, 5], "name": "Email.send", "args": {"address": "customer2@example.com", "title": "Delivery Update", "body": "Dear Customer,\n\nWe are pleased to inform you that your package will be delivered on October 19, 2023.\n\nEstimated Delivery Time:\n\nRoute 1: Washington, DC to New York, NY - Distance: 367.293 km, Estimated Time: 4 hours 30 minutes\n\nRoute 2: New York, NY to Cupertino, CA - Distance: 4734.993 km, Estimated Time: 1 day 2 hours\n\nRoute 3: Cupertino, CA to Washington, DC - Distance: 4580.5 km, Estimated Time: 1 day 1 hour\n\nPlease feel free to contact us if you have any questions.\n\nBest regards,\nDelivery Team"}}, {"id": 8, "prev": [3, 4, 5], "name": "Email.send", "args": {"address": "customer3@example.com", "title": "Delivery Update", "body": "Dear Customer,\n\nWe are pleased to inform you that your package will be delivered on October 19, 2023.\n\nEstimated Delivery Time:\n\nRoute 1: Washington, DC to New York, NY - Distance: 367.293 km, Estimated Time: 4 hours 30 minutes\n\nRoute 2: New York, NY to Cupertino, CA - Distance: 4734.993 km, Estimated Time: 1 day 2 hours\n\nRoute 3: Cupertino, CA to Washington, DC - Distance: 4580.5 km, Estimated Time: 1 day 1 hour\n\nPlease feel free to contact us if you have any questions.\n\nBest regards,\nDelivery Team"}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a delivery driver and I am planning my route for deliveries on October 19, 2023. Can you help me calculate the distances and provide the routes between these locations: '1600 Pennsylvania Ave NW, Washington, DC', '350 5th Ave, New York, NY', '1 Infinite Loop, Cupertino, CA'? Once the routes are planned, I need to inform my customers about the estimated delivery times via email at customer1@example.com, customer2@example.com, customer3@example.com. Could you also inform me about the status of the email sending process?"}]}, "query_269_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "Weather.get_weather_today", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Central Park, New York"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Central Park, New York", "latitude": 40.78247833, "longitude": -73.96555328, "radius": 1000}}, {"id": 2, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "Central Park, New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a tourist visiting New York and I would like to explore the local attractions. Can you help me find the coordinates of the 'Central Park' in New York and provide a list of 5 restaurants nearby? I would also like to know about the current weather in Central Park, New York, including the overall weather condition and the average temperature."}]}, "query_269_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "BINGMap.get_distance", "Weather.forecast_weather"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "New York", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "New York", "days": 3}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "Los Angeles", "days": 3}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": true}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a trip planner and I am estimating travel time and weather for a road trip. Could you help me calculate the distance between 'New York' and 'Los Angeles'? I would also like to know the weather forecast for October 19, 20 and 21, 2023 in both cities. Once I have the information, I will check my email."}]}, "query_26_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "1600 Pennsylvania Avenue NW, Washington, DC 20500"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "latitude": 38.897671, "longitude": -77.036557, "radius": 500}}, {"id": 2, "prev": [0, 1], "name": "BINGMap.get_distance", "args": {"start": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "end": "600 14th St NW, Washington, DC, 20005"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a delivery driver and I need to find the coordinates of a real address. Please provide me with the latitude and longitude of the address '1600 Pennsylvania Avenue NW, Washington, DC 20500'. Additionally, I need to search for nearby restaurants within a radius of 500 meters from the given address. Finally, calculate the distance from the address to the nearest restaurant."}]}, "query_26_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a road trip and I need to find the best route between two cities. Please provide me with the route and the distance in kilometers from 'New York City' to 'Los Angeles'."}]}, "query_270_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "BINGMap.get_coordinates", "BINGMap.search_nearby", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "742 Evergreen Terrace"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "school", "latitude": 43.3945347, "longitude": -87.89811154, "radius": 2000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hospital", "latitude": 43.3945347, "longitude": -87.89811154, "radius": 2000}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "ABC Real Estate"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "REAL"}}, {"id": 5, "prev": [4], "name": "Email.send", "args": {"address": "client@example.com", "title": "Property and Stock Information", "body": "Dear Client,\n\nI have gathered some information for you regarding your inquiry.\n\nSchools near 742 Evergreen Terrace:\n\n1. Dunwiddie Elementary School\nAddress: 1243 W Lincoln Ave, Port Washington, WI, 53074\n\n2. Port Washington High School\nAddress: 427 W Jackson St, Port Washington, WI, 53074\n\n3. Lincoln Elementary School\nAddress: 1325 N Theis Ln, Port Washington, WI, 53074\n\n4. Thomas Jefferson Middle School\nAddress: 1403 N Holden St, Port Washington, WI, 53074\n\n5. Saukville Elementary School\nAddress: 333 N Mill St, Saukville, WI, 53080\n\nHospitals near 742 Evergreen Terrace:\n\n1. Lakeshore Veterinary Specialists & Emergency Hospital\nAddress: 207 W Seven Hills Rd, Port Washington, WI, 53074\n\n2. Aurora Medical Center Grafton\nAddress: 975 Port Washington Rd, Grafton, WI, 53024\n\n3. BluePearl Pet Hospital\nAddress: 207 W. Seven Hills Rd., Port Washington, WI, 53704\n\n4. Aurora Sports Health\nAddress: 975 Port Washington Rd, Grafton, WI, 53024\n\n5. Froedtert Port Washington Health Center\nAddress: 115 Sweetwater Blvd, Port Washington, WI, 53074\n\nUnfortunately, I couldn't find the stock ticker for ABC Real Estate. However, I found information about a similar company called The RealReal, Inc. Their stock ticker is REAL. Here are some details about The RealReal, Inc.:\n\nAddress: 55 FRANCISCO STREET, SUITE 400, SAN FRANCISCO, CA, 94133\nDescription: The RealReal is the largest luxury resale platform in the U.S., generating $1.8 billion in 2022 gross merchandise volume and addressing a niche (personal luxury resale) that had previously been serviced by inefficient upscale boutiques and local pawn shops. The firm generates revenue via consignment and first-party sales on its online marketplace, and through direct sales across its brick-and-mortar footprint. With a hands-on approach that actively sources inventory and authenticates every item on its platform, The RealReal is able to justify much higher take rates than peers, working out to roughly 35% of net merchandise value, which excludes returns, cancellations, and first-party sales.\nList Date: 2019-06-28\nHomepage URL: [The RealReal](https://www.therealreal.com)\n\nPlease let me know if you need any further assistance.\n\nBest regards,\nYour Assistant"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you identify schools and hospitals that are within 2 km of 742 Evergreen Terrace? Afterwards, please compose an email to client@example.com and include details about the stock ticker of ABC Real Estate."}]}, "query_270_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "BINGMap.search_nearby", "PolygonFinance.get_ticker_news"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "tourist attractions", "places": "The Ritz-Carlton, New York", "radius": 5000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "The Ritz-Carlton, New York", "end": "Central Park"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you find tourist attractions within a 5 km radius of The Ritz-Carlton, New York? Could you also calculate the route from The Ritz-Carlton to Central Park? In addition, please provide the latest news articles related to the stock ticker symbol of XYZ."}]}, "query_272_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Miami"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "New York City", "end": "Miami"}}, {"id": 2, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "Miami", "radius": 5000}}, {"id": 3, "prev": [2], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 5, "prev": [3], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Plan a road trip from New York City to Miami. Find out the way and how far these two locations are apart. Also, look for places to eat in Miami and give me the first 3 results. Lastly, I would like to know the plot summary and details of the movie 'Inception'."}]}, "query_272_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_coordinates", "FilmTMDB.get_now_playing", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "123 Main Street"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "Italian restaurant", "latitude": 41.122948, "longitude": -73.416082, "radius": 5000}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm craving Italian food tonight. Find out how far the first Italian restaurant is from 123 Main Street. Also, search for movies that are currently playing in theaters. Provide me with the details of the first movie."}]}, "query_274_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of artificial intelligence. Please search for scholarly articles on Google Scholar related to artificial intelligence. Provide me with the titles of the papers, the number of citations they have received, and snippets of the papers. Additionally, provide me with the publication information of the selected papers. Furthermore, I would like to obtain the MLA citation format for the first article using its organic result ID. Finally, I need to search for the information of an author using his or her unique ID, including the name, affiliation, up to 3 articles written by the author, and the author's website URL."}]}, "query_274_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Statue of Liberty, New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "latitude": 40.69417191, "longitude": -74.0430603, "radius": 500}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Times Square, New York City"}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "coffee shop", "latitude": 40.75699997, "longitude": -73.98600006, "radius": 500}}, {"id": 4, "prev": [0, 2], "name": "BINGMap.get_distance", "args": {"start": "Statue of Liberty, New York City", "end": "Times Square, New York City"}}, {"id": 5, "prev": [0, 2], "name": "BINGMap.get_route", "args": {"start": "40.69417191,-74.0430603", "end": "40.75699997,-73.98600006"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a travel blog about New York City. Please provide me with the coordinates (latitude and longitude) of popular tourist attractions in New York City. Also, search for places nearby each attraction within a radius of 500 meters and provide me with the names and addresses of up to 5 nearby places. Additionally, calculate the distance and provide me with the route from the first attraction to the second using their coordinates."}]}, "query_275_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "hotels", "places": "Times Square", "radius": 2000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Times Square"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_route", "args": {"start": "JFK Airport", "end": "Times Square"}}, {"id": 3, "prev": [0, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to New York City. Could you find me some hotels within a 2-kilometer radius of Times Square? Additionally, I would like to know the geographical coordinates of Times Square and how to get to Times Square from JFK Airport."}]}, "query_275_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "221B Baker Street, London", "end": "10 Downing Street, London"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "Delivery_Distance.txt", "text": "The distance between 221B Baker Street and 10 Downing Street is 5.5 km."}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a delivery driver, I need to know the distance between 221B Baker Street, London, and 10 Downing Street, London. Once the distance is calculated, could you save this information in a file named 'Delivery_Distance.txt' in the path \"outputs\"?"}]}, "query_277_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "TimeTool.get_curr_time", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "123 Main Street", "end": "456 Oak Street"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "123 Main Street", "end": "456 Oak Street"}}, {"id": 2, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "123 Main Street", "radius": 2000}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a delivery driver, I need to plan my route for today. Please calculate the distance and provide me with the route from 123 Main Street to 456 Oak Street. Also, search for nearby gas stations within a 2-kilometer radius from 123 Main Street. Lastly, let me know the time right now so that I can estimate the time of arrival at 456 Oak Street."}]}, "query_279_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "Weather.get_weather_today", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "200 Broadway, New York", "end": "22 Cortlandt Street, New York"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "Broadway_to_Cortlandt_route.txt", "text": "['Head east on Broadway toward Roebling St', 'Turn right onto Marcy Ave', 'Road name changes to Williamsburg St W', 'Turn left onto Wythe Ave, then immediately turn left onto Williamsburg St E', 'Take the ramp on the left for I-278 East and head toward La Guardia Airport / Triboro Br', 'Take the ramp on the left for I-278 East and head toward RFK Br', 'Take the ramp on the left for I-278 East and head toward Bruckner Expwy / New Haven', 'At Exit 52, head right on the ramp for Bruckner Blvd toward Bronx River Pkwy / White Plains', 'Take the ramp on the right for Bronx River Pkwy N and head toward WHITE PLAINS', 'At Exit 10A, head on the ramp right and follow signs for Yonkers Ave', 'Turn right onto Yonkers Ave toward Mount Vernon', 'Road name changes to Mount Vernon Ave', 'Turn right onto S Bond St', 'Road name changes to N 14th Ave', 'Turn right onto W 1st St', 'Turn right onto Cortlandt St', 'Arrive at 22 Cortlandt St, Mount Vernon, NY 10550']"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "200 Broadway, New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get the route from '200 Broadway, New York' to '22 Cortlandt Street, New York' and write the directions to a file named 'Broadway_to_Cortlandt_route.txt' in 'outputs' location. Also, get the current weather at the starting location."}]}, "query_27_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.search_nearby", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Central Park", "end": "Pizza Restaurant"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "pizza", "places": "Central Park", "radius": 5000}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 3, "prev": [2], "name": "FilmDouban.print_detail", "args": {"film_name": "疯狂元素城"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a craving for some delicious pizza. Could you help find out how far it is from Central Park to the closest pizza restaurant? Can you also suggest the top five pizza places near Central Park? Furthermore, could you tell me about the film '奥本海默' currently being shown in China? Lastly, can you provide me with details on the film '疯狂元素城'?"}]}, "query_281_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm looking for movies to watch. Please provide me with the details of the movies currently playing in China, including the date, title, category, region, number of people who want to watch, and a link. Additionally, I would like to know the details of the upcoming movies in China, including the date, title, category, region, number of people who want to watch, and a link. Finally, I'm interested in the top 10 highest-rated movies. Please provide me with this list of movies ranked by rating, including the ID, title, release date, popularity, and rating."}]}, "query_281_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Paris", "end": "London"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Paris", "end": "London"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Paris"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a road trip and I need some map information. Could you please calculate the distance between Paris and London for me? Provide me with the distance in kilometers. Additionally, I would like to get the route between these two cities. Lastly, I need the coordinates (latitude and longitude) of Paris."}]}, "query_283_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "FilmDouban.coming_out_filter", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Times Square, New York City", "end": "Central Park, New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "Times Square, New York City", "latitude": 40.7589, "longitude": -73.9851, "radius": 500}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "economic effects of tourism"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you tell me how far it is from Times Square to Central Park in New York City? Could you also recommend some eating places within 500 meters of Times Square? I would like to know about the movies releasing soon in China. Lastly, I'm interested in finding academic articles related to the economic effects of tourism."}]}, "query_285_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Los Angeles", "end": "San Francisco"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "San Francisco", "radius": 5000}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to travel from Los Angeles to San Francisco. Could you provide the details of the journey, including the distance and steps needed to reach there? Once I reach San Francisco, I am interested in dining out, can you suggest some nearby restaurants? Additionally, could you inform me about the top 5 movies that will be released soon in China?"}]}, "query_285_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "FilmDouban.now_playing_out_filter", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "500 Ocean Avenue"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "school", "latitude": 40.703573, "longitude": -74.080326, "radius": 1000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "supermarket", "latitude": 40.703573, "longitude": -74.080326, "radius": 1000}}, {"id": 3, "prev": [2], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to know the exact location of a property situated at 500 Ocean Avenue. Once I have the location, I would like to know about the schools and supermarkets around that area. Can you also provide information about the top 5 movies that are currently showing in China?"}]}, "query_288_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Denver", "end": "Rocky Mountain National Park"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "Denver"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Denver", "end": "Rocky Mountain National Park"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a hiking trip to the Rocky Mountains on October 18. Can you help me find the route from Denver to the Rocky Mountain National Park, provide the weather conditions for Denver on October 18, and calculate the distance from Denver to the Rocky Mountain National Park?"}]}, "query_289_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.search_nearby", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Times Square, New York City", "end": "Central Park, New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Empire State Building, New York City"}}, {"id": 2, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "Times Square, New York City", "radius": 1000}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "tech company that manufactures smartphones and computers"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TECH"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City. Could you assist in determining the distance from Times Square to Central Park? Also, could you find out the geographical coordinates of the Empire State Building? I would also appreciate some recommendations for popular restaurants around Times Square. Lastly, could you provide more information and recent news about a tech company that manufactures smartphones and computers?"}]}, "query_289_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "FilmDouban.now_playing_out_filter", "BINGMap.get_route", "PolygonFinance.aggregate_stock_with_time", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Golden Gate Bridge, San Francisco", "end": "Silicon Valley"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Golden Gate Bridge, San Francisco", "end": "Silicon Valley"}}, {"id": 2, "prev": [1], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TSLA"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "TSLA", "multiplier": 1, "timespan": "day", "from": "2023-09-17", "to": "2023-10-17"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm considering investing in a property in San Francisco. Can you help in determining the driving distance and the route from the Golden Gate Bridge to Silicon Valley? I'm also interested in knowing the current movies playing in China and would appreciate the details of the top 5. Additionally, I'm looking into the stock performance of a prominent electric car manufacturer. Could you provide information about the company and the historical stock prices from September 17, 2023 to October 17, 2023?"}]}, "query_28_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "FilmTMDB.search_movie", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "hotels near Times Square"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Hilton New York Times Square", "end": "Central Park"}}, {"id": 2, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York Marriott Marquis", "end": "Central Park"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "W New York - Times Square", "end": "Central Park"}}, {"id": 4, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Renaissance New York Times Square Hotel", "end": "Central Park"}}, {"id": 5, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Sofitel New York", "end": "Central Park"}}, {"id": 6, "prev": [5], "name": "FilmTMDB.search_movie", "args": {"query": "New York City"}}, {"id": 7, "prev": [6], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 541388}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City. Please find hotels near Times Square. Then, determine the distance between each hotel and Central Park. Additionally, identify movies that were filmed in New York City and retrieve detailed information about each movie."}]}, "query_290_0": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.search_nearby", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.search_nearby", "args": {"location": "40.6892,-74.0445", "keywords": "restaurants"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "latitude": 40.6892, "longitude": -74.0445, "radius": 1000}}, {"id": 2, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.6892,-74.0445", "end": "24 Reed St, Brooklyn, NY, 11231"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.6892,-74.0445", "end": "212 Washington St, Jersey City, NJ, 07302"}}, {"id": 4, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.6892,-74.0445", "end": "31 Montgomery St, Jersey City, NJ, 07302"}}, {"id": 5, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.6892,-74.0445", "end": "199 Washington St, Jersey City, NJ, 07302"}}, {"id": 6, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.6892,-74.0445", "end": "187 Warren St Ste 100, Jersey City, NJ, 07302"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a food lover, I want to explore local cuisine in New York City. Find places within a 1 kilometer radius that are related to the keyword 'restaurants'. Provide a list of no more than 5 places with their names and addresses. Also, calculate the distance from each restaurant to a location with latitude 40.6892 and longitude -74.0445 (the coordinates of the Statue of Liberty) and provide the route to reach there."}]}, "query_290_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a film enthusiast, I want to know more about the movie 'Inception'. Please find this movie and provide details such as its release date, runtime, overview, vote average, and popularity. Also, provide a list of movies that are similar to 'Inception' based on genres and keywords. If there are any user reviews for 'Inception', please include them."}]}, "query_291_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "WLaj9ZUvTjoJ"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm conducting research on artificial intelligence and I'm in need of scholarly articles related to this topic. Could you find the top 3 articles on this subject, along with the number of times they've been cited, snippets of the articles, and publication information? I would also appreciate it if you could provide the citation for one of the articles in MLA format. Additionally, could you find information about an author named 'John Smith', including his name, affiliation, at most 3 articles he's written, and his website URL?"}]}, "query_292_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "FilmTMDB.search_movie", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Los Angeles", "end": "Las Vegas"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Spider-Man: No Way Home"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 634649}}, {"id": 3, "prev": [2], "name": "FilmTMDB.search_movie", "args": {"query": "Las Vegas"}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 124807}}, {"id": 5, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hospitality establishments", "places": "Las Vegas", "radius": 5000}}, {"id": 6, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "eateries", "places": "Las Vegas", "radius": 5000}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Organize a journey from Los Angeles to Las Vegas. Determine the path of travel between these two places and locate hospitality establishments and eateries in Las Vegas. Additionally, investigate the details of the film 'Spider-Man: No Way Home' to determine if it is being shown in Las Vegas during the journey."}]}, "query_294_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "FilmTMDB.get_now_playing", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "hotel", "places": "New York City", "latitude": 40.7589, "longitude": -73.9851, "radius": 2000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "The Frederick Hotel", "end": "Times Square"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City and would like to stay in a hotel within a 2 km radius of Times Square. Could you assist me in finding the best route from the selected hotel to Times Square? Can you also suggest a popular movie that's currently available in theaters and suitable for a weekday viewing?"}]}, "query_294_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "BINGMap.search_nearby", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "event space", "places": "Los Angeles Convention Center", "radius": 2000}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm organizing a film screening event at the Los Angeles Convention Center and need to find 5 event spaces within a 2 km radius. Could you also provide a list of top-rated movies in the 'Drama' genre and tell me the current time in Los Angeles?"}]}, "query_295_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "FilmTMDB.search_movie", "BINGMap.get_route", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "fitness"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 785218}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Central Park", "end": "AMC Empire 25 cinema"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_route", "args": {"start": "Central Park", "end": "AMC Empire 25 cinema"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a movie night for my fitness group and need some suggestions for movies that promote fitness and exercise. Could you find such movies and provide their details including the ID, title, release date, summary, average rating, and popularity? Also, could you calculate the distance and provide the route from Central Park to the AMC Empire 25 cinema?"}]}, "query_296_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "FilmTMDB.get_movie_reviews", "Weather.get_weather_today", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "current_location"}}, {"id": 3, "prev": [2], "name": "Weather.forecast_weather", "args": {"location": "current_location", "days": 1}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find restaurants in New York. Then, get user reviews for the movie 'Inception'. Lastly, check the weather today."}]}, "query_297_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_coordinates", "FilmTMDB.get_movie_reviews", "BINGMap.search_nearby", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Los Angeles, California"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "movie theater", "latitude": 34.05223846, "longitude": -118.24334717, "radius": 5000}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a big fan of Christopher Nolan movies. Can you give me the geographical coordinates of Los Angeles, California? Subsequently, find movie theaters within a 5 kilometers radius of these coordinates and share a list of these theaters. I would also like to know detailed information about the movie 'Inception', such as its genres, release date, runtime, overview, vote average, and popularity. Could you also find some reviews of the movie for me?"}]}, "query_297_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "FilmTMDB.get_popular_movies", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in comparing the popularity and ratings of popular movies and top-rated movies. Could you calculate the distance from New York City to Los Angeles and provide me with the route? I would also like a list of popular movies with their titles, release dates, popularity, and ratings. Similarly, could you provide a list of top-rated movies with the same details?"}]}, "query_299_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "latitude": 40.757972, "longitude": -73.985536, "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Empire State Building"}}, {"id": 2, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "40.74843597, -73.98580933"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "151 W 46th St, New York, NY, 10036"}}, {"id": 4, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "2 Times Square, New York, NY, 10036"}}, {"id": 5, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "1501 Broadway, New York, NY, 10036"}}, {"id": 6, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "1501 Broadway, New York, NY, 10036"}}, {"id": 7, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "40.757972, -73.985536", "end": "1567 Broadway, New York, NY, 10036"}}, {"id": 8, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "40.757972, -73.985536", "end": "151 W 46th St, New York, NY, 10036"}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As I am visiting New York City, I'm interested in finding the top-rated restaurants near Times Square, within a 1 kilometer radius. I'd like to know the names and addresses of up to 5 of these restaurants. Could you also determine how far each of these restaurants is from the Empire State Building and provide me with this information? And finally, could you guide me on how to get to the closest restaurant from Times Square?"}]}, "query_2_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.check_availability", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 667316357375615620}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 53132475}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 941597372112246343}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 667316357375615620}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 53132475}}, {"id": 7, "prev": [6], "name": "Email.show", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a property manager, I would like to know the availability and specifics of a property. Could you look up places in New York City and give me information on the top three places? This should include the title, type of property, how many people it can hold, its rating, and its geographical coordinates. For the upcoming week, could you also verify if these places are available? Additionally, I would like to review the emails in my inbox."}]}, "query_2_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 33884250}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 20654271}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 28260101}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 33884250}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 20654271}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 28260101}}, {"id": 7, "prev": [6], "name": "Email.send", "args": {"address": "partneremail@example.com", "title": "Selected Properties", "body": "Here are the details of the selected properties:\n\nProperty 1:\nTitle: Home in Huntington Beach\nType: Private room in home\nCapacity: 1 person\nRating: 4.9\nCoordinates: Latitude 33.72925, Longitude -118.04885\n\nProperty 2:\nTitle: Guesthouse in Culver City\nType: Private room in guesthouse\nCapacity: 2 people\nRating: 4.94\nCoordinates: Latitude 34.0243, Longitude -118.38209\n\nProperty 3:\nTitle: Home in Los Angeles\nType: Private room in home\nCapacity: 2 people\nRating: 4.9\nCoordinates: Latitude 34.22908, Longitude -118.5686\n\nPlease let me know if you have any questions.\n\nBest regards,\n[Your Name]"}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a real estate investor, I am interested in gathering information about potential properties. Could you look up places in Los Angeles and give me the specifics of the top three places? This should include the title, type of property, how many people it can hold, its rating, and its geographical coordinates. In addition, could you get the reviews of these places? Lastly, I would like to send an email to my partner at 'partneremail@example.com' with the details of the selected properties."}]}, "query_300_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "123 Main Street"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "456 Elm Street"}}, {"id": 2, "prev": [0, 1], "name": "BINGMap.get_distance", "args": {"start": "123 Main Street", "end": "456 Elm Street"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a delivery driver, I need to determine the shortest path and calculate the distance between my current location, which is '123 Main Street', and my destination, '456 Elm Street'."}]}, "query_300_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "15:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 103, "start_time": "15:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an event planner, I need to secure a meeting room for an event. Can you check if any rooms are free at 3:00 PM? If available, please book the earliest one."}]}, "query_303_0": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Times Square, New York City", "end": "Central Park, New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "attractions", "places": "Times Square, New York City", "radius": 1000}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 1}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip from Times Square to Central Park in New York City. I'd like to know the best path to take and what attractions I might see along the way. I would also like to be informed about how the weather is looking for October 19, 2023."}]}, "query_305_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "GoogleScholar.search_google_scholar", "BINGMap.get_coordinates", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Central Park"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Central Park", "latitude": 40.78247833, "longitude": -73.96555328, "radius": 1000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "landmark", "places": "Central Park", "latitude": 40.78247833, "longitude": -73.96555328, "radius": 1000}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "famous landmarks in New York"}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "famous landmarks in New York"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York. Can you please find restaurants and landmarks within a one kilometer radius of Central Park? I need the name and address of the top five. Also, can you give me the latitude and longitude of Central Park? Finally, I'm interested in finding out more about famous landmarks in New York. Could you do a search for me?"}]}, "query_305_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "BINGMap.get_route", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Harvard University", "end": "Boston Public Library"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Harvard University", "end": "Boston Public Library"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning in healthcare"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_citation_format", "args": {"q": "I9ke4-WO9y8J"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_citation_format", "args": {"q": "0-gwNu8O3TQJ"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "-nPLdV9umrEJ"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 7, "prev": [6], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to travel from Harvard University to the Boston Public Library. Could you help me with the route and distance in kilometers? Additionally, can you search for scholarly articles related to 'machine learning in healthcare'? I would like to know the titles, citation numbers, and publication information of the top 3 articles. Finally, could you find information about the author with the name 'John Smith'?"}]}, "query_305_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "sushi restaurant", "places": "downtown Los Angeles", "radius": 5000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "downtown Los Angeles", "end": "Takami Sushi & Robata"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "downtown Los Angeles"}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "sushi restaurant", "latitude": 34.0466423, "longitude": -118.25205994, "radius": 5000}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "popular California roll sushi recipes"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm in downtown Los Angeles and craving sushi tonight. Can you please calculate the distance in kilometers from my location to the closest sushi restaurant? Also, can you find sushi restaurants in downtown Los Angeles and provide me with the name and address of the top 5? Finally, can you search for some popular California roll sushi recipes?"}]}, "query_306_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "BINGMap.get_coordinates", "GoogleScholar.get_citation_format", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Los Angeles"}}, {"id": 2, "prev": [0, 1], "name": "BINGMap.get_route", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 3, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "New York City", "latitude": 40.71304703, "longitude": -74.00723267, "radius": 5000}}, {"id": 4, "prev": [2], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.search_google_scholar", "args": {"query": "road trips"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.get_citation_format", "args": {"q": "_OeLMnH7R0IJ"}}, {"id": 7, "prev": [5], "name": "GoogleScholar.get_citation_format", "args": {"q": "FCkDwhGm-kAJ"}}, {"id": 8, "prev": [5], "name": "GoogleScholar.get_citation_format", "args": {"q": "Xll3fxbuP8cJ"}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a road trip from New York City to Los Angeles. I need to locate gas stations along the route and also find out the total distance for the trip. I also require the coordinates for both New York City and Los Angeles. I am interested in scholarly articles on the theme of road trips. Once I have a list of articles, I would like to get them in MLA citation format."}]}, "query_307_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "GoogleScholar.get_citation_format", "BINGMap.get_route", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Times Square", "end": "Statue of Liberty"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Times Square", "end": "Statue of Liberty"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Times Square history"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_citation_format", "args": {"q": "ICufAw99MmwJ"}}, {"id": 4, "prev": [3], "name": "TimeTool.get_weekday", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm conducting a geography project on New York City landmarks. I need to determine the path from Times Square to the Statue of Liberty and would like a detailed breakdown of this journey. Also, find out the distance between these two landmarks. I'm also looking for academic articles about Times Square's history. Provide the MLA format citation for one such article. Lastly, tell me what day of the week it is for my project timeline."}]}, "query_307_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "BINGMap.get_coordinates", "GoogleScholar.get_author_id", "TimeTool.get_curr_time", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Berlin"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "coffee shop", "latitude": 52.52342987, "longitude": 13.41143608, "radius": 1000}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "52.52342987, 13.41143608", "end": "52.52342987, 13.41143608"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Berlin history culture"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Recasting German identity: culture, politics, and literature in the Berlin Republic"}}, {"id": 5, "prev": [4], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm writing about Berlin for a travel blog. Start by finding Berlin's geographical coordinates. Next, locate coffee shops within 1 kilometer of these coordinates and provide their names and addresses. Also, calculate the distance from each coffee shop to these coordinates. Additionally, I'm looking for scholarly articles exploring Berlin's history and culture. Provide the author IDs of the top three articles. Lastly, tell me the current date and time for my blog's reference."}]}, "query_309_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "123 Main Street, Anytown", "end": "John Doe University library"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to write a research paper on 'Climate Change and Its Impacts'. Could you assist me in finding out how far my home, located at 123 Main Street, Anytown, is from the John Doe University library? Also, I would appreciate if you could find scholarly articles related to climate change and provide me with the MLA citation format for the first article."}]}, "query_309_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "GoogleScholar.get_author_information", "GoogleScholar.get_author_id"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "789 Oak Street, Anytown", "end": "456 Elm Street, Anytown"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a client who is interested in buying a house in the neighborhood located at 456 Elm Street, Anytown. Could you assist me in finding the shortest route from their current residence at 789 Oak Street, Anytown, to the neighborhood? Also, could you help me find information about the real estate expert John Doe, including his affiliation and top 3 articles?"}]}, "query_30_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "GoogleScholar.get_citation_format", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "New York", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "New York", "end": "Los Angeles"}}, {"id": 2, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "gas stations", "places": "Los Angeles", "radius": 5000}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "safety of road trips"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_citation_format", "args": {"q": "Z6CaJkkhLkMJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a journey from New York to Los Angeles. Can you calculate the total distance and describe the best route? Can you also find any gas stations along this route? I am looking for scholarly articles on the safety of road trips. Could you help provide the citation for the first article that comes up?"}]}, "query_30_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_coordinates", "GoogleScholar.get_citation_format", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Manaus, Brazil"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "research facilities", "latitude": -3.13163328, "longitude": -59.9825058, "radius": 100000}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Amazon rainforest biodiversity"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_citation_format", "args": {"q": "REp4OmsiCXIJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am studying biodiversity in the Amazon rainforest. Could you get the geographic coordinates for Manaus, Brazil? Also, find research facilities within a 100km radius. I'm also looking for scholarly articles on Amazon rainforest biodiversity. Could you help provide the citation for the first article that appears?"}]}, "query_310_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_coordinates", "GoogleScholar.get_citation_format", "BINGMap.search_nearby", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "123 Main St, New York, NY"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "school", "places": "123 Main St, New York, NY", "radius": 2000}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "article_id"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Lennar Corporation"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "LEN.B"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Simon Property Group"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a real estate agent and I'm looking for nearby schools within a radius of 2 kilometers from 123 Main St, New York, NY. Can you also provide the coordinates of 123 Main St, New York, NY? Additionally, I need the MLA citation format for an article about the impact of schools on property values. Moreover, I would like to know the stock ticker symbol and some details of Lennar Corporation. Finally, I need to search for the stock ticker symbol of Simon Property Group."}]}, "query_310_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "BINGMap.get_distance", "BINGMap.get_coordinates", "GoogleScholar.get_citation_format", "BINGMap.get_route", "BINGMap.search_nearby", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "museum", "places": "Times Square", "radius": 5000}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "park", "places": "Times Square", "radius": 5000}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Times Square, New York, NY", "end": "Empire State Building, New York, NY"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "Central Park, New York, NY"}}, {"id": 4, "prev": [3], "name": "BINGMap.get_route", "args": {"start": "Times Square, New York, NY", "end": "Statue of Liberty, New York, NY"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.search_google_scholar", "args": {"query": "impact of tourism on New York City's economy"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.get_citation_format", "args": {"q": "eK1pLJ9YcxIJ"}}, {"id": 7, "prev": [6], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Empire State Realty Trust"}}, {"id": 8, "prev": [7], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "ESRT"}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City and I want to find nearby attractions, such as museums and parks, within a radius of 5 kilometers from Times Square. Can you also provide the distance between Times Square and the Empire State Building? Additionally, I need the coordinates of Central Park and the route from Times Square to the Statue of Liberty. Finally, I'm interested in researching the impact of tourism on the economy of New York City, so please search for scholarly articles on the impact of tourism on New York City's economy and provide the MLA citation format for one of the articles. Lastly, I would like to know the stock ticker symbol and some details of Empire State Realty Trust."}]}, "query_311_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Times Square"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "Italian restaurant", "places": "Times Square", "latitude": 40.75699997, "longitude": -73.98600006, "radius": 1000}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to New York City. Please find restaurants near Times Square, within 1 kilometer radius. I would prefer a list of 5 Italian restaurants, with their names and addresses. Additionally, could you provide me with the coordinates of Times Square?"}]}, "query_312_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "places": "New York City", "latitude": 40.7128, "longitude": -74.006, "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Benares"}}, {"id": 2, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "The Capital Grille"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "The Irish American"}}, {"id": 4, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "NISH NUSH"}}, {"id": 5, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Atera"}}, {"id": 6, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Statue of Liberty"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm currently in New York City and I'm looking to dine out around here. Could you help me find eateries within a 1 kilometer range? I'd like to know the names and locations of the top 5. Also, could you tell me the geographical position of each one? And, how far are they from the Statue of Liberty?"}]}, "query_312_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "TimeTool.get_curr_time", "BINGMap.get_route", "BINGMap.search_nearby", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Times Square", "end": "Empire State Building"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "Empire State Building", "radius": 500}}, {"id": 4, "prev": [3], "name": "BINGMap.get_distance", "args": {"start": "Times Square", "end": "Empire State Building"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Tomorrow, I have a meeting scheduled at 2:00 PM in the Empire State Building. Could you guide me on how to reach there from Times Square, possibly also with detailed instructions? Besides, could you let me know what time it is now?"}]}, "query_312_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "TimeTool.get_weekday", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "San Francisco"}}, {"id": 2, "prev": [0, 1], "name": "BINGMap.get_distance", "args": {"start": "Los Angeles", "end": "San Francisco"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a delivery job today, and I need to go from Los Angeles to San Francisco. Could you let me know the geographical positions of both cities? Also, could you tell me how much ground I'll have to cover to complete this delivery? Lastly, could you tell me what day of the week it is today?"}]}, "query_313_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_image_page", "BINGMap.search_nearby", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "catering", "places": "123 Main St, New York", "radius": 1000}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Event Planning", "abs_location": "outputs/event_planning.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.get_image", "args": {"keywords": "catering food"}}, {"id": 3, "prev": [1, 2], "name": "PPT.add_text_image_page", "args": {"title": "Lassen & Hennigs", "bullet_items": "Specializing in gourmet cuisine.[SPAN]Provide catering services for all occasions.", "image": "outputs/1697708786.358999.jpg"}}, {"id": 4, "prev": [1], "name": "PPT.get_image", "args": {"keywords": "catering service"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_image_page", "args": {"title": "Wegmans Catering", "bullet_items": "Offer a wide range of menu options.[SPAN]Known for excellent customer service.", "image": "outputs/1697708811.7092824.jpg"}}, {"id": 6, "prev": [1], "name": "PPT.get_image", "args": {"keywords": "catering event"}}, {"id": 7, "prev": [1, 6], "name": "PPT.add_text_image_page", "args": {"title": "Heavenly Events & Catering", "bullet_items": "Specialize in elegant and upscale events.[SPAN]Provide personalized menu options.", "image": "outputs/1697708836.3549314.jpg"}}, {"id": 8, "prev": [1, 3, 5, 7], "name": "PPT.save_file", "args": {}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Plan an event at '123 Main St, New York'. Discover nearby catering services and the top 3 catering services in the area. Create a presentation titled 'Event Planning' with a text and image page for each catering service, using images sourced from a reliable online source. Save the presentation as 'outputs/event_planning.pptx'."}]}, "query_314_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "Weather.get_weather_today", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "New York City"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurants", "latitude": 40.71304703, "longitude": -74.00723267, "radius": 1000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "Le Bernardin", "latitude": 40.71304703, "longitude": -74.00723267, "radius": 1000}}, {"id": 3, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "Eleven Madison Park", "latitude": 40.71304703, "longitude": -74.00723267, "radius": 1000}}, {"id": 4, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "Gramercy Tavern", "latitude": 40.71304703, "longitude": -74.00723267, "radius": 1000}}, {"id": 5, "prev": [4], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in the culinary offerings of New York City. Could you find restaurants within a 1-kilometer radius of the city center? It would also be helpful to have detailed information about 'Le Bernardin', 'Eleven Madison Park', and 'Gramercy Tavern', particularly their names and locations. I'd also like to know the weather in New York City today."}]}, "query_314_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "Weather.forecast_weather"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Griffith Park", "end": "Santa Monica Pier"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Griffith Park", "end": "Santa Monica Pier"}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "Los Angeles", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a running route in Los Angeles. Could you tell me the distance and the best route from Griffith Park to Santa Monica Pier? Also, could you let me know the weather forecast for October 20th, 21st, and 22nd in Los Angeles, including the overall weather condition and average temperature?"}]}, "query_314_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "BINGMap.get_coordinates", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "Kuta Beach information"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "Seminyak Beach information"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "Nusa Dua Beach information"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Kuta Beach"}}, {"id": 4, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Seminyak Beach"}}, {"id": 5, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "Nusa Dua Beach"}}, {"id": 6, "prev": [3], "name": "Weather.forecast_weather", "args": {"location": "Kuta Beach", "days": 1}}, {"id": 7, "prev": [4], "name": "Weather.forecast_weather", "args": {"location": "Seminyak Beach", "days": 1}}, {"id": 8, "prev": [5], "name": "Weather.forecast_weather", "args": {"location": "Nusa Dua Beach", "days": 1}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am preparing to write a blog post about Bali's best beaches. Could you find information on 'Kuta Beach', 'Seminyak Beach', and 'Nusa Dua Beach'? Once I have this information, I'd like to know the coordinates of these beaches. Please also let me know the weather at these beaches on October 17, 2023."}]}, "query_315_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_detail", "PolygonFinance.get_ticker_news"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TSLA"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm considering investing in Tesla. Could you find recent news articles related to Tesla, including the title, summary, and author on October, 2023? Also, could you provide detailed information about Tesla's stock, including the company address, homepage URL, description, and the date it was listed?"}]}, "query_31_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.get_route"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Seattle", "end": "Portland"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Seattle"}}, {"id": 2, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "Portland"}}, {"id": 3, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Seattle", "end": "Portland"}}, {"id": 4, "prev": [3], "name": "BINGMap.get_route", "args": {"start": "Seattle", "end": "Portland"}}, {"id": 5, "prev": [4], "name": "GoogleSearch.serper_search", "args": {"query": "current traffic conditions on route from Seattle to Portland"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have to make a delivery from Seattle to Portland. Could you suggest the shortest route for me? I would also need the exact pickup location in Seattle and the destination in Portland. Lastly, can you provide me with the current traffic conditions on this route?"}]}, "query_321_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "BINGMap.get_route", "Weather.forecast_weather", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "eateries", "places": "Times Square", "radius": 1000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "Central Park", "end": "Times Square"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 3}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to venture out on a trip to New York City. Could you locate eateries close to Times Square within a distance of 1 km? I would also need directions to Times Square from Central Park. Lastly, could you tell me what time it is now and what the weather looks like in New York City for the coming three days?"}]}, "query_321_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "TimeTool.get_weekday", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "Central Park, New York", "end": "Times Square, New York"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Central Park, New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a delivery driver, I need to find out the distance from Central Park, New York to Times Square, New York. Could you also let me know what day of the week it is and the current weather at Central Park, New York?"}]}, "query_321_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "BINGMap.search_nearby", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Yosemite National Park"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "camping", "latitude": 37.84857941, "longitude": -119.55725861, "radius": 10000}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "Yosemite National Park", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am considering a hiking trip to Yosemite National Park. Could you help me with the exact location of the park? I am also interested in finding out about camping grounds in close proximity, say within a 10 km radius from the park. Lastly, what's the weather going to be like in Yosemite for the next three days?"}]}, "query_322_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "BINGMap.get_distance", "BINGMap.get_coordinates", "TimeTool.get_curr_time", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Seattle", "end": "San Francisco"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Seattle", "end": "San Francisco"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "Seattle"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "San Francisco"}}, {"id": 4, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "Seattle"}}, {"id": 5, "prev": [4], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 6, "prev": [5], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a delivery driver and I need to deliver a package from Seattle to San Francisco. Can I get the driving directions, the distance between the two cities, and the GPS locations of both cities? Also, could you help me find the closest gas station to my current location and tell me its name and address? Also, I would like to know what the current time is and the latest news articles related to Amazon, the company I work for."}]}, "query_322_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_coordinates", "PolygonFinance.get_daliy_open_close", "BINGMap.get_route", "BINGMap.search_nearby", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "New York", "end": "Miami"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York", "end": "Miami"}}, {"id": 2, "prev": [1], "name": "BINGMap.get_coordinates", "args": {"location": "New York"}}, {"id": 3, "prev": [2], "name": "BINGMap.get_coordinates", "args": {"location": "Miami"}}, {"id": 4, "prev": [3], "name": "BINGMap.search_nearby", "args": {"search_term": "hotel", "places": "New York", "radius": 5000}}, {"id": 5, "prev": [4], "name": "TimeTool.get_weekday", "args": {}}, {"id": 6, "prev": [5], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "TSLA", "date": "2023-10-10"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a road trip from New York to Miami. I need the driving directions, the distance between the two cities, and the GPS locations of both cities. Can I also get the name and address of the closest hotel to New York? Furthermore, I would like to know what day of the week it is today and the opening and closing prices of Tesla's stock on October 10, 2023."}]}, "query_325_0": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.search_nearby", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "New York City", "radius": 5000}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "MCD"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to have a list of five restaurants located in New York City, with their names and addresses included. Furthermore, I am interested in the stock information of McDonald's for investment consideration."}]}, "query_329_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Artificial Intelligence"}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to find scholarly articles on the topic of 'Artificial Intelligence'. Could you please search Google Scholar and show me the titles of the top three papers found?"}]}, "query_329_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Impact of AI on Modern Society"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "DQ2vUWaq85YJ"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have written an article titled 'Impact of AI on Modern Society'. Could you please generate a MLA citation for this article from Google Scholar?"}]}, "query_330_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FileOperation.read_file", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "teacher@example.com", "title": "Homework Submission", "body": "Dear Teacher, I have attached my completed homework for your review. Thank you."}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "FileOperation.read_file", "args": {"file_path": "homework.txt"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you help me with emailing my homework to my teacher at 'teacher@example.com'? The title should be 'Homework Submission' and the body should be 'Dear Teacher, I have attached my completed homework for your review. Thank you.'. It would also be great if I could see the emails I have received, especially the sender, title, content, and time. And, could you help me read what's in the 'data_v2/template_data/hotel.txt' file?"}]}, "query_331_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "department_head_1@example.com", "title": "Department Meeting", "body": "Dear Department Head 1,\n\nI would like to invite you to a department meeting to discuss important matters. The meeting will be held on [DATE] from 2:00 PM to 4:00 PM in meeting room B101. The agenda of the meeting will include:\n\n1. Review of recent department progress\n2. Discussion of upcoming projects\n3. Any other business\n\nPlease make sure to mark your calendars and come prepared.\n\nBest regards,\n[Your Name]", "attachment": ""}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "department_head_2@example.com", "title": "Department Meeting", "body": "Dear Department Head 2,\n\nI would like to invite you to a department meeting to discuss important matters. The meeting will be held on [DATE] from 2:00 PM to 4:00 PM in meeting room B101. The agenda of the meeting will include:\n\n1. Review of recent department progress\n2. Discussion of upcoming projects\n3. Any other business\n\nPlease make sure to mark your calendars and come prepared.\n\nBest regards,\n[Your Name]", "attachment": ""}}, {"id": 2, "prev": [1], "name": "Email.send", "args": {"address": "department_head_3@example.com", "title": "Department Meeting", "body": "Dear Department Head 3,\n\nI would like to invite you to a department meeting to discuss important matters. The meeting will be held on [DATE] from 2:00 PM to 4:00 PM in meeting room B101. The agenda of the meeting will include:\n\n1. Review of recent department progress\n2. Discussion of upcoming projects\n3. Any other business\n\nPlease make sure to mark your calendars and come prepared.\n\nBest regards,\n[Your Name]", "attachment": ""}}, {"id": 3, "prev": [0, 1, 2], "name": "Email.show", "args": {"only_unread": false}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 5, "prev": [4], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 6, "prev": [0, 1, 2, 3, 5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have to arrange a meeting with the department heads. Please assist me in drafting an email for each department head at department_head_1@example.com, department_head_2@example.com, department_head_3@example.com, including the meeting details, and titling the email 'Department Meeting'. The body of the email should state the meeting agenda and time. Once the emails have been sent out, I'd like to see the emails in my inbox. Additionally, I'd like to book the meeting room with ID '103' for the meeting from 2:00 PM to 4:00 PM."}]}, "query_332_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FileOperation.write_file", "FileOperation.read_file", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "example@example.com", "title": "Important Document", "body": "Please find the attached document.", "attachment": "/home/documents/business_document.txt"}}, {"id": 2, "prev": [1], "name": "FileOperation.read_file", "args": {"file_path": "/home/documents/business_document.txt"}}, {"id": 3, "prev": [2], "name": "FileOperation.write_file", "args": {"file_path": "/home/documents/agenda.txt", "text": "Meeting Agenda"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a business owner, I need to manage my emails and documents. Please show me the emails in my inbox, including sender, title, content, and time. Additionally, I want to send an email to 'example@example.com' with the title 'Important Document'. I have a document saved in a text file at 'data_v2/template_data/hotel.txt', please read this file and include the content in the email. Also, I need to save a new document. Please write the text 'Meeting Agenda' to a file located at '/outputs/agenda.txt'."}]}, "query_333_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.get_image", "PPT.add_text_page", "PPT.save_file", "PPT.add_text_image_page", "FileOperation.write_file", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "all_employees@example.com", "title": "New Employee Benefits", "body": "Here are the details of our new employee benefits package:\n\n- Health insurance\n- Retirement plan\n- Paid time off\n- Employee discounts\n\nPlease let me know if you have any questions or concerns.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "FileOperation.write_file", "args": {"file_path": "outputs/employee_benefits.txt", "text": "Here are the details of our new employee benefits package:\n\n- Health insurance\n- Retirement plan\n- Paid time off\n- Employee discounts\n\nPlease let me know if you have any questions or concerns.\n\nBest regards,\n[Your Name]"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/employee_benefits_overview.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Employee Benefits Overview", "bullet_items": "New Employee Benefits"}}, {"id": 5, "prev": [4], "name": "PPT.get_image", "args": {"keywords": "employee benefits"}}, {"id": 6, "prev": [3, 5], "name": "PPT.add_text_image_page", "args": {"title": "Employee Benefits Overview", "bullet_items": "New Employee Benefits", "image": "outputs/1697712888.3006213.jpg"}}, {"id": 7, "prev": [4, 6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Send an email to employee at all_employees@example.com with the title 'New Employee Benefits' and the content should include the details of the new employee benefits package. After sending the email, find the sent email with the title 'New Employee Benefits' and save its content to a file named 'outputs/employee_benefits.txt'. Then, create a new slide in a PowerPoint presentation titled 'Employee Benefits Overview' and add the text 'New Employee Benefits' to the slide. Also, find an image using the keywords 'employee benefits' and add it to the presentation. Finally, save the PowerPoint presentation to 'outputs/employee_benefits_overview.pptx'."}]}, "query_335_0": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "Email.show", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check the first email in my inbox and read the latest news articles about Apple Inc. Then, retrieve the details of the Apple Inc stock and the company. Also, search for the stock ticker for Apple Inc."}]}, "query_335_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "PolygonFinance.aggregate_stock_with_time", "PolygonFinance.get_daliy_open_close"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-12"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 1, "timespan": "hour", "from": "2023-10-01", "to": "2023-10-15"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "View the first 10 emails in my inbox. Retrieve the open and close prices of the Apple Inc. stock on October 12, 2023. Also, get the aggregate bars of the Apple Inc. stock over the date range from October 1, 2023, to October 15, 2023, in 1-hour time window sizes."}]}, "query_336_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_popular_movies", "Email.show", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Dune"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 438631}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": false}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Display the most popular movies at present. Afterwards, locate information on the movie 'Dune' and present its details. Conclude by checking for new emails in my inbox."}]}, "query_336_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmDouban.coming_out_filter", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "霸王别姬"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 10997}}, {"id": 3, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 10997}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Reveal the next 5 movies that are due to be released in China. Subsequently, obtain and present the details of the movie titled '霸王别姬'. Conclude by gathering user reviews for this movie."}]}, "query_338_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "FilmDouban.now_playing_out_filter", "GoogleScholar.get_author_id", "Email.show", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you show me the emails in my inbox? Also, I would like to know about the top three films currently being shown in China. Furthermore, could you search for academic articles on 'artificial intelligence' on Google Scholar? Lastly, can you find the information of a specific author on Google Scholar without mentioning the ID?"}]}, "query_339_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Meeting Agenda", "body": "Attached is the agenda for our upcoming meeting. Please review it ahead of time.", "attachment": "Agenda.pdf"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to review the newest emails in my inbox. Then, I want to send an email to john.doe@example.com. The email should have the title 'Meeting Agenda' and the body should contain 'Attached is the agenda for our upcoming meeting. Please review it ahead of time.'. If there is an attachment named 'Agenda.pdf', please attach it to the email."}]}, "query_339_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "长津湖之役"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in the latest movies in China. Please provide me with the details of the top 3 movies currently playing in China. Additionally, I would like to know the details of the top 5 upcoming movies in China. Finally, I want to get the description of the movie 'The Battle at Lake Changjin'."}]}, "query_33_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "latitude": 37.7749, "longitude": -122.4194, "radius": 5000}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "37.7749,-122.4194", "end": "1601 Mission St, San Francisco, CA, 94103"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify a gas station close to my current position within a distance of 5 km, and guide me with the driving directions from where I am to the identified gas station. Could you also tell me what time it is now?"}]}, "query_33_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "BINGMap.get_route", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_distance", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_route", "args": {"start": "New York City", "end": "Los Angeles"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you tell me the distance from New York City to Los Angeles, and provide the driving directions? Also, could you tell me what time it is now?"}]}, "query_340_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "team_members@example.com", "title": "Features of Avengers: Endgame", "body": "Dear Team Members,\n\nI hope this email finds you well. I wanted to inform you all about the exciting features of the forthcoming film, 'Avengers: Endgame'.\n\n'Avengers: Endgame' is the epic conclusion to the Marvel Cinematic Universe's Infinity Saga. It features an ensemble cast of superheroes including Iron Man, Captain America, Thor, Hulk, Black Widow, and Hawkeye.\n\nThe film is filled with action-packed sequences, emotional moments, and unexpected twists. It promises to be a thrilling and satisfying conclusion to the Avengers' journey.\n\nI highly recommend everyone to watch 'Avengers: Endgame' and experience this cinematic event.\n\nStay tuned for more updates!\n\nBest regards,\n[Your Name]", "attachment": null}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email to all team members at team_members@example.com detailing the features of the forthcoming film, 'Avengers: Endgame'. Subsequently, ascertain the availability of the first available meeting room from 2:00 PM to 4:00 PM and book it for our weekly marketing assembly."}]}, "query_342_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FilmDouban.print_detail", "PPT.add_text_image_page", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "黑暗骑士"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "Dark", "abs_location": "outputs/dark_knight.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Movie Details", "bullet_items": "Name: The Dark Knight"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "The Dark Knight"}}, {"id": 5, "prev": [3, 4], "name": "PPT.add_text_image_page", "args": {"title": "Movie Details", "bullet_items": "Name: The Dark Knight", "image": "outputs/1697747710.3830557.jpg"}}, {"id": 6, "prev": [2, 3, 5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me the unread emails in my inbox. Then, fetch the details of the movie named 'The Dark Knight'. Create a PowerPoint presentation with a title slide and a slide containing the movie name, description, and an image related to the film. Save the presentation as 'dark_knight.ppt' in the 'outputs' folder."}]}, "query_344_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "PolygonFinance.aggregate_stock_with_time", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "PolygonFinance.aggregate_stock_with_time", "args": {"ticker": "AAPL", "multiplier": 1, "timespan": "day", "from": "2023-10-10", "to": "2023-10-17"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PolygonFinance.aggregate_stock_with_time', {'name': 'PolygonFinance.aggregate_stock_with_time', 'description': 'get aggregate bars for a stock over a given date range in custom time window sizes', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The ticker symbol of the stock/equity'}, {'name': 'multiplier', 'type': 'NUMBER', 'description': 'The size of the timespan multiplier'}, {'name': 'timespan', 'type': 'STRING', 'description': \"The size of the time window, supported 'day', 'hour', 'week'\"}, {'name': 'from', 'type': 'STRING', 'description': 'The start of the aggregate time window with the format YYYY-MM-DD'}, {'name': 'to', 'type': 'STRING', 'description': 'The end of the aggregate time window with the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list of dict including the open and closed price in the given time period and the unix msec timestamp for the start of the aggregate window'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an investor, I need to check all my emails. Then, I want to know about the top 3 films currently playing in China. Lastly, I need to check the aggregated stock bars for the stock ticker 'AAPL' from October 10, 2023 to October 17, 2023."}]}, "query_345_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "friend@example.com", "title": "Recommendation for Movie Night", "body": "Hey friend, I suggest we watch the movie 'Inception' for our movie night. It's a mind-bending and thrilling film directed by Christopher Nolan. I'm sure you'll enjoy it. Let me know what you think!", "attachment": ""}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Send an email to friend@example.com with the title 'Recommendation for Movie Night' and suggest watching a movie titled 'Inception'."}]}, "query_347_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmTMDB.search_movie", "Email.show", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "professor@example.com", "title": "Meeting Request", "body": "I would like to request a meeting to discuss my project"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a student and I need to send an email to my professor with the subject 'Meeting Request' and the body 'I would like to request a meeting to discuss my project'. The email should be sent to professor@example.com. Afterwards, please show me the emails in my inbox that I have already read. Also, I want to know more about the movie 'Inception', could you find the details about this movie?"}]}, "query_347_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmTMDB.get_now_playing", "Email.show", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "editor@example.com", "title": "Breaking News", "body": "I have an important news story to share"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a journalist and I need to send an email to my editor with the subject 'Breaking News' and the body 'I have an important news story to share'. The email should be sent to editor@example.com. Afterwards, could you show me the emails in my inbox that I haven't read yet? In addition, I'd like to know about the latest movies that are currently playing in theaters and the top-rated movies."}]}, "query_347_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "participants@example.com", "title": "Event Reminder", "body": "Just a reminder that the event is tomorrow"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 575264}}, {"id": 4, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299054}}, {"id": 5, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 926393}}, {"id": 6, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 968051}}, {"id": 7, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 1008042}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm an event organizer and I need to send an email to the participants with the subject 'Event Reminder' and the body 'Just a reminder that the event is tomorrow'. The email should be sent to participants@example.com. Then, could you show me all the emails in my inbox? Additionally, I'm interested in the most popular movies, could you provide a list of them and also the reviews for each movie?"}]}, "query_348_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "ReserveMeeting.get_room_status", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to check my email inbox for any new messages. After that, please provide me with a list of the top-rated movies. Lastly, I would like to know the current booking status of the meeting rooms."}]}, "query_348_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmTMDB.search_movie", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Invitation to the upcoming event", "body": "Dear John Doe,\n\nYou are cordially invited to the upcoming event. Here are the event details:\n\nEvent: [Event Name]\nDate: [Event Date]\nTime: 10:00 AM - 1:00 PM\nLocation: [Event Location]\n\nWe look forward to your presence at the event.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "13:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to send an email invitation to attendees for the upcoming event. Please draft an email with event details and send it to john.doe@example.com. Then, look for the movie titled 'Inception' and provide me with its ID. Lastly, book the first available meeting room for the event from 10AM to 1PM."}]}, "query_348_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "FilmTMDB.get_now_playing", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 2, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "15:00", "end_time": "17:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to check my email inbox for any new messages. After that, please provide me with a list of movies that are currently playing in theaters. Lastly, check if there are any meeting rooms available for booking within the time frame of 3PM to 5PM."}]}, "query_349_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a movie enthusiast, I want to explore more about the movie 'Inception'. Please provide me with its details, including the genres, release date, runtime, title, overview, vote average, and popularity. I would also like to read the user reviews for 'Inception'. Lastly, suggest me some movies similar to 'Inception' based on its genres and keywords."}]}, "query_349_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a time tracker, I need to keep track of the current time and the weekday. Please provide me with the current time in the format of YYYY-MM-DD HH:MM. Additionally, let me know the weekday for today."}]}, "query_34_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.create_file", "PPT.add_text_page", "PPT.save_file", "BINGMap.get_distance", "BINGMap.get_route", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "New York", "end": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "gas station", "places": "New York", "radius": 5000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "New York", "radius": 5000}}, {"id": 3, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "hotel", "places": "New York", "radius": 5000}}, {"id": 4, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "New York", "end": "Los Angeles"}}, {"id": 5, "prev": [4], "name": "PPT.create_file", "args": {"theme": "Road Trip", "abs_location": "outputs/RoadTrip.ppt"}}, {"id": 6, "prev": [0, 5], "name": "PPT.add_text_page", "args": {"title": "Road Trip Itinerary", "bullet_items": "1. Start: New York\n2. End: Los Angeles\n3. Total Distance: 4488.454 miles"}}, {"id": 7, "prev": [1, 5], "name": "PPT.add_text_page", "args": {"title": "Gas Stations Along the Route", "bullet_items": "- BP\n- Shell\n- Exxon\n- Gulf Gas Station\n- Shell"}}, {"id": 8, "prev": [2, 5], "name": "PPT.add_text_page", "args": {"title": "Restaurants Along the Route", "bullet_items": "- Benares\n- The Odeon\n- The Capital Grille\n- Tamarind Tribeca\n- Bubby's"}}, {"id": 9, "prev": [3, 5], "name": "PPT.add_text_page", "args": {"title": "Hotels Along the Route", "bullet_items": "- The Frederick Hotel\n- The Beekman, a Thompson Hotel\n- Millennium Downtown New York\n- Four Seasons Hotel New York Downtown\n- Smyth Tribeca"}}, {"id": 10, "prev": [5, 6, 7, 8, 9], "name": "PPT.save_file", "args": {}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Plan a road trip from New York to Los Angeles. Obtain the route between these two locations. Look up nearby gas stations, restaurants, and hotels along the route. Compile their names and addresses. Determine the total distance of the trip. Present this information in a PowerPoint presentation and save it in the path `outputs/RoadTrip.ppt`."}]}, "query_34_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.create_file", "PPT.add_text_page", "PPT.save_file", "BINGMap.get_distance", "BINGMap.get_coordinates", "BINGMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "Chicago"}}, {"id": 1, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "school", "latitude": 41.8832283, "longitude": -87.63240051, "radius": 1000}}, {"id": 2, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "park", "latitude": 41.8832283, "longitude": -87.63240051, "radius": 1000}}, {"id": 3, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "grocery store", "latitude": 41.8832283, "longitude": -87.63240051, "radius": 1000}}, {"id": 4, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Chicago", "end": "Muchin College Prep"}}, {"id": 5, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Chicago", "end": "Millennium Park"}}, {"id": 6, "prev": [0], "name": "BINGMap.get_distance", "args": {"start": "Chicago", "end": "Whole Foods Market"}}, {"id": 7, "prev": [6], "name": "PPT.create_file", "args": {"theme": "property_details", "abs_location": "outputs/PropertyDetails.ppt"}}, {"id": 8, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Property Details", "bullet_items": "Location: Chicago\nCoordinates: 41.8832283, -87.63240051"}}, {"id": 9, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Nearby Schools", "bullet_items": "- Muchin College Prep\n- Frances Xavier Warde School\n- The Henry George School Of Social Science, Chicago, Illinois\n- Noble Street Charter Schools\n- National Association of Charter School Authorizers (NACSA)"}}, {"id": 10, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Nearby Parks", "bullet_items": "- Millennium Park\n- Grant Park\n- D'Angelo Park\n- Heritage Green Park\n- Lakeshore East Park"}}, {"id": 11, "prev": [7], "name": "PPT.add_text_page", "args": {"title": "Nearby Grocery Stores", "bullet_items": "- Whole Foods Market\n- Trader Joe's\n- Mariano's\n- Bockwinkel's"}}, {"id": 12, "prev": [7, 8, 9, 10, 11], "name": "PPT.save_file", "args": {}}, {"id": 13, "prev": [12], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Obtain the coordinates of the first property in Chicago. Look up nearby schools, parks, and grocery stores. Include their details in a presentation about the property. Determine the distances between the property and these locations. Save this information in a PowerPoint presentation at the location `outputs/PropertyDetails.ppt`."}]}, "query_350_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.add_text_page", "PPT.save_file", "FilmTMDB.search_movie", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "clients@example.com", "title": "New Product Launch", "body": "Dear clients, we are excited to announce the launch of our new product! Please check the attached presentation for more details.", "attachment": "outputs/new_product.pptx"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "The Matrix"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "marketing", "abs_location": "outputs/marketing.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Movie Recommendation", "bullet_items": "You may also like The Matrix."}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check my unread emails and send an email to our clients titled 'New Product Launch' at clients@example.com, with the content 'Dear clients, we are excited to announce the launch of our new product! Please check the attached presentation for more details.' Attach the PPT file located at 'outputs/new_product.pptx'. Also, find information about the movie 'The Matrix' and add a text page to the PPT with the title 'Movie Recommendation' and the bullet item 'You may also like The Matrix.' Lastly, save the PPT file at the location 'outputs/marketing.pptx'."}]}, "query_351_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Weather.forecast_weather", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "San Francisco", "days": 1}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check my inbox and inform me if there are any new emails. Then, provide a list of the top-rated movies and check the weather forecast for October 17, 2023, in San Francisco."}]}, "query_351_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Weather.forecast_weather", "FilmTMDB.get_similar_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 1}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Review the emails in my inbox to see if there are any new event inquiries. Then, find movies similar to the film 'Inception' and check the weather forecast for October 17, 2023, in New York City."}]}, "query_352_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "FilmTMDB.search_movie", "FilmTMDB.get_movie_details", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "New Product Inquiry", "body": "Dear John, I hope this email finds you well. I wanted to inquire about your interest in our latest software solution. Please let me know if you have any questions. Best regards, Jane"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "The Matrix"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 603}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc."}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email to John Doe at john.doe@example.com with the subject 'New Product Inquiry' and the body reading 'Dear John, I hope this email finds you well. I wanted to inquire about your interest in our latest software solution. Please let me know if you have any questions. Best regards, Jane'. Then, find information about the movie 'The Matrix' on FilmTMDB and share the movie details with me. Finally, identify the stock ticker of the company 'Apple Inc.' using PolygonFinance and provide the ticker details."}]}, "query_352_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "Email.show", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 272}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 597}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Display all the emails I received in my inbox today. Show me a list of popular movies currently playing. Share a list of top-rated movies. Find movies similar to 'Inception' and get the user reviews for the movie 'Titanic'."}]}, "query_354_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john@example.com", "title": "Important Meeting", "body": "Hi John, I would like to schedule a meeting with you next week. Please let me know your availability. Best regards, Sam"}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_coordinate", "args": {"address": "城市, 123号 主街"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to see what's new in my inbox and send a crucial message. Please display the contents of my inbox. Following that, I would like to compose a message to john@example.com with the subject 'Important Meeting', the body should state 'Hi John, I would like to schedule a meeting with you next week. Please let me know your availability. Best regards, Sam'. Lastly, I need to know the geographical position of '123 Main Street, City'."}]}, "query_355_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.get_room_status", "ReserveMeeting.get_empty_room_with_time", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "attendee1@example.com, attendee2@example.com, attendee3@example.com", "title": "Meeting Details", "body": "Dear attendees, \n\nWe would like to invite you to a meeting tomorrow at 2:00 PM. The details are as follows: \n\nLocation: Conference Room A \nTopic: Project Planning \n\nPlease let us know if you have any conflicts. \n\nBest regards, \nEvent Planner"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "13:00", "end_time": "17:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an event planner, I need to organize meetings and book meeting rooms. I would like to view the emails in our inbox, including the sender, title, and content. Then, I want to send an email containing event details to all attendees at attendee1@example.com, attendee2@example.com, attendee3@example.com. After that, I'm interested in knowing the booking status of our meeting rooms. Also, I would like to check if there are any rooms available tomorrow in the afternoon. Lastly, I want to book a room for tomorrow, preferably in the afternoon. I would appreciate the confirmation of the booking."}]}, "query_356_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to review the unread emails in my inbox and also want to know what day of the week it is."}]}, "query_356_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "TimeTool.get_curr_time", "Email.send"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Urgent Delivery", "body": "Please confirm the delivery address as soon as possible."}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to draft an important email and would like to view the emails in my inbox first. Subsequently, I wish to send an email titled 'Urgent Delivery' with the content 'Please confirm the delivery address as soon as possible.' to john.doe@example.com. Lastly, can you tell me the current time?"}]}, "query_358_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Weather.get_weather_today", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_coordinate", "args": {"address": "天安门广场", "city": "北京"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Beijing"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to check my inbox and see if there are any new emails. If there are, please provide me with the sender, title, content, and time of the emails. Also, I would like to get the coordinates of Tiananmen Square in Beijing. Finally, please give me the current weather for Beijing."}]}, "query_358_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Weather.forecast_weather", "GaodeMap.get_route"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Package Delivery Notification", "body": "The tracking number for your package is AB1234CD."}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_route", "args": {"origin": "123 Main Street", "destination": "456 Elm Street"}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "current", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['GaodeMap.get_route', {'name': 'GaodeMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'origin', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to send an email to john.doe@example.com regarding their package delivery. Please send an email with the title 'Package Delivery Notification' and include the tracking number 'AB1234CD' in the body of the email. Additionally, I need to find the best route from my current location at 123 Main Street to John Doe's address at 456 Elm Street. Finally, please provide me with the weather forecast for the next 3 days."}]}, "query_358_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "GaodeMap.search_nearby", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "GaodeMap.search_nearby", "args": {"location": "123.456,789.012", "keywords": "restaurant"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "789 Pine Street"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to check my inbox and see if there are any new restaurant recommendations. If there are, please provide me with the sender, title, content, and time of the emails. Additionally, I would like to search for restaurants near my current location at 789 Pine Street. Finally, please give me the current weather."}]}, "query_359_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "GaodeMap.get_coordinate", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "advisor@example.com", "title": "Investment Portfolio", "body": "Please review my investment portfolio and provide recommendations for diversification"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_coordinate", "args": {"address": "789 Broadway, New York"}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_coordinate", "args": {"address": "789 布罗德威, 纽约"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc."}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an investor, I'd like to send an email to my financial advisor at advisor@example.com. The email should be titled 'Investment Portfolio' and contain 'Please review my investment portfolio and provide recommendations for diversification'. Moreover, get me the coordinates for the address '789 Broadway, New York'. Lastly, find the stock ticker symbol for the company 'Apple Inc.'."}]}, "query_35_0": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "BINGMap.search_nearby", "BINGMap.get_distance"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.search_nearby", "args": {"search_term": "hotels", "places": "Times Square, New York City", "radius": 2000}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 3}}, {"id": 2, "prev": [1], "name": "BINGMap.get_distance", "args": {"start": "Los Angeles", "end": "Times Square, New York City"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a trip to New York City. Can you find hotels near Times Square within a 2km radius? Also, could you tell me what the weather will be like in New York City for the next three days and calculate the distance from Los Angeles (assuming this as the current location) to Times Square?"}]}, "query_35_1": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_route", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_route", "args": {"start": "Central Park, New York City", "end": "Battery Park, New York City"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning to cycle from Central Park to Battery Park in New York City. Could you suggest the best route for this journey? I would also like to know what the weather is like in New York City today."}]}, "query_35_2": {"meta": {"prompt_type": "str", "API_list": ["BINGMap.get_distance", "Weather.get_weather_today", "BINGMap.get_coordinates"]}, "ground_truth": [{"id": 0, "prev": [], "name": "BINGMap.get_coordinates", "args": {"location": "10 Downing Street, London"}}, {"id": 1, "prev": [0], "name": "BINGMap.get_coordinates", "args": {"location": "1600 Pennsylvania Avenue, Washington D.C."}}, {"id": 2, "prev": [0, 1], "name": "BINGMap.get_distance", "args": {"start": "10 Downing Street, London", "end": "1600 Pennsylvania Avenue, Washington D.C."}}, {"id": 3, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "10 Downing Street, London"}}, {"id": 4, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "1600 Pennsylvania Avenue, Washington D.C."}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['BINGMap.get_coordinates', {'name': 'BINGMap.get_coordinates', 'description': 'Get the coordinates of a location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [], 'return_data': [{'name': 'latitude', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'description': 'the longitude of the location.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to evaluate the distance and weather conditions between two properties located at 10 Downing Street, London and 1600 Pennsylvania Avenue, Washington D.C. Could you provide me with the coordinates of these locations and calculate the distance between them? I would also like to know the current weather at both locations."}]}, "query_360_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "Email.show", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "James Hansen"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "NhWonoUAAAAJ"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "impacts of climate change on biodiversity"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am currently researching about climate change. Could you please display the emails in my inbox with the subject or body containing the term 'climate change'? Additionally, I need information about Professor James Hansen from Columbia University. Please provide his affiliation and list the three most recent articles written by him. Finally, could you help me search for recent papers on Google Scholar related to the impacts of climate change on biodiversity?"}]}, "query_360_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "hr@example.com", "title": "Job Application", "body": "Dear HR, I am writing to apply for the position advertised on your website. Attached is my resume for your consideration. Best, [Your Name]", "attachment": "/Documents/my_resume.pdf"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Professor John Smith"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "current job market in the field of data science"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am actively looking for job opportunities. Can you please help me send an email to 'hr@example.com' with the title 'Job Application' and the body 'Dear HR, I am writing to apply for the position advertised on your website. Attached is my resume for your consideration. Best, [Your Name]'. Attach my resume from the location '/Documents/my_resume.pdf'. After sending the email, could you assist me in retrieving the author ID of Professor John Smith from Harvard University? Finally, I would like to search for information on Google about the current job market in the field of data science."}]}, "query_361_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Email.show", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Research Update", "body": "Dear John,\n\nI hope this email finds you well. I wanted to share with you my latest findings on how artificial intelligence can be applied to climate change. I believe this research can have a significant impact on mitigating the effects of climate change.\n\nPlease find attached a document summarizing my findings.\n\nBest regards,\n[Your Name]", "attachment": "/path/to/attachment.pdf"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": false}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence and climate change"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to send an email to john.doe@example.com with the subject 'Research Update' and the content of the email should include my latest findings about how artificial intelligence can be applied to climate change. Please also show me the list of emails in my inbox. Additionally, I want to search for scholarly articles related to 'artificial intelligence and climate change' on Google Scholar."}]}, "query_362_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "TimeTool.get_curr_time", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to check my emails first. Please show me the unread emails in my inbox. After that, I want to search for scholarly articles related to 'machine learning'. Finally, provide me with the current time."}]}, "query_363_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "GoogleScholar.get_citation_format", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "johnson@example.com", "title": "Request for Access to Research Paper", "body": "Dear Professor Johnson,\n\nI hope this email finds you well. I am writing to request access to your research paper titled 'Advancements in Artificial Intelligence'. I am particularly interested in understanding the latest developments in this field and believe your paper will provide valuable insights.\n\nIn order to properly reference your paper, could you please provide me with the MLA citation format for it?\n\nThank you very much for your time and consideration. I look forward to your response.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Artificial Intelligence Applications"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "pw00iBU50qkJ"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "O6IuVag-XFMJ"}}, {"id": 4, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "fCb2Qh0657MJ"}}, {"id": 5, "prev": [4], "name": "PPT.create_file", "args": {"theme": "AI_Healthcare", "abs_location": "outputs/AI_in_Healthcare.ppt"}}, {"id": 6, "prev": [5], "name": "PPT.add_text_page", "args": {"title": "Applications", "bullet_items": "1. Disease diagnosis\n2. Treatment recommendation\n3. Patient monitoring\n4. Drug discovery\n5. Healthcare management"}}, {"id": 7, "prev": [6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email for Professor Johnson at johnson@example.com, asking for access to his research paper named 'Advancements in Artificial Intelligence'. Request MLA citation format for this article via email. Look up articles related to 'Artificial Intelligence Applications' on an academic search engine and retrieve the publication information and citation format for the top three articles. Prepare a presentation about 'Artificial Intelligence in Healthcare'. Add a slide in it named 'Applications' with a bullet list of the top 5 applications. Save the presentation as 'outputs/AI_in_Healthcare.ppt'."}]}, "query_363_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.get_image", "PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "GoogleScholar.get_citation_format", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "thompson@example.com", "title": "Request for Meeting", "body": "Dear Mr. Thompson,\n\nI hope this email finds you well. I am writing on behalf of our company to request a meeting with you to discuss potential collaborations.\n\nOur company specializes in providing innovative sales solutions to businesses. We have successfully assisted numerous companies in achieving their sales goals through our effective strategies and techniques.\n\nThe purpose of this meeting is to explore how we can collaborate and leverage our expertise to drive sales growth for both our organizations. We believe that a partnership between our companies would be mutually beneficial and lead to significant business opportunities.\n\nWe would appreciate the opportunity to meet with you at your convenience. Please let us know a suitable date and time for the meeting, and we will gladly accommodate your schedule.\n\nThank you for considering our request. We look forward to the possibility of working together.\n\nBest regards,\n[Your Name]\n[Your Company]\n", "attachment": null}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Sales Strategies"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "0_R4ae-lTqYJ"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "vp5MqwP06U4J"}}, {"id": 4, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "V6nSr3S_gVYJ"}}, {"id": 5, "prev": [4], "name": "PPT.create_file", "args": {"theme": "Sales Techniques", "abs_location": "outputs/Sales_Techniques.ppt"}}, {"id": 6, "prev": [5], "name": "PPT.add_text_page", "args": {"title": "Effective Sales Techniques", "bullet_items": "1. Building Rapport\n2. Active Listening\n3. Solution-Oriented Selling\n4. Upselling and Cross-Selling\n5. Follow-Up and Customer Relationship Management"}}, {"id": 7, "prev": [6], "name": "PPT.get_image", "args": {"keywords": "sales"}}, {"id": 8, "prev": [6, 7], "name": "PPT.add_text_image_page", "args": {"title": "Key Strategies", "bullet_items": "1. Building Rapport\n2. Active Listening\n3. Solution-Oriented Selling\n4. Upselling and Cross-Selling\n5. Follow-Up and Customer Relationship Management", "image": "outputs/1697991556.7474115.jpg"}}, {"id": 9, "prev": [8], "name": "PPT.save_file", "args": {}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email for Mr. Thompson at thompson@example.com, requesting a meeting to discuss potential collaborations. Include a brief introduction of our company and the purpose of the meeting in the email. Look up articles related to 'Sales Strategies' on an academic search engine and retrieve the publication information and citation format for the top three articles. Prepare a presentation about 'Effective Sales Techniques'. Add a slide in it named 'Key Strategies' with a bullet list of the top 5 strategies. Use an image related to sales as the background of this slide. Save the presentation as 'outputs/Sales_Techniques.ppt'."}]}, "query_365_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "-jKcSxGaARwJ"}}, {"id": 4, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "4FGY2CACfwAJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please display the first 5 emails in my inbox. Next, find scholarly articles related to 'climate change' on the academic research platform. Provide the titles of the first 3 articles along with their citation formats in MLA style."}]}, "query_365_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "GoogleScholar.get_author_id", "Email.show", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please display the first 5 emails in my inbox. Then, find the scholar ID for an author named 'John Smith' on the academic research platform. With the author ID, gather information about the author, including their name, affiliation, articles, and website. "}]}, "query_368_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.save_file", "PPT.add_text_page", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Product Inquiry", "body": "Hi John, I hope this email finds you well. I am reaching out to inquire about your interest in our latest product offerings. Please let me know if you have any questions. Best regards, Alex"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Product_Presentation.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut tristique lectus et lorem aliquam, at gravida ipsum dignissim. Sed eu risus lobortis, tincidunt mi non, scelerisque velit. Cras convallis tincidunt urna vitae dapibus. [SPAN] Sed auctor turpis nec nisi [SPAN] tempus, et venenatis magna interdum. [SPAN]"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me the unread emails in my inbox. Send an email to John Doe at john.doe@example.com with the title 'Product Inquiry' and the content 'Hi John, I hope this email finds you well. I am reaching out to inquire about your interest in our latest product offerings. Please let me know if you have any questions. Best regards, Alex'. Additionally, create a new presentation file with the title 'Product Presentation', add a text page with the title 'Introduction', and save the file to 'outputs/Product_Presentation.pptx'."}]}, "query_368_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.save_file", "PPT.add_text_page", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "marketingteam@example.com", "title": "New Campaign Ideas", "body": "Hi team, I would like to gather some new campaign ideas for our upcoming product launch. Please share your suggestions by the end of the week. Thank you!"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "Marketing", "abs_location": "outputs/Marketing_Campaign.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Key Messages", "bullet_items": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.[SPAN]Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.[SPAN]Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me all the emails in my inbox. Send an email to the marketing team(marketingteam@example.com) with the title 'New Campaign Ideas' and the content 'Hi team, I would like to gather some new campaign ideas for our upcoming product launch. Please share your suggestions by the end of the week. Thank you!'. Additionally, create a new presentation file with the title 'Marketing Campaign', add a text page with the title 'Key Messages', and save the file to 'outputs/Marketing_Campaign.pptx'."}]}, "query_369_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Weather.get_weather_today", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "johndoe@example.com", "title": "Product Inquiry", "body": "Hello John,\n\nI hope this email finds you well. I recently came across a technology article on Google that discussed a particular product, and I would like to request more details about it. Could you please provide me with additional information regarding this product?\n\nThank you in advance for your assistance.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "technology article about a product"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email to John Doe at johndoe@example.com with the subject 'Product Inquiry'. In the body of the email, request more details about a product discussed in a technology article found on Google. Check today's weather in New York City as well."}]}, "query_369_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "janesmith@example.com", "title": "Travel Itinerary", "body": "Dear Jane,\n\nI hope this email finds you well. I wanted to share with you the details of our upcoming trip.\n\nFlight Details:\nFlight Number: XYZ123\n\nHotel Booking Details:\nHotel Name: ABC Hotel\nBooking Reference: 123456\n\nPlease let me know if you need any further information.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "Weather.get_weather_today", "args": {"location": "Paris"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Write an email to Jane Smith at janesmith@example.com with the subject 'Travel Itinerary'. In the email, include the details about a particular planned trip, including flight number and hotel booking details. Also, find out the weather today in Paris."}]}, "query_36_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "professor@example.com", "title": "Regarding Assignment Submission", "body": "Dear Professor, I would like to discuss the deadline extension for the assignment. Best regards, John"}}, {"id": 2, "prev": [1], "name": "FileOperation.write_file", "args": {"file_path": "outputs/draft.txt", "text": "To: professor@example.com\nSubject: Regarding Assignment Submission\n\nDear Professor,\n\nI would like to discuss the deadline extension for the assignment.\n\nBest regards,\nJohn"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you display the unread emails in my inbox? I would like to draft an email to my professor at professor@example.com with the subject 'Regarding Assignment Submission' and the message body as 'Dear Professor, I would like to discuss the deadline extension for the assignment. Best regards, John'. Save this draft email to a file named 'draft.txt' in the 'outputs' folder."}]}, "query_36_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "FileOperation.read_file", "Email.send"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "editor@example.com", "title": "Article Submission", "body": "Dear Editor, I have written a new article on the topic of climate change. Please find the attached article for your review. Thank you. Best regards, Sarah"}}, {"id": 2, "prev": [1], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you display the emails in my inbox? I want to create an email addressed to my editor at editor@example.com. The email subject should be 'Article Submission' and the body should read 'Dear Editor, I have written a new article on the topic of climate change. Please find the attached article for your review. Thank you. Best regards, Sarah'. Also, could you read the content of the file located at 'data_v2/template_data/paper_readme.txt'?"}]}, "query_36_2": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "client1@example.com", "title": "New Product Launch", "body": "Dear Clients, We are excited to announce the launch of our new product. Please find attached the product brochure for more details. Thank you. Best regards, Mike"}}, {"id": 2, "prev": [1], "name": "Email.send", "args": {"address": "client2@example.com", "title": "New Product Launch", "body": "Dear Clients, We are excited to announce the launch of our new product. Please find attached the product brochure for more details. Thank you. Best regards, Mike"}}, {"id": 3, "prev": [2], "name": "FileOperation.write_file", "args": {"file_path": "outputs/product_launch_draft.txt", "text": "Dear Clients,\n\nWe are excited to announce the launch of our new product. Please find attached the product brochure for more details.\n\nThank you.\n\nBest regards,\nMike"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you show me the emails in my inbox? I would like to draft an email to my clients at client1@example.com and client2@example.com, with the subject 'New Product Launch' and the message body as 'Dear Clients, We are excited to announce the launch of our new product. Please find attached the product brochure for more details. Thank you. Best regards, Mike'. Please save this draft email to a file named 'product_launch_draft.txt' in the 'outputs' directory."}]}, "query_372_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.add_text_page", "ReserveMeeting.reserve", "PPT.save_file", "ReserveMeeting.get_empty_room_with_time", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "client@example.com", "title": "Product Inquiry", "body": "Hello, \n\nI hope this email finds you well. I wanted to reach out and see if you have any queries about our newest product. Please let me know if there's anything I can assist you with. \n\nBest regards, \n[Your Name]"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "sales", "abs_location": "outputs/Sales_Presentation.pptx"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_page", "args": {"title": "Product Features", "bullet_items": "Feature 1[SPAN]Feature 2[SPAN]Feature 3[SPAN]Feature 4"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Send an email to the client at 'client@example.com' with the title 'Product Inquiry', asking them if they have any queries about our newest product. Following the email, check for unread messages in the inbox. Confirm the availability of meeting rooms and reserve one for a sales presentation. Lastly, in the sales presentation, add a new slide titled 'Product Features' and save the presentation as 'outputs/Sales_Presentation.pptx'."}]}, "query_372_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.add_text_page", "ReserveMeeting.reserve", "PPT.save_file", "ReserveMeeting.get_empty_room_with_time", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "team_members@example.com", "title": "Project Update", "body": "Dear team members,\n\nI hope this email finds you well. I wanted to provide you with an update on our project progress and highlight some important milestones we have achieved.\n\nPlease find below a summary of the project status:\n\n1. Milestone 1: Completed on schedule and within budget.\n2. Milestone 2: Successfully implemented new feature XYZ.\n3. Milestone 3: Conducted user testing and received positive feedback.\n\nIf you have any questions or require further information, please let me know.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "10:00", "end_time": "12:00"}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "Project Update", "abs_location": "outputs/Project_Update_Presentation.pptx"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_page", "args": {"title": "Agenda", "bullet_items": "1. Introduction[SPAN]2. Project updates[SPAN]3. Discussion on next steps"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Send an email to the team members（team_members@example.com）with the title 'Project Update', updating them on the project progress and highlighting any important milestones achieved. After sending the email, check for unread messages in the inbox. Check the availability of meeting rooms from 10 AM to 12 PM today and reserve a room for a project meeting. Create a new presentation file with the theme 'Project Update'. Add a text slide to the presentation with the title 'Agenda' and list the topics to be discussed in the meeting. Save the presentation as 'outputs/Project_Update_Presentation.pptx'."}]}, "query_374_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PolygonFinance.get_ticker_news", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc."}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_news", "args": {"ticker": "AAPL"}}, {"id": 2, "prev": [0], "name": "Email.send", "args": {"address": "subscribers@example.com", "title": "Latest News: Apple Inc.", "body": "Dear Subscribers,\n\nHere are the latest news articles related to the stock of Apple Inc.:\n\n1. Proshares' Short QQQ Play Tops The List This Week - ETF Winners And Losers: Leveraged Flows\n\n2. Netflix price increase: Here’s how much the major streaming services are set to cost\n\n3. Citizens grows coast-to-coast reach with private-banking unit\n\n4. Israel-Hamas war threatens tech sector growth and innovation\n\n5. Microsoft’s acquisition of Activision makes Big Tech even bigger — and harder to rein in\n\nStay updated with the latest news!\n\nRegards,\nYour Company"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you please fetch the latest news articles related to the stock of Apple Inc. We need  this information to send email at subscribers@example.com."}]}, "query_374_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you please help us to book a meeting room for a team meeting today from 14:00 to 16:00. Also, we need to know the current booking status of all meeting rooms."}]}, "query_375_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.save_file", "PPT.add_text_page", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "email@msr-cmt.org", "title": "Re: Marketing Campaign Proposal", "body": "Dear sender, thank you for your proposal. We are interested in collaborating with your company. Could you please provide us with more details about the campaign? Looking forward to hearing from you soon."}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/marketing_campaign.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Campaign Goals", "bullet_items": "Increase brand awareness, Drive website traffic, Generate leads"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Examine the inbox and identify the most recent email with 'Marketing Campaign Proposal' as the subject. Respond to this email by saying: 'Dear sender, thank you for your proposal. We are interested in collaborating with your company. Could you please provide us with more details about the campaign? Looking forward to hearing from you soon.' Subsequently, create a new presentation named 'Marketing Campaign'. Add a text page titled 'Campaign Goals' with the bullet points 'Increase brand awareness', 'Drive website traffic', and 'Generate leads'. Finally, save the presentation to 'outputs/marketing_campaign.pptx'."}]}, "query_376_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "TimeTool.get_curr_time", "Weather.forecast_weather"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": false}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "New York", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Browse my emails for recent leads. Could you also tell me what time it is now and how the weather will be over the next three days in New York?"}]}, "query_376_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "TimeTool.get_curr_time", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "subscribers@example.com", "title": "New Travel Blog Post", "body": "Check out my latest blog post: [LINK_TO_BLOG_POST]"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Bali"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Dispatch an email to my subscribers with the eamil address :subscribers@example.com, the subject being 'New Travel Blog Post', and the body should include the link to my most recent blog post. Also, could you tell me the current time and the weather situation in Bali today?"}]}, "query_377_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PolygonFinance.get_ticker_news", "PolygonFinance.get_daliy_open_close", "TimeTool.get_curr_time", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Microsoft"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "MSFT", "date": "2023-10-17"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 5, "prev": [0, 1, 2, 3, 4], "name": "Email.send", "args": {"address": "example@gmail.com", "title": "Stock Information", "body": "Current Date and Time: 2023-10-21 12:05\n\nStock Information for AAPL:\n- Address: ONE APPLE PARK WAY, CUPERTINO, CA, 95014\n- Description: Apple designs a wide variety of consumer electronic devices, including smartphones (iPhone), tablets (iPad), PCs (Mac), smartwatches (Apple Watch), and AirPods, among others. In addition, Apple offers its customers a variety of services such as Apple Music, iCloud, Apple Care, Apple TV+, Apple Arcade, Apple Fitness, Apple Card, and Apple Pay, among others. Apple's products include internally developed software and semiconductors, and the firm is well known for its integration of hardware, software, semiconductors, and services. Apple's products are distributed online as well as through company-owned stores and third-party retailers.\n- List Date: 1980-12-12\n- Homepage URL: https://www.apple.com\n\nStock Symbol for Microsoft: MSFT\n\nOpening and Closing Prices for MSFT on October 17, 2023:\n- Opening Price: 329.59\n- Closing Price: 332.06\n\nLatest News Articles about the Stock Market:\n- Article 1: Don't give up on the 60:40 portfolio now — it has been a good insurance policy in an unpredictable stock market\n- Article 2: Is Tesla starting to look like just any old carmaker?\n- Article 3: Meta & Alphabet Earnings: Ad Revenue in Focus\n- Article 4: Why Bitcoin and Other Major Cryptocurrencies Rallied This Week\n- Article 5: Healthcare Realty Trust Announces Third Quarter Earnings Release Date and Conference Call"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Email me the current date and time, along with detailed information about the stock represented by 'AAPL'. My email address is example@gmail.com. I also want to find the stock symbol for Microsoft and get the opening and closing prices for that symbol on October 17, 2023. Lastly, I'd like to see the latest news articles about the stock market."}]}, "query_377_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PolygonFinance.get_ticker_news", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "eventattendees@example.com", "title": "Upcoming Event Notification", "body": "Dear attendees,\n\nThis is a reminder that the upcoming event will take place on [DATE]. Today is [WEEKDAY], and we hope to see you there!\n\nBest regards,\nYour Event Organizer"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Tesla"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TSLZ"}}, {"id": 3, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TSLA"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Send an email to eventattendees@example.com about the upcoming event, including the current weekday. Also, find the stock symbol for Tesla and get detailed information about that stock. Finally, show me the latest news articles about the stock market."}]}, "query_377_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PolygonFinance.get_ticker_news", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "researchteam@example.com", "title": "Project Updates", "body": "Please find attached the latest updates on our project."}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Amazon"}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AMZN"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Email my research team at researchteam@example.com with the latest updates on our project. Find the stock symbol for Amazon and get detailed information about that stock. Lastly, show me the latest news articles about the stock market."}]}, "query_381_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.print_detail", "FilmTMDB.get_similar_movies", "FilmDouban.coming_out_filter", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "复仇者联盟4：终局之战"}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299534}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 299534}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to explore new movies. Please provide me with the details of the first 5 upcoming films in China, including their titles, categories, and release dates. Also, print the details of the movie 'Avengers: Endgame' from Douban. Then, retrieve the top-level details of the first movie from TMDB. Lastly, get a list of similar movies based on the genre and keywords of this first movie from TMDB."}]}, "query_38_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "friend@example.com", "title": "Movie Recommendation", "body": "Have you seen the movie 'Inception'? I highly recommend it! 'Inception' is a mind-bending science fiction film directed by Christopher Nolan. It follows the story of a professional thief who steals information by infiltrating the subconscious of his targets. The movie is known for its stunning visual effects and complex narrative. If you enjoyed 'Inception', you might also like these similar movies:\n\n1. Interstellar\n2. The Matrix\n3. Shutter Island\n4. Source Code\n\nI have attached the movie poster of 'Inception' for your reference. Let me know what you think and if you'd like to watch it together!"}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email to my friend and his email address is friend@example.com. The subject should be 'Movie Recommendation'. The email should contain the question if my friend has seen the movie 'Inception', and it should suggest watching a movie similar to 'Inception'. The email should also include a detailed description of 'Inception' and a list of movies that are similar to 'Inception'. The movie poster of 'Inception' should be attached."}]}, "query_392_1": {"meta": {"prompt_type": "str", "API_list": ["FileOperation.write_file", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 968051}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 3, "prev": [2], "name": "FileOperation.write_file", "args": {"file_path": "movie_details.txt", "text": "In 1956 France, a priest is violently murdered, and Sister Irene begins to investigate. She once again comes face-to-face with a powerful evil."}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to stay updated on the latest movies in theaters. Please provide me with a list of movies that are currently playing. After I've chosen the third movie from the list, I'd like to read its user reviews. Additionally, I need to know its genres, release date, runtime, and a brief summary."}]}, "query_393_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "15:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "14:00", "end_time": "15:00"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for a team meeting today. Please check if there are any available rooms from 14:00 to 15:00. If there are, please reserve the first available room for that time slot."}]}, "query_395_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.save_file", "PPT.add_text_page", "FileOperation.write_file", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/inception_review.txt", "text": "Title: Inception\nRelease Date: 2010-07-15\nRuntime: 148 minutes\n\nOverview:\nCobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person's idea into a target's subconscious.\n\nRating: 8.365/10"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Inception.pptx"}}, {"id": 3, "prev": [0, 2], "name": "PPT.add_text_page", "args": {"title": "Inception", "bullet_items": "Release Date: 2010-07-15\nRuntime: 148 minutes\n\nOverview:\nCobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person's idea into a target's subconscious.\n\nRating: 8.365/10"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to create a review for the movie 'Inception'. Please fetch the details of the movie 'Inception' including release date, runtime, overview, and rating. Write these details into a file and save it as 'outputs/inception_review.txt'. In addition, create a presentation with the title 'Inception' and add a text page containing these movie details. Save this presentation as 'outputs/Inception.pptx'."}]}, "query_395_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FileOperation.write_file", "FilmTMDB.search_movie", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Joker"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 475557}}, {"id": 2, "prev": [1], "name": "FileOperation.write_file", "args": {"file_path": "outputs/joker_promotion.txt", "text": "Movie: Joker\n\nRelease Date: 2019-10-01\nRuntime: 122 minutes\n\nOverview: During the 1980s, a failed stand-up comedian is driven insane and turns to a life of crime and chaos in Gotham City while becoming an infamous psychopathic crime figure.\n\nRating: 8.166"}}, {"id": 3, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Joker.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Joker", "bullet_items": "Release Date: 2019-10-01[SPAN]Runtime: 122 minutes[SPAN]Overview: During the 1980s, a failed stand-up comedian is driven insane and turns to a life of crime and chaos in Gotham City while becoming an infamous psychopathic crime figure.[SPAN]Rating: 8.166"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to create a promotional article for the movie 'Joker'. Please fetch the details of the movie 'Joker' including release date, runtime, overview, and rating. Write these details into a file and save it as 'outputs/joker_promotion.txt'. In addition, create a presentation with the title 'Joker' and add a text page containing these movie details. Save this presentation as 'outputs/Joker.pptx'."}]}, "query_402_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "Modern", "abs_location": "outputs/blog_post.ppt"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.[SPAN]Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}}, {"id": 2, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "blog post image"}}, {"id": 3, "prev": [0, 2], "name": "PPT.add_text_image_page", "args": {"title": "Section 1", "bullet_items": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.[SPAN]Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", "image": "outputs/1697982636.6178656.jpg"}}, {"id": 4, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Section 2", "bullet_items": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.[SPAN]Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}}, {"id": 5, "prev": [0, 1, 3, 4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to create a visually appealing blog post. Please create a new PowerPoint presentation using the 'Modern' theme. Each page should represent a different section of the blog post. Add a title and some bullet points as content on each page. Additionally, add an image relevant to the content on the first page. Finally, save the PowerPoint presentation as 'outputs/blog_post.ppt'."}]}, "query_402_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FileOperation.read_file", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/movies.txt"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Default", "abs_location": "outputs/data_analysis.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Movie Analysis", "bullet_items": "1. The top movie genres\n2. Box office performance\n3. Audience ratings\n4. Trends in movie genres"}}, {"id": 3, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Box Office Performance", "bullet_items": "1. Highest-grossing movies\n2. Seasonal box office trends\n3. International box office"}}, {"id": 4, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Audience Ratings", "bullet_items": "1. Average ratings\n2. Ratings by demographic\n3. Ratings by genre"}}, {"id": 5, "prev": [4], "name": "PPT.get_image", "args": {"keywords": "trends in movie genres"}}, {"id": 6, "prev": [1, 5], "name": "PPT.add_text_image_page", "args": {"title": "Trends in Movie Genres", "bullet_items": "1. Action movies\n2. Comedy movies\n3. Drama movies\n4. Fantasy movies", "image": "outputs/1697982699.0718277.jpg"}}, {"id": 7, "prev": [1, 2, 3, 4, 6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a text file at 'data_v2/template_data/movies.txt' containing data analysis results. Please read this file and create a new PowerPoint presentation. Each page should represent a different aspect of the analysis. Add a title and the corresponding analysis findings as bullet points on each page. Additionally, search for an image related to the 'trends in movie genres' and add it to the third page. Finally, save the PowerPoint presentation as 'outputs/data_analysis.ppt'."}]}, "query_404_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_daliy_open_close", "PolygonFinance.get_ticker_news", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc."}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 2, "prev": [0], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-15"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in the stock of 'Apple Inc.'. Once I have the ticker, I would like to retrieve the most recent news articles related to the stock. Additionally, I need the open and close prices of the stock on October 15, 2023."}]}, "query_406_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "-jKcSxGaARwJ"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 3, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "MgNQRO9ui2YJ"}}, {"id": 4, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Lea Berrang-Ford"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_author_information", "args": {"author_id": "c9VqhF0AAAAJ"}}, {"id": 6, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Intergovernmental Panel on Climate Change"}}, {"id": 7, "prev": [6], "name": "GoogleScholar.get_author_information", "args": {"author_id": "TXdHj3MAAAAJ"}}, {"id": 8, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Richard G. Taylor"}}, {"id": 9, "prev": [8], "name": "GoogleScholar.get_author_information", "args": {"author_id": "43AJs30AAAAJ"}}, {"id": 10, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "James D. Ford"}}, {"id": 11, "prev": [10], "name": "GoogleScholar.get_author_information", "args": {"author_id": "_YOg3JQAAAAJ"}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic 'climate change'. Please find scholarly articles related to this topic. I need the titles of the top 3 papers, the number of citations they have received, and the publication information. Additionally, retrieve the citation format for each paper in MLA style. Lastly, I need to know about the authors of these papers, including their names, affiliations, a list of their articles (up to 3 articles), and their website URLs."}]}, "query_406_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for tomorrow at our main office. Find out if there are any rooms free between 10:00 AM and 12:00 PM. If there are any rooms free, book the first one available for that time slot."}]}, "query_407_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "TimeTool.get_curr_time", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Artificial Intelligence in Healthcare"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "N34ELelZkvEJ"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Create a research paper on 'Artificial Intelligence in Healthcare'. Find scholarly articles on this topic from Google Scholar and get the APA citation format of the most relevant article. Also, check the current time."}]}, "query_407_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "TimeTool.get_curr_time", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Impact of Social Media on Society"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an article about 'The Impact of Social Media on Society'. Search for the author named 'John Smith' who has written most on this topic on Google Scholar, obtain his author ID and retrieve his information. Finally, check the current time."}]}, "query_408_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "FileOperation.write_file", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "6HqcEiwmoJIJ"}}, {"id": 3, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "aTI2DQaQV8gJ"}}, {"id": 4, "prev": [1, 2, 3], "name": "FileOperation.write_file", "args": {"file_path": "outputs/ai_literature_review.txt", "text": "Artificial Intelligence Literature Review\n\n1. Title: Artificial intelligence in medicine\n   Citation Count: 1603\n   Publishing Details: Hamet, Pavel, and Johanne Tremblay. \"Artificial intelligence in medicine.\" Metabolism 69 (2017): S36-S40.\n\n2. Title: Artificial intelligence in medicine.\n   Citation Count: 835\n   Publishing Details: Ramesh, A. N., et al. \"Artificial intelligence in medicine.\" Annals of the Royal College of Surgeons of England 86.5 (2004): 334.\n\n3. Title: Causability and explainability of artificial intelligence in medicine\n   Citation Count: 975\n   Publishing Details: Holzinger, Andreas, et al. \"Causability and explainability of artificial intelligence in medicine.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 9.4 (2019): e1312."}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to do a study on the subject of artificial intelligence. Please find scholarly papers associated with artificial intelligence. Collect the titles, citation counts, and publishing details of the top three papers. Also, provide the MLA citation format for each paper. Save this information in 'outputs/ai_literature_review.txt'."}]}, "query_408_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Climate_Change.ppt"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Climate Change", "bullet_items": "1. Rising global temperatures\n2. Melting ice caps\n3. Extreme weather events\n4. Ocean acidification"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Causes of Climate Change", "bullet_items": "1. Greenhouse gas emissions\n2. Deforestation\n3. Industrial activities\n4. Agriculture"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "climate change impact"}}, {"id": 4, "prev": [2, 3], "name": "PPT.add_text_image_page", "args": {"title": "Impact of Climate Change", "bullet_items": "1. Rising sea levels\n2. Loss of biodiversity\n3. Food and water scarcity", "image": "outputs/1697797428.6362486.jpg"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have to present a talk on the subject of climate change. Please make a PowerPoint file named 'Climate_Change.ppt' in 'outputs/'. Add a title page with the title 'Climate Change' and a list of key points. Then, add a slide with the title 'Causes of Climate Change' and a list of the main causes. Lastly, add a slide with the title 'Impact of Climate Change' and an image that illustrates the impact."}]}, "query_40_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Email.show", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "colleague@example.com", "title": "Research Proposal", "body": "The purpose of the research: \n\nMethodologies used: \n\nExpected outcomes: "}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to send an email to my colleague at colleague@example.com with the subject 'Research Proposal'. In the email, include the following points: 'The purpose of the research', 'Methodologies used', and 'Expected outcomes'. After sending the email, I would like to view the unread emails in my inbox. Lastly, I would like to search for scholarly articles related to 'artificial intelligence' on Google Scholar."}]}, "query_40_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "GoogleScholar.get_author_id", "Email.show", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "author@example.com", "title": "Review Request", "body": "Dear Author,\n\nI hope this email finds you well. I am writing to request your participation in the review process for our upcoming publication. The submission deadline is approaching, and we would greatly appreciate your expertise in reviewing the manuscript.\n\nPlease find below the details:\n\n- Review Process: Please carefully read the manuscript and provide constructive feedback and suggestions.\n- Submission Deadline: [INSERT SUBMISSION DEADLINE]\n- Expected Feedback Time: [INSERT EXPECTED FEEDBACK TIME]\n\nThank you in advance for your valuable contribution.\n\nBest regards,\n[INSERT YOUR NAME]"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to send an email to an author at 'author@example.com'. The email should have the subject 'Review Request' and include details about 'the review process', 'submission deadline', and 'expected feedback time'. After sending the email, I want to see the unread emails in my inbox. Furthermore, I need to obtain the first author's ID for the author 'John Smith' and then retrieve the author's information, including their name, affiliation, up to 3 articles, and website."}]}, "query_413_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "FileOperation.write_file", "FileOperation.read_file", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/movies.txt"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/director_summary.pptx"}}, {"id": 2, "prev": [0, 1], "name": "PPT.add_text_page", "args": {"title": "Director's Biography", "bullet_items": "[SPAN]Name: Hayao Miyazaki[SPAN]Nationality: Japanese[SPAN]Born: January 5, 1941[SPAN]Notable Works: Spirited Away, My Neighbor Totoro, Princess Mononoke"}}, {"id": 3, "prev": [2], "name": "FileOperation.write_file", "args": {"file_path": "outputs/director_summary.txt", "text": "Hayao Miyazaki is a renowned Japanese film director. He was born on January 5, 1941. Miyazaki is best known for his animated films, including Spirited Away, My Neighbor Totoro, and Princess Mononoke. Throughout his career, he has received numerous awards and critical acclaim for his storytelling and artistic vision. His works often explore themes of nature, the environment, and the human spirit. Miyazaki's unique storytelling style and captivating visuals have made him one of the most celebrated directors in the world of animation."}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Read the content of the file at `data_v2/template_data/movies.txt`. Based on the content, find information about the movie director's biography. After that, write a short summary of the director's life and works to the file at `outputs/director_summary.txt`."}]}, "query_417_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "ReserveMeeting.reserve", "PPT.save_file", "ReserveMeeting.get_empty_room_with_time", "FileOperation.read_file", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/hotel.txt"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "18:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "18:00"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/event_schedule.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Event Details", "bullet_items": "Event Name: Annual Conference [SPAN] Date: October 18, 2023 [SPAN] Time: 14:00 - 18:00 [SPAN] Location: Room 103"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Read the content of the file at path `data_v2/template_data/hotel.txt`. Then, check if the first available meeting room is free for the event from 14:00 to 18:00. If available, reserve the room for the event. Create a presentation titled 'Event Schedule' and add a page with the event details. Finally, save the presentation as `outputs/event_schedule.pptx`."}]}, "query_417_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "ReserveMeeting.get_empty_room_with_time", "FileOperation.read_file", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/hotel.txt"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "16:00", "end_time": "18:00"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/research_presentation.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Research Presentation", "bullet_items": "Research notes"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Read the content of the file at path `data_v2/template_data/hotel.txt`. Then, check if the second available meeting room is empty from 16:00 to 18:00. If available, create a presentation titled 'Research Presentation' and add a page with the research notes. Finally, save the presentation as `outputs/research_presentation.pptx`."}]}, "query_419_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for October 21, 2023. Please check if there are any available rooms between 10:00 AM and 12:00 PM. If there are, reserve the first available room for that time slot. After the reservation is made, please provide me with the current status of all the meeting rooms."}]}, "query_41_0": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "sales@example.com", "title": "New Marketing Strategy Proposal", "body": "Dear team, I have prepared a new marketing strategy proposal for our upcoming campaign. Please review it and let me know your thoughts. Attached is the PDF file of the proposal. Regards, John Doe", "attachment": "path/to/proposal.pdf"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "latest marketing trends"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me the unread emails in my inbox. Then, send an email to sales@example.com with the title 'New Marketing Strategy Proposal' and the content 'Dear team, I have prepared a new marketing strategy proposal for our upcoming campaign. Please review it and let me know your thoughts. Attached is the PDF file of the proposal. Regards, John Doe'. Finally, search on Google for the latest marketing trends."}]}, "query_41_1": {"meta": {"prompt_type": "str", "API_list": ["Email.show", "Email.send", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "editor@example.com", "title": "Breaking News Story", "body": "Dear Editor, I have come across a breaking news story that I believe would be of great interest to our readers. Please let me know if you would like more information. Thank you, Jane Doe."}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "current political situation in the country"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check my inbox for new emails. Send an email to the editor with the subject 'Breaking News Story' and the body 'Dear Editor, I have come across a breaking news story that I believe would be of great interest to our readers. The editor's email address is editor@example.com. Please let me know if you would like more information. Thank you, Jane Doe.'. Also, perform a Google search to gather information on the current political situation in the country."}]}, "query_420_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FileOperation.write_file", "TimeTool.get_curr_time", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "outputs/journal.txt", "text": "2023-10-21 11:14\n"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Daily_Journal.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Journal Entry", "bullet_items": "Had a productive morning,Finished writing a chapter,Brainstormed new book ideas"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a writer, please obtain the current date and time and write this information to a file named 'journal.txt' in the 'outputs' directory. Then, create a new PowerPoint slide with the title 'Journal Entry'. Add a bullet list with the following reflections on the day: 'Had a productive morning', 'Finished writing a chapter', and 'Brainstormed new book ideas'. Save the PowerPoint presentation as 'Daily_Journal.ppt' in the 'outputs' directory."}]}, "query_420_1": {"meta": {"prompt_type": "str", "API_list": ["FileOperation.read_file", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/hotel.txt"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a teacher, please read the content of the file 'data_v2/template_data/hotel.txt'. Then, get the current weekday. If the weekday is Monday, create a new PowerPoint slide with the title 'Lesson Plan'. Add the content from the file as bullet points and include an image of a hotel room. Save the PowerPoint presentation as 'Monday_Lesson.ppt' in the 'outputs' directory."}]}, "query_427_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Godfather"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Shawshank Redemption"}}, {"id": 3, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Godfather Part II"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to research the top-rated movies and find scholarly articles related to them. Please provide me with the first, second, and third top-rated movies, including their title, release date, popularity, and rating. Also, search for scholarly articles on Google Scholar based on the titles of these movies and provide me with the article titles, the number of citations, and publication information."}]}, "query_427_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail", "GoogleScholar.get_citation_format"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "1"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am writing a paper about upcoming movies in China. Please provide me with the details of the upcoming movies, including their title, release date, category, region, and the number of people who want to watch them. Also, give me the description of the first movie on the list. Lastly, I need the MLA citation format for the first article listed on Google Scholar based on its organic search result ID."}]}, "query_428_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "FilmDouban.now_playing_out_filter", "FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmDouban.coming_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "Shang-Chi and the Legend of the Ten Rings"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 566525}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "Shang-Chi and the Legend of the Ten Rings official trailer"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find out which movies are currently showing and which ones will be releasing soon in China. Gather information about the movie 'Shang-Chi and the Legend of the Ten Rings'. Read some viewer reviews on the movie. Lastly, find the official trailer of the movie by performing a Google search."}]}, "query_42_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "09:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "09:00", "end_time": "12:00"}}, {"id": 2, "prev": [0], "name": "Email.send", "args": {"address": "client@example.com", "title": "Meeting Confirmation", "body": "Dear Client,\n\nI am writing to confirm our meeting scheduled for tomorrow. The meeting will take place between 9:00 AM and 12:00 PM.\n\nI am pleased to inform you that I have secured a meeting room for our discussion. The details of the room are as follows:\n\nRoom Number: 102\n\nPlease let me know if you have any questions or if there are any changes to our meeting schedule.\n\nLooking forward to meeting you.\n\nBest regards,\n[Your Name]"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Compose an email for the first client with the email address 'client@example.com'. The email should bear the title 'Meeting Confirmation'. Proceed to check for any available meeting rooms between 9:00 AM and 12:00 PM. If a room is found to be available, secure it for the meeting and include the room details in the email."}]}, "query_430_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find the popular movies that are currently screening in China and also provide the current date and time."}]}, "query_430_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "TimeTool.get_weekday", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Provide detailed information about the movie 'Inception', including its genres, release date, runtime, overview, average vote, and popularity. Also, determine the day of the week when it was released."}]}, "query_431_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FilmDouban.print_detail", "FilmTMDB.search_movie", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "Dune"}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "沙丘"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.search_movie", "args": {"query": "Dune"}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 438631}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/dune.pptx"}}, {"id": 5, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Dune", "bullet_items": "Summary: Paul Atreides, a brilliant and gifted young man born into a great destiny beyond his understanding, must travel to the most dangerous planet in the universe to ensure the future of his family and his people. As malevolent forces explode into conflict over the planet's exclusive supply of the most precious resource in existence-a commodity capable of unlocking humanity's greatest potential-only those who can conquer their fear will survive."}}, {"id": 6, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Details", "bullet_items": "Premiere Date: September 15, 2021\nGenres: Science Fiction, Adventure\nDuration: 155 minutes"}}, {"id": 7, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you fetch the comprehensive details of the film 'Dune' from Douban and craft a slide show about it? The presentation should contain the film's title, summary, premiere date, genres, and duration. Lastly, could you store the presentation at `outputs/dune.pptx`?"}]}, "query_431_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "PPT.add_text_image_page", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/inception.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Title", "bullet_items": "Inception"}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Summary", "bullet_items": "Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: 'inception', the implantation of another person's idea into a target's subconscious."}}, {"id": 6, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Premiere Date", "bullet_items": "July 15, 2010"}}, {"id": 7, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Genres", "bullet_items": "Action, Science Fiction, Adventure"}}, {"id": 8, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Rating", "bullet_items": "8.365"}}, {"id": 9, "prev": [8], "name": "PPT.get_image", "args": {"keywords": "Inception movie review"}}, {"id": 10, "prev": [3, 9], "name": "PPT.add_text_image_page", "args": {"title": "User Review 1", "bullet_items": "User: ohlalipop\nRating: A\nReview: When I first saw the trailer for this film, I knew that this would attract a lot of attention. Of course having Leonardo in the lead role helped a lot. From the trailer, I already know some things. Dreams. All about dreams. But what about dreams? Who are the other people? At first, I didn't really understand what was going on. It was all very confusing to me. But as the movie progresses, I start to understand it and I wanted to watch some more and know more what will happen in the end. The ending. That was, I think, the most intense ending of a movie in a year or probably more than a year. People actually screamed when the screen faded. And of course, people couldn't help but talk about it. It was an open-ended movie where people will have their own endings. My favorite part was Joseph Gordon's fight scene. I think he has the most fun part in this movie.", "image": "outputs/1697985912.345337.jpg"}}, {"id": 11, "prev": [10], "name": "PPT.get_image", "args": {"keywords": "Inception movie review"}}, {"id": 12, "prev": [3, 11], "name": "PPT.add_text_image_page", "args": {"title": "User Review 2", "bullet_items": "User: tmdb44006625\nRating: 8.0\nReview: Whether you watch Inception as a heist movie, a redemption story, or a sci-fi action picture, Christopher Nolan's tour de force of dreams will absolutely work its magic over you. The fact that the film works on so many levels (literally) is an attest not only to the visual cues that make it easy for the audience to follow but to how much in control of all the intricacies its filmmaker had to be.", "image": "outputs/1697985965.4999645.jpg"}}, {"id": 13, "prev": [12], "name": "PPT.get_image", "args": {"keywords": "Inception movie review"}}, {"id": 14, "prev": [3, 13], "name": "PPT.add_text_image_page", "args": {"title": "User Review 3", "bullet_items": "User: Varya\nRating: N/A\nReview: Is there anyone on earth who doesn't like Christopher Nolan’s films? Inception is one of his masterpieces. It’s a science fiction film released in 2010 and written by undoubtedly one of the greatest directors in Hollywood, Christopher Nolan, the creator of such stunning films as ‘Memento’, ‘The dark knight’, Prestige’ and ‘Interstellar’. the cast is impressive: the main roles are played by Leo DiCaprio, Ken Watanabe, Joseph Gordon-Levitt, Marion Cotillard, Ellen Page, Tom Hardy, Dileep Rao, Cillian Murphy, Tom Berenger, and Michael Caine.\n\nThe film is based on the idea of lucid dreams. In the story, the professionals of industrial espionage, using special techniques to steal valuable secrets from the depths of the subconscious during sleep, when the human mind is most vulnerable, learn a new technique - the ‘inception’ of ideas into the human mind through his dream. The main character - Dom Cobb is a talented thief, his rare abilities made him a truly valuable player in the treacherous world of espionage, but they also turned him into a perennial fugitive and stripped him of everything he had ever loved. One day Cobb has a chance to correct mistakes. His latest case can bring everything back, but for that he needs to do the impossible - inception.\n\nThere are so many good things about the film. The plot of the film is definitely mind-blowing. You won't be able to take your eyes off the screen. The soundtrack is written by Hans Zimmer, who is certainly one of the most sought-after composers. I think all his music is incredibly touching, dramatic and powerful. There are also some iconic songs we all know. The work on the special effects is done flawlessly, evidently, a lot of money was spent on this. The acting is also wonderful, Leo DiCaprio, who was the first actor to accept the offer to play in the film, has done an amazing job.\n\nThe only thing that viewers can find bad about this film is that it can be extremely difficult to perceive. If you don’t watch the film close enough you can simply get lost in all these jumping from dreams to reality.\n\nA curious fact is that Christopher Nolan released the film in 2010 but started working on it at the beginning of the 2000s! I would recommend everyone to see the film, even if you are not interested in sci-fi.", "image": "outputs/1697986044.9381223.jpg"}}, {"id": 15, "prev": [3, 4, 5, 6, 7, 8, 10, 12, 14], "name": "PPT.save_file", "args": {}}, {"id": 16, "prev": [15], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you search for the film 'Inception' on FilmTMDB and create a slide show about it? The presentation should contain the film's title, summary, premiere date, genres, and rating. Also, could you find user reviews for the film and add a text page for each review with the user's name, rating, and review? Lastly, could you store the presentation at `outputs/inception.pptx`?"}]}, "query_434_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_distance", "FilmDouban.now_playing_out_filter", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_distance", "args": {"origins": "116.397499,39.908722", "destination": "121.510556,31.239722"}}, {"id": 2, "prev": [1], "name": "GaodeMap.get_coordinate", "args": {"address": "长城"}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Please provide information on the three movies that are currently being screened in China. Next, I would like to know the distance and estimated travel time between the Forbidden City in Beijing and the Shanghai Tower in Shanghai, China. Lastly, I need the coordinates of the Great Wall of China for travel planning."}]}, "query_43_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "TimeTool.get_curr_time", "Email.show", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "professor2@example.com", "title": "Meeting Request for Project Discussion", "body": "Dear Professor, \n\nI hope this email finds you well. I am writing to request a meeting with you to discuss my project. I have been working on a project related to [project topic], and I would greatly appreciate your guidance and feedback.\n\nPlease let me know a convenient day and time for you to meet. I am available [provide your availability options]. If none of these times work for you, please suggest an alternative time that suits you better.\n\nThank you for considering my request. I look forward to meeting with you and discussing my project in detail.\n\nBest regards,\n[Your Name]", "attachment": ""}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a student, I want to go through my unread emails. Then, I'd like to send an email to my second professor regarding a meeting request for my project discussion and his email address is professor2@example.com. Please draft the email politely requesting for their availability. Finally, let me know what day of the week it is and the current time."}]}, "query_441_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "GoogleScholar.get_author_id", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "布莱特·摩根 导演"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Brett Morgen"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_author_information", "args": {"author_id": "pb077JYAAAAJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the top three films that are currently being screened in China. Obtain detailed information about the first movie and look up more information about its director on Google."}]}, "query_443_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "FilmDouban.print_detail", "TimeTool.get_curr_time", "FilmDouban.coming_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "涉过愤怒的海"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "惊奇队长2"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Chinese cinema"}}, {"id": 5, "prev": [4], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in the top 3 upcoming Chinese movies in the drama category. Can we also find some scholarly articles related to Chinese cinema? Also, could you tell me what the current date and time is?"}]}, "query_443_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "FilmDouban.now_playing_out_filter", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "organic_result_id"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to know about the top 3 movies currently playing in China. Could you also provide the MLA citation format for a scholarly article using its organic result ID? And, could you tell me the current date and time?"}]}, "query_444_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "GoogleScholar.get_author_id", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "星际穿越"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Artificial Intelligence"}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/study_presentation.pptx"}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Welcome to the study presentation.[SPAN]In this presentation, we will explore various topics related to artificial intelligence."}}, {"id": 6, "prev": [3, 4], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need detailed information about the movie 'Interstellar'. Also, I want information about the top three films now showing in China, including their release dates, titles, genres, regions and movie links. Then, I need the author ID for an author named 'John Doe'. I'd like to search for papers related to 'Artificial Intelligence' and get their titles, number of citations, organic result IDs, snippets, and publication info. Lastly, I need to add a text page to a PowerPoint presentation and save it to 'outputs/study_presentation.pptx'."}]}, "query_446_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "你好，李焕英"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "涉过愤怒的海"}}, {"id": 4, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "惊奇队长2"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to know about the newest movies that are going to be released in China. Can you give me information about the first three movies that are going to come out next, including when they will be released, what they are called, what type of movie they are, where they are from, and a link where I can find more details? Also, I'm interested in the movie '你好，李焕英'. Can you give me a summary of what it's about?"}]}, "query_447_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "沙丘"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "upcoming sci-fi movies"}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can I have detailed information for the film 'Dune'? I'm also interested in the release date and plot summary of the most recent films screened in China. Could you also show me the first three results when you search 'upcoming sci-fi movies' on Google?"}]}, "query_447_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "FilmDouban.now_playing_out_filter", "ReserveMeeting.get_empty_room_with_time", "FilmDouban.coming_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you provide a list of films currently being screened in China and the ones that will be released soon? Also, could you check the availability of the meeting rooms for today and reserve one for a team meeting from 14:00 to 16:00?"}]}, "query_448_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "FilmDouban.print_detail", "TimeTool.get_curr_time", "FilmDouban.coming_out_filter", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "红猪"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to keep up with the latest movies in China. Please provide me with the details of the top 3 upcoming movies in China, including their release date, title, category, region, and the number of people who want to watch them. Additionally, give me a brief description of one of the movies. Finally, search for more information about the movie on the internet. Also, let me know the current weekday."}]}, "query_448_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "珍·古道尔的传奇一生"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to review the movies currently playing in China. Please provide me with the details of the top 3 playing movies in China, including their release date, title, category, region, and the number of people who want to watch them. Additionally, give me a brief description of one of the movies. Finally, search for more information about the movie on the internet. Also, let me know the current time."}]}, "query_448_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "FilmDouban.coming_out_filter", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 2, "prev": [1], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 3, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "红猪 电影简介"}}, {"id": 4, "prev": [3], "name": "TimeTool.get_weekday", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on Chinese movies. Please provide me with the details of the top 3 upcoming movies in China, including their release date, title, category, region, and the number of people who want to watch them. Additionally, give me a brief description of one of the movies. Also, provide me with the details of the top 3 playing movies in China, including their release date, title, category, region, and the number of people who want to watch them. Finally, search for more information about the movies on the internet. Also, let me know the current weekday."}]}, "query_449_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.save_file", "PPT.add_text_page", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Top Movies", "abs_location": "outputs/top_movies.pptx"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "珍·古道尔的传奇一生是一部美国的纪录片、传记电影，由布莱特·摩根导演，简·古道尔、雨果·凡·拉维克、雨果·埃里克·路易斯·凡·拉维克等人主演。\n剧情简介：影片主角是在世界上拥有极高声誉的动物学家珍·古道尔，她二十多岁时前往非洲的原始森林，为了观察黑猩猩，在那里度过了三十八年的野外生涯，后来常年奔走于世界各地，呼吁人们保护野生动物、保护地球环境。 导演布莱特·摩根尤其擅长人物刻画，他从100多个小时从未公布过的珍·古道尔在野外考察和访谈的影像资料中选材剪辑，以第一人称视角，讲述了珍·古道尔年轻时在非洲研究黑猩猩的故事。伴随菲利普·格拉斯的迷人配乐，让观众感受到在那个仍由男性主导野外科研的年代，一个女人如何通过激情、奉献和毅力改变世界。影片还把人类的命运与动物交织在一起，大大强化了人与自然的关系。"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the current three most popular movies in China and create a PowerPoint presentation named 'Top Movies in China', incorporating the information of these movies on the initial page. Subsequently, find an extensive description of one of these movies and incorporate it as a text page in the presentation. Lastly, store the presentation at `outputs/top_movies.pptx` on my computer."}]}, "query_449_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FilmDouban.print_detail", "PPT.add_text_image_page", "FilmDouban.coming_out_filter", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Default", "abs_location": "outputs/upcoming_movies.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Upcoming Movies", "bullet_items": "1. 红猪\n2. 涉过愤怒的海\n3. 惊奇队长2\n4. 金手指\n5. 一闪一闪亮星星"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "红猪"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "红猪"}}, {"id": 5, "prev": [2, 4], "name": "PPT.add_text_image_page", "args": {"title": "红猪", "bullet_items": "喜剧 / 动画 / 冒险", "image": "outputs/1697984901.6902456.jpg"}}, {"id": 6, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "涉过愤怒的海"}}, {"id": 7, "prev": [6], "name": "PPT.get_image", "args": {"keywords": "涉过愤怒的海"}}, {"id": 8, "prev": [2, 7], "name": "PPT.add_text_image_page", "args": {"title": "涉过愤怒的海", "bullet_items": "剧情 / 犯罪 / 悬疑", "image": "outputs/1697984930.44951.jpg"}}, {"id": 9, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "惊奇队长2"}}, {"id": 10, "prev": [9], "name": "PPT.get_image", "args": {"keywords": "惊奇队长2"}}, {"id": 11, "prev": [2, 10], "name": "PPT.add_text_image_page", "args": {"title": "惊奇队长2", "bullet_items": "动作 / 奇幻 / 冒险", "image": "outputs/1697985210.8721418.jpg"}}, {"id": 12, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "金手指"}}, {"id": 13, "prev": [12], "name": "PPT.get_image", "args": {"keywords": "金手指"}}, {"id": 14, "prev": [2, 13], "name": "PPT.add_text_image_page", "args": {"title": "金手指", "bullet_items": "剧情 / 犯罪", "image": "outputs/1697985258.3357627.jpg"}}, {"id": 15, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "一闪一闪亮星星"}}, {"id": 16, "prev": [15], "name": "PPT.get_image", "args": {"keywords": "一闪一闪亮星星"}}, {"id": 17, "prev": [2, 16], "name": "PPT.add_text_image_page", "args": {"title": "一闪一闪亮星星", "bullet_items": "爱情 / 奇幻", "image": "outputs/1697985306.1349483.jpg"}}, {"id": 18, "prev": [1, 2, 5, 8, 11, 14, 17], "name": "PPT.save_file", "args": {}}, {"id": 19, "prev": [18], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for movies that will be released soon in China and craft a PowerPoint presentation named 'Upcoming Movies', presenting the information about these movies on the first page. Then, search for images related to these movies and add a new page with the title and image of these movies to the presentation. Finally, save the presentation in `outputs/upcoming_movies.pptx` on my computer."}]}, "query_44_0": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "PPT.get_image", "PPT.save_file", "PPT.add_text_image_page", "Email.show", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.show", "args": {"only_unread": true}}, {"id": 1, "prev": [0], "name": "Email.send", "args": {"address": "Microsoft CMT <email@msr-cmt.org>", "title": "Follow-up on our conversation", "body": "", "attachment": "outputs/Product_Presentation.ppt"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Product_Presentation.ppt"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "organic products"}}, {"id": 4, "prev": [2], "name": "PPT.add_text_image_page", "args": {"title": "Product Presentation", "bullet_items": "Unique features and advantages of our new line of organic products", "image": "outputs/1697609564.6319964.jpg"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look through new emails in my inbox. Whenever an unread email is found, respond back to the sender with 'Follow-up on our conversation' as the subject. In the response email, attach a slide titled 'Product Presentation' in a PPT, listing the unique features and advantages of our new line of organic products. Use the keyword 'organic products' to locate a relevant image and incorporate it onto the slide. Finally, save the PPT presentation as 'Product_Presentation.ppt' in the 'outputs/' directory."}]}, "query_450_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "大明风华"}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Beijing"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Provide information about the five movies that will be released soon in China, including their titles, categories, regions, release dates, and the number of people interested in them. Also, could you provide a description of the movie '大明风华'? Lastly, what is the weather forecast in Beijing for today, October 20, 2023?"}]}, "query_450_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "Guangzhou", "days": 3}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Can you provide information on the top three movies currently being shown in China, including their titles, categories, regions, release dates, and the number of people interested in them? Additionally, could you tell me the weather forecast for the next three days in Guangzhou, starting October 20, 2023?"}]}, "query_451_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "FilmDouban.coming_out_filter", "PolygonFinance.get_ticker_detail", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "阿凡达"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "FilmDouban.print_detail", "args": {"film_name": "阿凡达"}}, {"id": 4, "prev": [3], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "20th Century Fox"}}, {"id": 5, "prev": [4], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "FOX"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me the specifics of the movie 'Avatar'. Then, provide me with information about the top 3 films that are currently being shown in China. Also, I would like to know about the top 3 future action films that will be released in China. Then, find out who directed the movie 'Avatar'. Finally, find the stock symbol of the company that produced this movie and provide me with detailed information about this company."}]}, "query_451_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "盗梦空间"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "Inception"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Show me the details of the movie 'Inception'. Then, provide me with information about the top 3 films that are currently being shown in China. Also, find out which company produced the movie 'Inception'. Lastly, find the latest news articles related to this production company."}]}, "query_452_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "20:23", "end_time": "23:23"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": 101, "start_time": "20:23", "end_time": "23:23"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a meeting to arrange today. Could you look into the status of rooms 101, 102, and 103 for the upcoming duration starting from the current time and lasting for 3 hours? If any of these rooms are available, could you book it for the specified period?"}]}, "query_452_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_weekday", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you tell me what day of the week it is today, as well as the current time?"}]}, "query_453_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "ReserveMeeting.reserve", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "ReserveMeeting.get_empty_room_with_time", "PPT.add_text_image_page", "FilmDouban.coming_out_filter", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "沙丘"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "19:00", "end_time": "22:00"}}, {"id": 4, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": 101, "start_time": "19:00", "end_time": "22:00"}}, {"id": 5, "prev": [4], "name": "PPT.create_file", "args": {"theme": "Movie Recommendations", "abs_location": "outputs/movie_recommendations.pptx"}}, {"id": 6, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "Dune movie poster"}}, {"id": 7, "prev": [4], "name": "PPT.add_text_image_page", "args": {"title": "Dune", "bullet_items": "Genre: Science Fiction\nDirector: Denis Villeneuve\nStarring: Timothée Chalamet, Rebecca Ferguson, Zendaya\n\nDescription: 'Dune' is an epic science fiction film based on the novel of the same name by Frank Herbert. Set in a distant future, the story follows Paul Atreides, a young nobleman who becomes involved in a battle for control over the desert planet Arrakis.", "image": "outputs/1697981900.489096.jpg"}}, {"id": 8, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in watching the movie 'Dune' tonight. Could you fetch the details about this movie? Also, could you list the top three movies that are currently being screened in China as well as the top three movies that will be released soon in China? Afterwards, could you check the availability of meeting rooms from 7:00 PM to 10:00 PM and secure one for a team meetup? Lastly, could you prepare a PowerPoint presentation named 'Movie Recommendations' with each slide containing the title of the movie, its poster image, and a short description? Please save the presentation as 'outputs/movie_recommendations.pptx'."}]}, "query_453_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "ReserveMeeting.reserve", "PPT.save_file", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "ReserveMeeting.get_empty_room_with_time", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "18:00", "end_time": "22:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "18:00", "end_time": "22:00"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "Film Screening Event", "abs_location": "outputs/film_screening_event.pptx"}}, {"id": 4, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 5, "prev": [3, 4], "name": "PPT.add_text_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "珍·古道尔的传奇一生是一部美国的纪录片、传记电影，由布莱特·摩根导演，简·古道尔、雨果·凡·拉维克、雨果·埃里克·路易斯·凡·拉维克等人主演。\n\n剧情简介：影片主角是在世界上拥有极高声誉的动物学家珍·古道尔，她二十多岁时前往非洲的原始森林，为了观察黑猩猩，在那里度过了三十八年的野外生涯，后来常年奔走于世界各地，呼吁人们保护野生动物、保护地球环境。 导演布莱特·摩根尤其擅长人物刻画，他从100多个小时从未公布过的珍·古道尔在野外考察和访谈的影像资料中选材剪辑，以第一人称视角，讲述了珍·古道尔年轻时在非洲研究黑猩猩的故事。伴随菲利普·格拉斯的迷人配乐，让观众感受到在那个仍由男性主导野外科研的年代，一个女人如何通过激情、奉献和毅力改变世界。影片还把人类的命运与动物交织在一起，大大强化了人与自然的关系。"}}, {"id": 6, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 7, "prev": [5, 6], "name": "PPT.add_text_page", "args": {"title": "奥本海默", "bullet_items": "奥本海默是一部美国/英国的剧情、传记、历史电影，由克里斯托弗·诺兰导演，基里安·墨菲、艾米莉·布朗特、马特·达蒙等人主演。\n\n剧情简介：当我们为权力金钱焦虑、兴奋与愤怒时，却根本想象不到“他们”在谈论着怎样更重要的事情。"}}, {"id": 8, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 9, "prev": [7, 8], "name": "PPT.add_text_page", "args": {"title": "驯龙高手", "bullet_items": "驯龙高手是一部美国的动画、奇幻、冒险电影，由迪恩·德布洛斯导演，杰伊·巴鲁切尔、杰拉德·巴特勒、克雷格·费格森等人主演。\n\n剧情简介：维京岛国的少年小嗝嗝（杰伊•巴鲁切尔 Jay Baruchel 配音）是部落统领伟大的斯托里克（杰拉德·巴特勒 Gerard Butler 配音）的儿子，他非常想像自己的父亲一样亲手屠龙——这些飞龙是岛上维京人放牧羊群的主要天敌——但他每次出现在部落屠龙的战斗中都只给大家徒增烦恼。在一次对抗飞龙的战斗中，希卡普偷偷用射龙器击伤了一只最神秘的“夜之怒龙”，并背着族人放生、豢养，甚至驯服了这只龙，还给它起名“无牙”。希卡普的神秘行径引起了一同训练屠龙技巧的女孩阿斯特丽德（亚美莉卡·费雷拉 America Ferrera 配音）的怀疑。阿斯特丽德发现了希卡普的秘密，却同时被身骑“无牙”御风而飞的美妙体验所震撼。格雷决定在屠龙成人礼上向远征归来的斯托里克和族人讲明真相，说服大家放弃屠龙，却偏偏弄巧成拙，害得“无牙”被俘，一场更大的灾难就在眼前……"}}, {"id": 10, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "雪豹和她的朋友们"}}, {"id": 11, "prev": [9], "name": "PPT.add_text_page", "args": {"title": "雪豹和她的朋友们", "bullet_items": "雪豹和她的朋友们是一部中国大陆的纪录片，由奚志农导演，朱亚文主演。\n\n剧情简介：暂无剧情简介。"}}, {"id": 12, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "侏罗纪公园"}}, {"id": 13, "prev": [11, 12], "name": "PPT.add_text_page", "args": {"title": "侏罗纪公园", "bullet_items": "侏罗纪公园是一部美国的科幻、惊悚、冒险电影，由史蒂文·斯皮尔伯格导演，山姆·尼尔、劳拉·邓恩、杰夫·高布伦等人主演。\n\n剧情简介：哈蒙德（理查德•阿滕伯勒 Richard Attenborough  饰）立志要建立一个非同寻常的公园：恐龙将是这个公园的主角。他把众多科学家收归旗下，利用琥珀里面困住的远古蚊子体内的血液，提取出恐龙的基因信息，利用这些信息培育繁殖恐龙。结果如愿以偿，他把怒布拉岛建立成了一个恐龙公园，坚信可以从中赚取大钱。然而，科学家们则忧心忡忡。"}}, {"id": 14, "prev": [13], "name": "PPT.save_file", "args": {}}, {"id": 15, "prev": [14], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a film screening event and need to choose a film to showcase. Could you list the top five films currently being screened in China? Also, could you check the availability of meeting rooms from 6:00 PM to 10:00 PM for the event and secure one? Could you prepare a PowerPoint presentation named 'Film Screening Event' with each slide containing the title of a movie and a short description? Please save the presentation as 'outputs/film_screening_event.pptx'."}]}, "query_453_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "FilmDouban.print_detail", "ReserveMeeting.get_empty_room_with_time", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "寄生虫"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "17:00"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "Film Review", "abs_location": "outputs/film_review.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "Parasite movie poster"}}, {"id": 4, "prev": [2, 3], "name": "PPT.add_text_image_page", "args": {"title": "Parasite", "bullet_items": "", "image": "outputs/1697982188.8931384.jpg"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning to write a review for the movie 'Parasite'. Could you provide me with a detailed description and other relevant information about this movie? Also, could you check the availability of meeting rooms from 2:00 PM to 5:00 PM for a discussion with my team? Could you prepare a PowerPoint presentation titled 'Film Review' with a slide containing the title of the movie 'Parasite', its poster image, and a short description? Please save the presentation as 'outputs/film_review.pptx'."}]}, "query_454_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time", "Weather.forecast_weather", "FilmDouban.coming_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "15:00", "end_time": "18:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "15:00", "end_time": "18:00"}}, {"id": 3, "prev": [2], "name": "Weather.forecast_weather", "args": {"location": "<location>", "days": 3}}, {"id": 4, "prev": [0, 2, 3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a corporate event on October 27, 2023 and need to choose a comedy movie. Could you suggest 3 upcoming comedy movies? After that, I need to check if there is a meeting room available from 15:00 to 18:00 for the event. If there's one, please reserve it. Lastly, could you provide the weather forecast for the next 3 days?"}]}, "query_455_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for a team meeting. Can you check if there are any rooms available from 10:00 AM to 12:00 PM tomorrow? If so, could you reserve the first one that's available? Lastly, could you provide the current booking status of all the meeting rooms?"}]}, "query_455_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_daliy_open_close", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-01"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am looking to gather information about Apple Inc. and its stock. Can you search for the stock ticker for this company and provide me with detailed information about the ticker and the company? Moreover, can you let me know the opening and closing prices of Apple Inc. stock on October 1, 2023?"}]}, "query_456_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Top Movies", "abs_location": "outputs/top_movies.pptx"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "珍·古道尔的传奇一生, poster"}}, {"id": 4, "prev": [1, 3], "name": "PPT.add_text_image_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "导演: 布莱特·摩根\n主演: 简·古道尔, 雨果·凡·拉维克, 雨果·埃里克·路易斯·凡·拉维克\n评分: 9.2", "image": "outputs/1697986163.8543074.jpg"}}, {"id": 5, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 6, "prev": [5], "name": "PPT.get_image", "args": {"keywords": "奥本海默, poster"}}, {"id": 7, "prev": [1, 6], "name": "PPT.add_text_image_page", "args": {"title": "奥本海默", "bullet_items": "导演: 克里斯托弗·诺兰\n主演: 基里安·墨菲, 艾米莉·布朗特, 马特·达蒙\n评分: 8.9", "image": "outputs/1697986236.8698277.jpg"}}, {"id": 8, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "侏罗纪公园"}}, {"id": 9, "prev": [8], "name": "PPT.get_image", "args": {"keywords": "侏罗纪公园, poster"}}, {"id": 10, "prev": [1, 9], "name": "PPT.add_text_image_page", "args": {"title": "侏罗纪公园", "bullet_items": "导演: 史蒂文·斯皮尔伯格\n主演: 山姆·尼尔, 劳拉·邓恩, 杰夫·高布伦\n评分: 8.3", "image": "outputs/1697986306.798348.jpg"}}, {"id": 11, "prev": [1, 4, 7, 10], "name": "PPT.save_file", "args": {}}, {"id": 12, "prev": [11], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the top three movies that are currently being shown in China and formulate a presentation named 'Top Movies in China - Weekday Edition' incorporating an image of each movie on individual slides. The presentation should be saved to my computer under the file path `outputs/top_movies.pptx`."}]}, "query_456_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "TimeTool.get_curr_time", "PPT.add_text_image_page", "FilmDouban.coming_out_filter", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "Movie Extravaganza", "abs_location": "outputs/movie_event.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Movie Extravaganza", "bullet_items": "Date and Time: [SPAN]2023-10-22 22:53"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "movies"}}, {"id": 4, "prev": [2, 3], "name": "PPT.add_text_image_page", "args": {"title": "Movie Extravaganza", "bullet_items": "Image: [SPAN]outputs/1697986446.9011912.jpg", "image": "outputs/1697986446.9011912.jpg"}}, {"id": 5, "prev": [4], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 6, "prev": [4, 5], "name": "PPT.add_text_page", "args": {"title": "Top 3 Forthcoming Movies", "bullet_items": "1. [SPAN]红猪[SPAN] - 喜剧 / 动画 / 冒险[SPAN] - 11月17日\n2. [SPAN]涉过愤怒的海[SPAN] - 剧情 / 犯罪 / 悬疑[SPAN] - 11月25日\n3. [SPAN]惊奇队长2[SPAN] - 动作 / 奇幻 / 冒险[SPAN] - 11月10日"}}, {"id": 7, "prev": [6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Formulate a presentation for the upcoming movie event named 'Movie Extravaganza'. The current date and time should be appended on the first slide. Look for an image pertaining to movies and incorporate it into the second slide. Enumerate the top three forthcoming movies on the third slide. The presentation should be saved to my computer under the file path `outputs/movie_event.pptx`."}]}, "query_457_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FilmDouban.now_playing_out_filter", "Weather.forecast_weather"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "Shanghai", "days": 3}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you please provide the details of the top three movies that are presently being shown in China? Also, could you tell me what the current time is and the weather forecast for the coming three days in Shanghai?"}]}, "query_457_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FilmDouban.print_detail", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "流浪地球"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Chengdu"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you give me the detailed information about the movie '流浪地球'? Also, could you let me know the current time and today's weather in Chengdu?"}]}, "query_45_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "Weather.get_weather_today", "Email.show"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Email.send", "args": {"address": "john.doe@example.com", "title": "Meeting Confirmation", "body": "Dear John,\n\nI am writing to confirm our meeting on October 17, 2023, at 3 PM. The meeting will be held at our office. Please let me know if there are any changes or if you have any questions.\n\nBest regards,\n[Your Name]"}}, {"id": 1, "prev": [0], "name": "Email.show", "args": {"only_unread": true}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "New York"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a meeting with a potential client on October 17, 2023. Could you please send an email to john.doe@example.com to confirm the meeting time at 3 PM and location at our office? The title of the email should be 'Meeting Confirmation'. After sending the email, could you display the list of unread emails in my inbox? Also, I need to know the weather in New York on October 17, 2023. Could you provide me with the overall weather condition and average temperature?"}]}, "query_461_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "流浪地球"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I love Chinese cinema. Could you provide me with intricate details about the Chinese film 'The Wandering Earth'? Additionally, I'd like to know about the three most popular films currently being shown in China."}]}, "query_461_1": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "PolygonFinance.get_ticker_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Weather.forecast_weather", "args": {"location": "Tokyo", "days": 4}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "TSLA"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm looking forward to a trip to Tokyo on October 27, 2023. Could you provide the weather forecast for Tokyo from October 27 to October 30, 2023? Also, I'm looking to invest in Tesla, could you share some detailed information about this company?"}]}, "query_462_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_details", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299054}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 575264}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 575264}}, {"id": 5, "prev": [4], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 926393}}, {"id": 6, "prev": [5], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 926393}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am interested in popular movies. Could you provide me with the top three movies in terms of popularity? For each movie, I would like to know the title, release date, runtime, summary, average votes, and popularity level. Moreover, could you provide me with the top three user reviews for each movie?"}]}, "query_463_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Chef"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 212778}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 212778}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in the movie titled 'Chef'. Could you please provide information about this movie, including its genre, release date, runtime, summary, rating, and popularity? Additionally, I would like to read some reviews about this movie."}]}, "query_463_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299054}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you please provide a list of movies that are currently playing in theaters? For each movie, provide the title, release date, popularity score, and rating. Additionally, for the most popular movie, provide detailed information and reviews."}]}, "query_464_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get the details of the movie 'Inception', including its genres, release date, runtime, title, overview, vote average, and popularity. Then, find movies that are similar to 'Inception' based on its genres and keywords. Lastly, fetch the user reviews for 'Inception'."}]}, "query_464_1": {"meta": {"prompt_type": "str", "API_list": ["GaodeMap.get_route", "GaodeMap.get_distance", "GaodeMap.search_nearby", "GaodeMap.get_coordinate"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.get_coordinate", "args": {"address": "北京市政府"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_coordinate", "args": {"address": "上海市政府"}}, {"id": 2, "prev": [0], "name": "GaodeMap.get_distance", "args": {"origins": "116.407417,39.904172", "destination": "121.473657,31.230378"}}, {"id": 3, "prev": [0], "name": "GaodeMap.get_route", "args": {"origin": "116.407417,39.904172", "destination": "121.473657,31.230378"}}, {"id": 4, "prev": [0], "name": "GaodeMap.search_nearby", "args": {"location": "116.407417,39.904172", "keywords": "restaurant"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GaodeMap.get_route', {'name': 'GaodeMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'origin', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get the coordinates of Beijing City Hall. Next, calculate the distance and expected duration between Beijing City Hall and Shanghai City Hall using their respective coordinates. After that, find the route from Beijing City Hall to Shanghai City Hall. Finally, search for nearby restaurants around Beijing City Hall."}]}, "query_464_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check the current booking status of meeting rooms. Then, check if there are any available rooms from 2:00 PM to 4:00 PM. Finally, reserve the first available meeting room from 2:00 PM to 4:00 PM."}]}, "query_466_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "modern", "abs_location": "outputs/conference.ppt"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Main points of the presentation"}}, {"id": 2, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "technology"}}, {"id": 3, "prev": [1, 2], "name": "PPT.add_text_image_page", "args": {"title": "Slide 2", "bullet_items": "Image related to technology", "image": "outputs/1697979709.741887.jpg"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have to prepare a professional presentation for an upcoming conference. Could you create a new PowerPoint file with a modern theme and save it to the location 'outputs/conference.ppt'? Then, could you add a title page with the title 'Introduction' and a bullet list containing the main points of my presentation. Lastly, I'd like to add an image related to 'technology' to a new slide."}]}, "query_468_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_similar_movies", "PolygonFinance.search_stock_ticker"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Apple Inc."}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am researching the movie titled 'Inception'. Please search for this movie and provide me with its ID. Using the movie ID, fetch the list of similar movies based on genres and keywords. Additionally, I would like to search for the stock ticker given the company name 'Apple Inc.'."}]}, "query_46_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "疯狂元素城"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a film critic, I want to stay updated on upcoming films in China. Please provide me with the details of the top 3 upcoming films in China, including the release date, title, category, region, and the number of people who want to watch the film. Additionally, I would like to know the description of the film '疯狂元素城'."}]}, "query_470_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 278}}, {"id": 4, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 240}}, {"id": 5, "prev": [4], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 240}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a big fan of movies. Can you please provide me with the top 3 highest-rated movies? For each movie, I would like to know its title, release date, popularity, and rating. Additionally, I am interested in reading user reviews for each of these movies."}]}, "query_470_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Pavel Hamet"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "9zb7YrEAAAAJ"}}, {"id": 4, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "6HqcEiwmoJIJ"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a researcher, I need to gather information about the topic of 'artificial intelligence'. Please search Google Scholar for scholarly articles related to this topic. Provide me with the titles of the top 3 papers, the number of citations they have received, and the snippets of the papers. Moreover, I would like to obtain the MLA citation format for the first paper. Lastly, I need to find the author information for the first author of the first paper, including their name, affiliation, a list of their articles, and their website."}]}, "query_470_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 2, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "10:00", "end_time": "12:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for a team meeting tomorrow. Please check if there are any available rooms between 10:00 AM and 12:00 PM. If there are any available rooms, provide me with the list of room IDs. Additionally, I would like to know the current booking status of all the meeting rooms. Once I have the available room IDs, I want to reserve the first available room for the specified time slot."}]}, "query_471_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the top rated movies, then find the movie titled 'Inception' and provide its details."}]}, "query_471_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Pull up the list of popular movies. Then, find scholarly articles related to 'artificial intelligence' on Google Scholar. For the first article in the search results, provide the MLA citation format."}]}, "query_471_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 155}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "John Doe"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "12345"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Fetch the list of movies that are currently showing. Find movies similar to 'The Dark Knight'. Also, search for articles by 'John Doe' on Google Scholar and provide the author's information."}]}, "query_472_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FilmTMDB.get_now_playing", "PPT.create_file", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [0, 1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/movie_comparison.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Currently Playing Movies", "bullet_items": "Title: Expend4bles\nRelease Date: 2023-09-15\nPopularity: 2085.194\nRating: 6.3\n\nTitle: The Equalizer 3\nRelease Date: 2023-08-30\nPopularity: 1336.236\nRating: 7.2\n\nTitle: The Nun II\nRelease Date: 2023-09-06\nPopularity: 1145.546\nRating: 7\n\nTitle: Talk to Me\nRelease Date: 2023-07-26\nPopularity: 765.457\nRating: 7.2\n\nTitle: Sound of Freedom\nRelease Date: 2023-07-03\nPopularity: 831.226\nRating: 8.1"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Top Rated Movies", "bullet_items": "Title: The Godfather\nRelease Date: 1972-03-14\nPopularity: 111.806\nRating: 8.7\n\nTitle: The Shawshank Redemption\nRelease Date: 1994-09-23\nPopularity: 95.725\nRating: 8.7\n\nTitle: The Godfather Part II\nRelease Date: 1974-12-20\nPopularity: 57.588\nRating: 8.6\n\nTitle: Schindler's List\nRelease Date: 1993-12-15\nPopularity: 59.152\nRating: 8.6\n\nTitle: Dilwale Dulhania Le Jayenge\nRelease Date: 1995-10-20\nPopularity: 28.46\nRating: 8.6"}}, {"id": 5, "prev": [2, 3, 4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Create a presentation comparing the currently playing movies with the top-rated ones. For each movie, include its title, release date, popularity and rating. For each movie, create a separate slide and add the respective movie's details. Save this presentation as 'movie_comparison.pptx' in the 'outputs' directory."}]}, "query_474_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 278}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 240}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Godfather"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Shawshank Redemption"}}, {"id": 6, "prev": [5], "name": "GoogleScholar.search_google_scholar", "args": {"query": "The Godfather Part II"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm keen on movies and would like to discover some with high ratings. Could you provide the title, release date, popularity, and rating for the first, second, and third highest-rated movies? I would also appreciate if you could fetch user reviews for these three movies. And for my research, could you find scholarly articles related to these movies? Please search on Google Scholar using the movie titles and provide the titles of the papers and their publication details."}]}, "query_475_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_details", "GoogleSearch.serper_search", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "Expend4bles movie details"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm doing a study on trendy films. Can you provide me with a list of such movies? Also, find details for the first movie from the popular movies list and look up additional information about it on the internet."}]}, "query_477_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "FilmTMDB.get_similar_movies", "FilmTMDB.get_popular_movies", "PPT.add_text_image_page", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299054}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 299054}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/similar_movies.pptx"}}, {"id": 4, "prev": [3], "name": "PPT.get_image", "args": {"keywords": "The Lord of the Rings, Fellowship of the Ring, movie poster"}}, {"id": 5, "prev": [3, 4], "name": "PPT.add_text_image_page", "args": {"title": "The Lord of the Rings: The Fellowship of the Ring", "bullet_items": "[SPAN]Release Date: 2001-12-18[SPAN]Genres: Fantasy, Adventure, Action[SPAN]Vote Average: 8.4[SPAN]Popularity: 100.7", "image": "outputs/1697980460.458905.jpg"}}, {"id": 6, "prev": [5], "name": "PPT.get_image", "args": {"keywords": "Shrek 2, movie poster"}}, {"id": 7, "prev": [3, 6], "name": "PPT.add_text_image_page", "args": {"title": "Shrek 2", "bullet_items": "[SPAN]Release Date: 2004-05-19[SPAN]Genres: Animation, Comedy, Family[SPAN]Vote Average: 7.3[SPAN]Popularity: 91.8", "image": "outputs/1697980478.4666133.jpg"}}, {"id": 8, "prev": [3, 5, 7], "name": "PPT.save_file", "args": {}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the list of popular movies and select the first movie to get its details, including genres, release date, runtime, overview, vote average, and popularity. Then, find movies with similar genres and keywords as the first movie. After that, create a new PowerPoint presentation titled 'Similar Movies' and add a text image page for each similar movie, along with an image from the internet. Save the PowerPoint presentation to `outputs/similar_movies.ppt`."}]}, "query_477_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleSearch.serper_search", "FilmTMDB.get_movie_reviews", "PPT.create_file", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "The Godfather movie information"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "Movie Review", "abs_location": "outputs/movie_review.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "The Godfather", "bullet_items": "The Godfather is a 1972 crime drama film directed by Francis Ford Coppola. It is the first installment in The Godfather trilogy, chronicling the Corleone family under patriarch Vito Corleone (Marlon Brando) from 1945 to 1955. The film focuses on the transformation of Vito's youngest son, Michael Corleone (Al Pacino), from a reluctant family outsider to a ruthless mafia boss."}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve the list of top-rated movies and select the first movie to get its user reviews, including the user's name, rating, and review. Then, search for additional information about the first movie using Google search. Next, create a new PowerPoint presentation titled 'Movie Review' and add a text page with the first movie's title and its top review. Save the PowerPoint presentation to `outputs/movie_review.ppt`."}]}, "query_477_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleSearch.serper_search", "FilmTMDB.search_movie", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "Inception"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/movie_blog.ppt"}}, {"id": 4, "prev": [1, 3], "name": "PPT.add_text_page", "args": {"title": "Inception", "bullet_items": "Genres: Action, Science Fiction, Adventure\nRelease Date: 2010-07-15\nRuntime: 148 minutes\nOverview: Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: 'inception', the implantation of another person's idea into a target's subconscious.\nVote Average: 8.365\nPopularity: 70.983"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for a movie by the title 'Inception' and retrieve its movie ID. Then, get the details of the 'Inception', including its genres, release date, runtime, overview, vote average, and popularity. Next, search for additional information about the 'Inception' using Google search. Create a new PowerPoint presentation titled 'Movie Blog' and add a text page with the 'Inception' title and its details. Save the PowerPoint presentation to `outputs/movie_blog.ppt`."}]}, "query_478_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299054}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 575264}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 926393}}, {"id": 4, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 554600}}, {"id": 5, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 968051}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a film enthusiast, I want to explore popular movies. Please provide me with a list of the top 5 popular movies, including their titles, release dates, genres, and ratings. For each movie, also fetch the user reviews, including the reviewer's name, rating, and comments."}]}, "query_478_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am building a movie recommendation system. With 'Inception' as the movie title, please search for the movie and provide me with its details, including genres, release date, runtime, and rating. Also, fetch a list of similar movies based on genres and keywords."}]}, "query_479_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.search_stock_ticker", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "PolygonFinance.search_stock_ticker", "args": {"search": "Expend4bles"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.search_stock_ticker', {'name': 'PolygonFinance.search_stock_ticker', 'description': 'get the stock ticker given the company name', 'required_parameters': [{'name': 'search', 'type': 'STRING', 'description': 'search for terms within the ticker and/or company name'}], 'optional_parameters': [], 'return_data': [{'name': 'ticker', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get a list of popular movies, including the ID, title, release date, popularity, and rating. Then, search for the ticker symbol of the production company behind the first popular movie. Finally, get the detailed information about the company behind the obtained ticker symbol."}]}, "query_479_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "PolygonFinance.get_daliy_open_close", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "The Godfather"}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "AAPL", "date": "2023-10-20"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get a list of top-rated movies, including the ID, title, release date, popularity, and rating. Then, retrieve the user reviews for the first movie in the top-rated list. After that, search for the first movie's title on Google to find additional information. Finally, get the open and close prices of a stock symbol on October 20, 2023."}]}, "query_47_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_details", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 575264}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 575264}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in popular films. Could you gather a list of the top three trending films, including details like title, release date, popularity, and rating? Once we have the list, could you provide information about the first movie's genres, runtime, overview, and vote average? I would also like to read what users have to say about this first movie in their reviews."}]}, "query_47_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm preparing a blog post about a film. Could you help me find a film titled 'Inception' and share its ID with me? Once we have the ID, I would like to read what users have to say in their reviews for this film. Also, I'm interested in learning about films that are similar based on genres and keywords."}]}, "query_481_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to organize a meeting today. Could you first check the status of the meeting rooms for me? Then, I need to find a room that is available from 14:00 to 16:00. If there is a room available during this time, please reserve it for me."}]}, "query_482_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "Weather.get_weather_today", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "Los Angeles"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to know more about the movie 'Inception'. Please provide me with the details of the movie, including its genres, release date, runtime, title, overview, vote average, and popularity. Additionally, I would like to know the current weather in Los Angeles."}]}, "query_482_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "Weather.get_weather_today", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 3, "prev": [0, 1, 2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to discover some popular and top-rated movies. Please provide me with a list of the top 3 popular movies, including their titles, release dates, popularity, and ratings. Additionally, I would like to know the current weather in New York City."}]}, "query_483_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "The Shawshank Redemption"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to know about the movie 'The Shawshank Redemption'. Specifically, I'm interested in genres, release date, runtime, overview, vote average, and popularity."}]}, "query_483_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_detail", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to know the top rated movies. I'm also looking for information about the company with the ticker symbol for Apple Inc., specifically the address, homepage URL, description, and when it was listed."}]}, "query_483_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_news", "FilmTMDB.get_similar_movies", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 968051}}, {"id": 3, "prev": [2], "name": "PolygonFinance.get_ticker_news", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to know which movies are currently being shown in theaters. From that list, I'm interested in the third movie. I would like to see other movies that are similar to it based on genres and keywords. I would also like to see the most recent news related to the company with the AAPL ticker symbol."}]}, "query_484_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FilmTMDB.get_top_rated_movies", "PPT.create_file", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/top_rated_movies.ppt"}}, {"id": 3, "prev": [0, 1, 2], "name": "PPT.add_text_page", "args": {"title": "Top Rated Movies", "bullet_items": "Current Day: Monday"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to put together a presentation regarding the highest rated movies. Could you fetch this data? Also, could we put the current day of the week on the title slide? For each movie, the slide should have its title, release date, and rating. The final presentation should be saved in 'outputs/top_rated_movies.ppt'."}]}, "query_484_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "TimeTool.get_curr_time", "FilmTMDB.get_movie_reviews", "PPT.create_file", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "movie_reviews", "abs_location": "outputs/movie_reviews.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "User Review", "bullet_items": "User: futuretv\nRating: 10.0\nReview: The Godfather is a film considered by most to be one of the greatest ever made. From The American Film Institute to as voted by users on the Internet Movie Database (IMDB) it is consider to be one of the best. As a film that ranks as high as other masterpieces including Citizen Kane, Pulp Fiction and 12 Angry Men, The Godfather is an exceptional piece of cinema excellence that is flawless and is simply the pinnacle crime drama."}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "User Review", "bullet_items": "User: crastana\nRating: 10.0\nReview: The best movie ever...\nA masterpiece by the young and talented Francis Ford Coppola, about a Mob family and their drama, the story telling is perfect, the acting good, sometimes a little over the top in the case of Thalia Shire (the sister of the director)\nThe 70's were the best years for Hollywood."}}, {"id": 6, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "User Review", "bullet_items": "User: drystyx\nRating: 1.0\nReview: While I'm writing this, The Godfather is still beloved by people who love it simply because they are told they have to love it. \nIt's written by a mobster with the sole intention of depicting the lead mobsters as demi gods. Every line and every scene in the movie and the book is meant to intimidate people into thinking the 'Mafia' and really any mob, is a supernatural force.\nThis is a movie glorifying control freaks, and most critics are control freaks, and most critics are either in the mob or think they can join the mob.\nThe movie itself is dull and totally uninspiring, not to mention totally uninspired. For fifty years, the sheep have been cowing to the control freaks who tell them to love this movie that degrades them. \nThere just isn't anything favorable about this movie. It owes its success to people who have interests in the movie or think they can get brownie points with such people. It's totally Hollywood in its depressing nature, and even in the seventies it was a formula film."}}, {"id": 7, "prev": [3, 4, 5, 6], "name": "PPT.save_file", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm tasked with reviewing a few movies. Could you acquire the user reviews for the first movie on the top rated list? Also, please note down the current time. For each review, let's have a separate page showing the user's name, their rating, and their review. Once all pages are added, save the final file as 'outputs/movie_reviews.ppt'."}]}, "query_485_1": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "vacation destination", "days": 3}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find a movie to watch during vacation and obtain its details. Additionally, check the weather forecast for next three days at the vacation destination."}]}, "query_486_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "TimeTool.get_weekday", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for the movie 'Inception' and retrieve its details, including genres, release date, runtime, overview, vote average, and popularity. Also, get the current weekday."}]}, "query_486_1": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_ticker_detail", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_ticker_detail", "args": {"ticker": "AAPL"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_ticker_detail', {'name': 'PolygonFinance.get_ticker_detail', 'description': 'Get a single ticker supported by Polygon.io, with detailed information about the ticker and the company behind it', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': ''}], 'optional_parameters': [], 'return_data': [{'name': 'address', 'description': 'company address'}, {'name': 'homepage_url', 'description': ''}, {'name': 'description', 'description': 'A description of the company and what they do/offer'}, {'name': 'list_date', 'description': 'The date that the symbol was first publicly listed'}, {'name': 'name', 'description': 'The name of the asset'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get a list of the top-rated movies and retrieve user reviews for the first movie in the list. Additionally, retrieve the details of the ticker symbol 'AAPL'."}]}, "query_486_2": {"meta": {"prompt_type": "str", "API_list": ["PolygonFinance.get_daliy_open_close", "TimeTool.get_curr_time", "FilmTMDB.get_similar_movies", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "PolygonFinance.get_daliy_open_close", "args": {"ticker": "TSLA", "date": "2023-10-18"}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PolygonFinance.get_daliy_open_close', {'name': 'PolygonFinance.get_daliy_open_close', 'description': 'get the open, close and afterhours prices of a stock symbol on a certain date', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The exchange symbol that this item is traded under'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the requested open/close in the format YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'close', 'description': ''}, {'name': 'open', 'description': ''}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get a list of movies similar to the first movie in the top-rated movies list. Retrieve the open and close prices of the stock symbol 'TSLA' on October 18, 2023. Also, get the current time."}]}, "query_4_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 667316357375615620}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 887888251157143883}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 941597372112246343}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 667316357375615620}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 887888251157143883}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a real estate agent, I have a client who is searching for a rental property in New York. Could you please help me find some rental properties in New York and get the details for the first three properties? Also, it would be helpful to get the reviews for these properties."}]}, "query_51_0": {"meta": {"prompt_type": "str", "API_list": ["FileOperation.read_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "/home/user/documents/data.txt"}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am working on a project and I have a file located at 'data_v2/template_data/paper_readme.txt'. Could you retrieve the text inside the file for me?"}]}, "query_51_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "101", "start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to book a meeting room for today. Can you find any available rooms between 14:00 and 16:00? If room 101 is available for that time slot, please reserve it. After the reservation, could you provide me with the current booking status of all the rooms?"}]}, "query_52_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FileOperation.read_file", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "/home/user/documents/data.csv"}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have received a data file located at 'data_v2/template_data/hotel.txt' that I need to analyze. Please read the file and provide me with the contents. Additionally, let me know the current time and the weekday."}]}, "query_53_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FileOperation.read_file", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/paper_readme.txt"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "modern", "abs_location": "outputs/new_presentation.pptx"}}, {"id": 2, "prev": [0, 1], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "To make a sample Conference paper,[SPAN]copy the contents of this directory,[SPAN]somewhere"}}, {"id": 3, "prev": [2], "name": "PPT.save_file", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a writer, I need to read the content of an existing file and make changes to it. Please read the file located at 'data_v2/template_data/paper_readme.txt' and provide me with the text. After making the necessary changes, I want to create a new PowerPoint presentation with a modern theme. Please create a PowerPoint file with the theme and save it at 'outputs/new_presentation.pptx'. Additionally, I want to add a text page to the presentation with the title 'Introduction' and the bullet items from the first three lines of the read text."}]}, "query_53_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.add_text_page", "PPT.save_file", "FileOperation.read_file", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/movies.txt"}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "business", "abs_location": "outputs/marketing_presentation.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "About our Company", "bullet_items": "红猪, 惊奇队长2, 河边的错误"}}, {"id": 3, "prev": [0], "name": "PPT.get_image", "args": {"keywords": "红猪"}}, {"id": 4, "prev": [2, 3], "name": "PPT.add_text_image_page", "args": {"title": "About our Company", "bullet_items": "红猪, 惊奇队长2, 河边的错误", "image": "outputs/1697611023.579405.jpg"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a marketing specialist, I need to create a presentation with text and images. Please read the content of an existing file located at 'data_v2/template_data/movies.txt' and provide me with the text. After making the necessary changes to the text, I want to create a new PowerPoint presentation with a business theme. Please create a PowerPoint file with the theme and save it at 'outputs/marketing_presentation.pptx'. Additionally, I want to add a text page to the presentation with the title 'About our Company' and the bullet items from the first three lines of the read text. Please use an image from the first movie's poster for the page."}]}, "query_53_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FileOperation.write_file", "FileOperation.read_file", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/hotel.txt"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "data_v2/template_data/hotel.txt", "text": "{'text': 'Updated content of the file.'}"}}, {"id": 2, "prev": [1], "name": "PPT.create_file", "args": {"theme": "education", "abs_location": "outputs/lesson_presentation.pptx"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "Introduction", "bullet_items": "Line 1\nLine 2\nLine 3"}}, {"id": 4, "prev": [3], "name": "PPT.save_file", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a teacher, I need to prepare a lesson presentation. Please read the content of an existing file located at 'data_v2/template_data/hotel.txt' and provide me with the text. After making the necessary changes to the text, I want to create a new PowerPoint presentation with an education theme. Please create a PowerPoint file with the theme and save it at 'outputs/lesson_presentation.pptx'. Additionally, I want to add a text page to the presentation with the title 'Introduction' and the bullet items from the first three lines of the read text."}]}, "query_54_0": {"meta": {"prompt_type": "str", "API_list": ["FileOperation.read_file", "Weather.get_weather_today", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Weather.get_weather_today", "args": {"location": "Paris"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "weather.txt", "text": "Overall conditions: Sunny\nAverage temperature: 11.0°C"}}, {"id": 2, "prev": [1], "name": "FileOperation.read_file", "args": {"file_path": "weather.txt"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Document today's weather in Paris, including overall conditions and the average temperature, in a file titled 'weather.txt',save it to outputs location. Then, open the 'weather.txt' file and read its contents to ensure the information has been properly stored."}]}, "query_54_1": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "FileOperation.read_file", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FileOperation.write_file", "args": {"file_path": "event_weather.txt", "text": ""}}, {"id": 1, "prev": [0], "name": "Weather.forecast_weather", "args": {"location": "Seattle", "days": 3}}, {"id": 2, "prev": [1], "name": "FileOperation.read_file", "args": {"file_path": "event_weather.txt"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Generate a file titled 'event_weather.txt' and record the predicted weather in Seattle for the next three days, including the general conditions and average temperature. Save it to /outputs/event_weather.txt. Afterwards, open the 'event_weather.txt' file and read its contents to confirm that the information is accurate."}]}, "query_54_2": {"meta": {"prompt_type": "str", "API_list": ["Weather.forecast_weather", "Weather.get_weather_today", "FileOperation.write_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "Weather.get_weather_today", "args": {"location": "New York City"}}, {"id": 1, "prev": [0], "name": "FileOperation.write_file", "args": {"file_path": "current_weather.txt", "text": "Overall conditions: Clear\nAverage temperature: 11.7°C"}}, {"id": 2, "prev": [1], "name": "Weather.forecast_weather", "args": {"location": "New York City", "days": 2}}, {"id": 3, "prev": [2], "name": "FileOperation.write_file", "args": {"file_path": "future_weather.txt", "text": "Forecast for the next two days:\n\nDate: 2023-10-18\nOverall conditions: Overcast\nAverage temperature: 14.8°C\n\nDate: 2023-10-19\nOverall conditions: Partly cloudy\nAverage temperature: 15.1°C"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['FileOperation.write_file', {'name': 'FileOperation.write_file', 'description': 'write file to disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}, {'name': 'text', 'type': 'STRING', 'description': 'The text needed to write.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the status of the operation.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Record today's weather in New York City, including overall conditions and the average temperature, in a file titled 'current_weather.txt'. Then, form a new file named 'future_weather.txt' and document the predicted weather in New York City for the next two days, including the general conditions and average temperature.All documents should be saved to outputs location."}]}, "query_55_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve a selection of films currently showing in China. From this selection, choose the first film and gather detailed information about it, including genres, release date, runtime, title, overview, vote average, and popularity."}]}, "query_55_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 3, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 278}}, {"id": 4, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 240}}, {"id": 5, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 424}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the three most recent films that premiered in China. Then, find the first five films with the highest ratings. Lastly, gather user reviews for each of the top-rated films."}]}, "query_56_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "小丑"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a film critic and need to gather information about movies in China. Can you provide me with the details of the five upcoming and currently playing movies in China which have the highest ratings? I would like to know their release date, title, category, and region. Also, can you provide a brief description of the movie 'Joker'?"}]}, "query_57_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 4, "prev": [3], "name": "FilmDouban.print_detail", "args": {"film_name": "寄生虫"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Let's find out about the movies currently showing in China. Among them, I want to know the details of the three movies with the highest ratings, including their release dates, titles, categories, regions, and anticipated audience size. Also, could you give me the details about the movie 'Parasite'?"}]}, "query_57_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm interested in scholarly articles on the subject of machine learning. I would like to see the titles, number of citations, and snippets of the three most cited papers. Also, can you provide me with the MLA citation format for the paper with the title 'Deep Learning'?"}]}, "query_57_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_author_information", "GoogleScholar.get_author_id"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm working on an academic paper and I need information about the author John Doe. Could you find this author's ID, and then retrieve his name, affiliation, the titles of up to 3 articles he has written, and his website URL?"}]}, "query_58_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.print_detail", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "迷失之城"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "'The Lost City' movie news"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm preparing an article about forthcoming films in China. Could you find the details of the three most anticipated ones, including their release date, title, category, region, and the number of people who are eager to watch them? Furthermore, I'm particularly interested in 'The Lost City', can we find more news and details about this movie on the internet?"}]}, "query_59_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "10:00", "end_time": "12:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "10:00", "end_time": "12:00"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you check if there are any meeting rooms available tomorrow from 10:00 to 12:00? If there are, could you please reserve the first available room for me?"}]}, "query_59_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.print_detail", "args": {"film_name": "刺杀小说家"}}, {"id": 1, "prev": [0], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 3, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 4, "prev": [1], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you provide me with the details of the currently playing Chinese movie titled '刺杀小说家' and also the details of the first three Chinese movies that are currently showing?"}]}, "query_5_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "AirbnbSearch.search_property_by_place", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 27205}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 27205}}, {"id": 3, "prev": [2], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 4, "prev": [3], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": "909363587647904523"}}, {"id": 5, "prev": [4], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "909363587647904523"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a movie night with my friends in Los Angeles. Please provide me with details and user opinions for the movie 'Inception'. I'm also interested in finding out about movies that have a similar theme or storyline. Additionally, can you show me some available properties in Los Angeles that we could book for the night?"}]}, "query_5_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "AirbnbSearch.get_property_checkout_price", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 941597372112246343, "date": "2023-11-15"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 941597372112246343, "checkIn": "2023-11-15", "checkOut": "2023-11-20"}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm preparing for a trip to New York next month. I'd like to know about some highly-rated Airbnb properties in the city. Can you also let me know about the availability of these properties for my travel dates and the cost to stay there? In addition, I'd appreciate it if you could provide me with a list of well-received movies to watch during my trip."}]}, "query_5_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_reviews", "FilmTMDB.get_now_playing", "FilmTMDB.get_popular_movies", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 49634091}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 3, "prev": [2], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm studying the influence of movie releases on Airbnb bookings. Could you provide me with user opinions and specific details about Airbnb properties in San Francisco? Also, I'm interested in knowing about the movies which are presently being shown in theaters and those that are popular based on their popularity ratings."}]}, "query_60_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail", "TimeTool.get_curr_time", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "珍·古道尔的传奇一生"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 4, "prev": [3], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 5, "prev": [4], "name": "TimeTool.get_weekday", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you show me the details of the top 3 movies that are now in theaters in China? I'm interested in their release date, title, genre, country of origin, and how many people are interested in them. Furthermore, I would like to know the current date, time, and what day of the week it is."}]}, "query_60_1": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you provide me with details about the top 3 movies that are set to release soon in China? I'm looking for information on their release date, title, genre, country of origin, and how many people are interested in them. Also, I would like to know the current date and time."}]}, "query_60_2": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.coming_out_filter", "FilmDouban.now_playing_out_filter"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.coming_out_filter", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.coming_out_filter', {'name': 'FilmDouban.coming_out_filter', 'description': 'prints the details of the filtered [outNum] coming films in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'cate', 'type': 'STRING', 'description': 'the category of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning to write a blog post about the movie scene in China. Could you provide me with the details of the top 3 movies that are currently playing and the top 3 movies that are set to be released soon? I'm interested in their release date, title, genre, country of origin, and the number of people who are looking forward to them."}]}, "query_61_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FilmDouban.now_playing_out_filter", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/current_releases.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Current Cinema Releases", "bullet_items": "1. 珍·古道尔的传奇一生\n2. 奥本海默\n3. 驯龙高手"}}, {"id": 3, "prev": [2], "name": "PPT.add_text_page", "args": {"title": "珍·古道尔的传奇一生", "bullet_items": "导演：布莱特·摩根\n主演：简·古道尔，雨果·凡·拉维克，雨果·埃里克·路易斯·凡·拉维克"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "奥本海默", "bullet_items": "导演：克里斯托弗·诺兰\n主演：基里安·墨菲，艾米莉·布朗特，马特·达蒙"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_page", "args": {"title": "驯龙高手", "bullet_items": "导演：迪恩·德布洛斯 克里斯·桑德斯\n主演：杰伊·巴鲁切尔，杰拉德·巴特勒，克雷格·费格森"}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a film journalist, I am writing an article about the current cinema releases in China. I want to create a PPT presentation that includes details about the three most popular movies currently showing. The presentation should contain details such as the title, release date, genre, and a brief summary of each movie. Please save the presentation as 'current_releases.pptx' in the 'outputs' folder."}]}, "query_64_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_movie_reviews", "FilmTMDB.get_now_playing", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 968051}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 968051}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a movie enthusiast, I want to stay updated with the latest movies. Please provide me with a list of movies that are currently playing in theaters. For each movie, give me the title, release date, popularity, and rating. Additionally, I would like to get the detailed information and reviews for the first movie on the list. Please provide me with the movie details, including genres, runtime, overview, vote average, and popularity, as well as a few user reviews."}]}, "query_64_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_citation_format", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Artificial Intelligence in Robotics"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "LgoTNyB5W3kJ"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on a topic and I need to find relevant scholarly articles. Please search for articles related to 'Artificial Intelligence in Robotics' and provide me with a list of scholarly articles related to this topic. For each article, give me the title, number of citations, publication information, and a snippet of the paper. Additionally, I would like to get the MLA citation format for the first article on the list. Please provide me with the citation format using the article's ID."}]}, "query_64_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_author_id", "GoogleScholar.get_author_information", "FilmTMDB.get_popular_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Doe"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As an academic, I want to explore the popularity of movies and gather information about authors in my field. Please provide me with a list of popular movies ordered by popularity. For each movie, give me the title, release date, popularity, and rating. Additionally, I would like to search for an author by the name 'John Doe' and get their unique author ID. Once I have the author ID, I want to retrieve the author's name, affiliation, a few articles they have written, and their website URL."}]}, "query_65_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "GoogleSearch.serper_search", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "The Godfather cast"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Explore the popular movies on TMDB and choose the first movie. Retrieve the details of the first movie and search for additional information about the first movie using Google Search."}]}, "query_66_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time", "FilmTMDB.get_popular_movies", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_popular_movies", "args": {}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['FilmTMDB.get_popular_movies', {'name': 'FilmTMDB.get_popular_movies', 'description': 'Get a list of movies ordered by popularity', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by popularity, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'd like to suggest some films to my buddies. Could you supply a list of the highest-rated films as well as the most popular films? Also, could you see if there are any meeting rooms available from 2pm to 4pm and secure one for a discussion session?"}]}, "query_67_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "TimeTool.get_curr_time", "FilmTMDB.get_now_playing", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [0, 1, 3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Could you give me an update on the movies currently in theaters? Also, I'm interested in what the top-rated movies are at the moment. And please let me know what the current date and time is."}]}, "query_67_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "TimeTool.get_weekday", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Inception"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 27205}}, {"id": 2, "prev": [1], "name": "TimeTool.get_weekday", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm researching the movie titled 'Inception'. Can you help me find the first movie that comes up when you search for 'Inception'? Once we have that, I'd like to know more about it, including its genres, release date, runtime, overview, vote average, and popularity. Can you also tell me what day of the week it is today?"}]}, "query_67_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "TimeTool.get_weekday", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 155}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 155}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 155}}, {"id": 3, "prev": [2], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 4, "prev": [3], "name": "TimeTool.get_weekday", "args": {}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm crafting a review on 'The Dark Knight' and I need some extra details. Can you give me a list of the first few movies similar to 'The Dark Knight' in terms of genre and keywords? Also, I'd like to read some of the user reviews for 'The Dark Knight'. What's the current date and time?"}]}, "query_68_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "FilmTMDB.search_movie", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_similar_movies", "PPT.add_text_image_page", "PPT.create_file", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Avengers: Endgame"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 299534}}, {"id": 2, "prev": [0], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 299534}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 299534}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "Marvel", "abs_location": "outputs/Avengers_Presentation.pptx"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_image_page", "args": {"title": "Avengers: Endgame", "bullet_items": "Genres: Adventure, Science Fiction, Action\nRelease Date: 2019-04-24\nRuntime: 181 minutes\nOverview: After the devastating events of Avengers: Infinity War, the universe is in ruins due to the efforts of the Mad Titan, Thanos. With the help of remaining allies, the Avengers must assemble once more in order to undo Thanos' actions and restore order to the universe once and for all, no matter what consequences may be in store.\nVote Average: 8.262\nPopularity: 111.005", "image": "path/to/avengers_endgame_poster.jpg"}}, {"id": 6, "prev": [5], "name": "PPT.get_image", "args": {"keywords": "Avengers Endgame poster"}}, {"id": 7, "prev": [4], "name": "PPT.add_text_image_page", "args": {"title": "Avengers: Endgame", "bullet_items": "Genres: Adventure, Science Fiction, Action\nRelease Date: 2019-04-24\nRuntime: 181 minutes\nOverview: After the devastating events of Avengers: Infinity War, the universe is in ruins due to the efforts of the Mad Titan, Thanos. With the help of remaining allies, the Avengers must assemble once more in order to undo Thanos' actions and restore order to the universe once and for all, no matter what consequences may be in store.\nVote Average: 8.262\nPopularity: 111.005", "image": "outputs/1697732848.096676.jpg"}}, {"id": 8, "prev": [4, 5], "name": "PPT.save_file", "args": {}}, {"id": 9, "prev": [8], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a big fan of Marvel movies. Can you please find the movie \"Avengers: Endgame\" and get its details, including genres, release date, runtime, title, overview, vote average, and popularity? Also, obtain the user reviews for this movie. Additionally, find some movies that might be similar based on the genres and keywords of \"Avengers: Endgame\". Finally, make a PowerPoint presentation with a slide for each movie, including the movie title, a brief summary, and an image poster. Save the file as `outputs/Avengers_Presentation.pptx`."}]}, "query_68_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "FilmTMDB.get_now_playing", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_now_playing", "args": {}}, {"id": 1, "prev": [0], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/Now_Playing_Movies_Presentation.pptx"}}, {"id": 2, "prev": [1], "name": "PPT.add_text_page", "args": {"title": "Now Playing Movies", "bullet_items": "Title: The Nun II\nRelease Date: 2023-09-06\n\nTitle: Expend4bles\nRelease Date: 2023-09-15\n\nTitle: The Equalizer 3\nRelease Date: 2023-08-30\n\nTitle: Sound of Freedom\nRelease Date: 2023-07-03\n\nTitle: Talk to Me\nRelease Date: 2023-07-26"}}, {"id": 3, "prev": [2], "name": "PPT.save_file", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['FilmTMDB.get_now_playing', {'name': 'FilmTMDB.get_now_playing', 'description': 'Get a list of movies that are currently in theatres', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films playing, including id, title, release date, popularity and rating'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to make a presentation about the latest movies currently in theaters. Please provide me with a list of movies that are now playing, including their titles, release dates, popularity, and ratings. Then, make a PowerPoint presentation with a slide for each movie, displaying the movie title and its release date. Save this presentation at `outputs/Now_Playing_Movies_Presentation.pptx`."}]}, "query_69_0": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_movie_reviews", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 238}}, {"id": 3, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 278}}, {"id": 4, "prev": [3], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 278}}, {"id": 5, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 240}}, {"id": 6, "prev": [5], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 240}}, {"id": 7, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 424}}, {"id": 8, "prev": [7], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 424}}, {"id": 9, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 19404}}, {"id": 10, "prev": [9], "name": "FilmTMDB.get_movie_reviews", "args": {"movie_id": 19404}}, {"id": 11, "prev": [10], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_movie_reviews', {'name': 'FilmTMDB.get_movie_reviews', 'description': 'Get the user reviews for a movie', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am a film enthusiast and I am interested in exploring some of the highest-rated movies. Could you provide me with a roster of films ranked by their ratings? For each film, I would like to know the details such as the genre, date of release, duration, title, summary, average votes, and popularity. I would also appreciate it if I could read a few user reviews for each film."}]}, "query_69_1": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.search_movie", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.search_movie", "args": {"query": "Paris"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 8279}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 8279}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.search_movie', {'name': 'FilmTMDB.search_movie', 'description': 'Search for movies by their original, translated and alternative titles', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the title of the movie'}], 'optional_parameters': [], 'return_data': [{'name': 'id', 'description': 'movie ID of the searched movie'}, {'name': 'title', 'description': ''}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Being a travel blogger, I am interested in finding films that feature 'Paris'. Could you assist me in searching for such movies and provide me with their IDs and titles? I would also like to understand the details of each movie, including the genre, release date, duration, title, synopsis, average vote, and popularity. Furthermore, I would appreciate it if you could provide me with a list of movies that are similar based on their genres and keywords."}]}, "query_70_0": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GaodeMap.get_distance", "GaodeMap.search_nearby", "GaodeMap.get_coordinate", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.get_coordinate", "args": {"address": "北京"}}, {"id": 1, "prev": [0], "name": "GaodeMap.get_coordinate", "args": {"address": "上海"}}, {"id": 2, "prev": [0, 1], "name": "GaodeMap.get_distance", "args": {"origins": "116.407526,39.904030", "destination": "121.473701,31.230416"}}, {"id": 3, "prev": [2], "name": "GaodeMap.search_nearby", "args": {"location": "121.473701,31.230416", "keywords": "attractions"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Qian Zhongshu Shanghai"}}, {"id": 5, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "Qian Zhongshu"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Organize a journey from Beijing to Shanghai, determining the path and length between these two cities. Additionally, look for attractions around Shanghai and gather details about a well-known author, let's say 'Qian Zhongshu', who has penned down Shanghai's rich past."}]}, "query_70_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.get_author_id", "GaodeMap.search_nearby", "GaodeMap.get_coordinate", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.get_coordinate", "args": {"address": "时代广场, 纽约"}}, {"id": 1, "prev": [0], "name": "GaodeMap.search_nearby", "args": {"location": "116.674652,28.996885", "keywords": "eateries"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Gordon Ramsay"}}, {"id": 3, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "Tr1ocpcAAAAJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['GaodeMap.get_coordinate', {'name': 'GaodeMap.get_coordinate', 'description': 'Get the coordinate of a location. Param must be in Chinese', 'required_parameters': [{'name': 'address', 'type': 'STRING', 'description': 'the location need to get coordinates.'}], 'optional_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'specify the city to search'}], 'return_data': [{'name': 'coordinate', 'description': 'coordinate of the location, format with (lon, lat)'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for eateries around the location 'Times Square, New York' and get their locations. Also, find out the coordinates of Times Square, New York. Gather information about the renowned chef 'Gordon Ramsay', including their affiliation, published cookbooks, and website URL."}]}, "query_71_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "GaodeMap.get_route", "GaodeMap.get_distance", "GaodeMap.search_nearby"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GaodeMap.search_nearby", "args": {"location": "121.490872,31.241364", "keywords": "restaurant"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "What are the reviews for 德克士(外滩观景平台店) in Shanghai?"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "What are the reviews for 荐慤堂·海鲜自助 in Shanghai?"}}, {"id": 3, "prev": [2], "name": "GaodeMap.get_distance", "args": {"origins": "121.490872,31.241364", "destination": "121.490784,31.243674"}}, {"id": 4, "prev": [3], "name": "GaodeMap.get_route", "args": {"origin": "121.490872,31.241364", "destination": "121.490784,31.243674"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['GaodeMap.get_route', {'name': 'GaodeMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'origin', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['GaodeMap.get_distance', {'name': 'GaodeMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'origins', 'type': 'STRING', 'description': \"coordinate of the start location, format with 'lon,lat'\"}, {'name': 'destination', 'type': 'STRING', 'description': \"coordinate of the end location, format with 'lon,lat'\"}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in KM'}, {'name': 'duration', 'description': 'expected time in minutes'}]}], ['GaodeMap.search_nearby', {'name': 'GaodeMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': \"The coordinate of the location, format with 'lon,lat'\"}, {'name': 'keywords', 'type': 'STRING', 'description': 'The search type, e.g., restaurant, school'}], 'optional_parameters': [], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm in Shanghai, specifically at the location of the Bund, and I'm looking for a good place to have dinner tonight. Can you recommend the first popular restaurant nearby?"}]}, "query_76_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Intergovernmental Panel On Climate Change"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "TXdHj3MAAAAJ"}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "What are the causes of climate change?"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find scholarly articles on the topic of 'climate change'. Retrieve the title, number of citations, snippets, and publication information for the top 3 articles. Also, get the MLA citation format for the second article. Determine the author ID for the second article and retrieve the author's name, affiliation, top 3 articles, and website. Additionally, perform a search to answer the question 'What are the causes of climate change?'"}]}, "query_76_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleSearch.serper_search", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence ethics"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "ZU068u3hYnIJ"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "David Leslie"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "ZT7oIWwAAAAJ"}}, {"id": 4, "prev": [3], "name": "GoogleSearch.serper_search", "args": {"query": "What are the ethical implications of AI in healthcare?"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find scholarly articles on the topic of 'artificial intelligence ethics'. Retrieve the title, number of citations, snippets, and publication information for the third articles. Also, get the MLA citation format for the third article. Determine the author ID for the third article and retrieve the author's name, affiliation, top 3 articles, and website. Lastly, perform a search to find the answer to the question 'What are the ethical implications of AI in healthcare?'"}]}, "query_77_0": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "GoogleScholar.search_google_scholar", "ReserveMeeting.get_empty_room_with_time", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "13:00", "end_time": "14:00"}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "13:00", "end_time": "14:00"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "pdcI9r5sCJcJ"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Retrieve information about author John Smith and find out the citation format for his most cited paper. Additionally, look for scholarly articles pertaining to the subject 'machine learning'. Lastly, schedule a meeting room for a research discussion this afternoon."}]}, "query_77_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "GoogleScholar.search_google_scholar", "ReserveMeeting.get_empty_room_with_time", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Mary Johnson"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "deep learning"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_citation_format", "args": {"q": "0qfs6zbVakoJ"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Identify the author ID for Mary Johnson, who is the primary author of a specified paper. Subsequently, perform a search for academic articles that focus on 'deep learning', and obtain the citation format for one of these articles. Lastly, find an available meeting room between the hours of 2pm and 4pm today, and book it for a group study session."}]}, "query_77_2": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "GoogleScholar.search_google_scholar", "ReserveMeeting.get_empty_room_with_time", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Jane Brown"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_information", "args": {"author_id": "JaFl1IoAAAAJ"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "role and impact of academic libraries in modern education"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "09:00", "end_time": "11:00"}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.reserve", "args": {"room_id": "102", "start_time": "09:00", "end_time": "11:00"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "JY-va7uEmP8J"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Gather detailed information about author Jane Brown and determine the citation format for her most cited paper. Furthermore, conduct a search for scholarly articles that discuss the role and impact of 'academic libraries' in modern education. Lastly, check for an available meeting room from 9am to 11am for a staff meeting and reserve it."}]}, "query_78_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "TimeTool.get_curr_time", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "climate change", "limit": 3}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "selJwfIN0t8J"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Change, Intergovernmental Panel On Climate"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "TXdHj3MAAAAJ"}}, {"id": 4, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Are we adapting to climate change?"}}, {"id": 5, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Global climate change impacts in the United States"}}, {"id": 6, "prev": [5], "name": "TimeTool.get_weekday", "args": {}}, {"id": 7, "prev": [6], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research on the topic of climate change. Please find scholarly articles related to climate change and provide me with the titles of the top 3 papers, the number of citations they have received, their organic results' ids, snippets from these papers, and their publication information. I would also like the MLA citation format for the first paper. Additionally, could you get the author's information for these papers, including their names, affiliations, up to 3 articles by each author, and their homepage URLs? Lastly, could you tell me what the current weekday and time is?"}]}, "query_78_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "TimeTool.get_curr_time", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "renewable energy"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "Dfr79tjK7j4J"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Robert Gross"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "HR5pAakAAAAJ"}}, {"id": 4, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "b8af6XDcmWoJ"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "6Vn-Xp2UGfgJ"}}, {"id": 6, "prev": [5], "name": "TimeTool.get_weekday", "args": {}}, {"id": 7, "prev": [6], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 8, "prev": [7], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I have a research project on the topic of renewable energy. Please find scholarly articles related to renewable energy and provide me with the titles of the top 3 papers, the number of citations they have received, their organic results' ids, snippets from these papers, and their publication information. I would also like to know the author's id for the first paper. Additionally, could you get the author's information for these papers, including their names, affiliations, up to 3 articles by each author, and their homepage URLs? Lastly, could you tell me what the current weekday and time is?"}]}, "query_79_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "PPT.create_file", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning techniques for anomaly detection"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "tU0ydD3e2joJ"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Salima Omar"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "Muw4AvsAAAAJ"}}, {"id": 4, "prev": [3], "name": "PPT.create_file", "args": {"theme": "Anomaly Detection", "abs_location": "outputs/Anomaly_Detection_Techniques.ppt"}}, {"id": 5, "prev": [4], "name": "PPT.add_text_page", "args": {"title": "Summary of Selected Paper", "bullet_items": "Title: Machine learning techniques for anomaly detection: an overview\nAuthor: Salima Omar, Asri Ngadi, Hamid H. Jebur\nYear: 2013\nJournal: International Journal of Computer Applications\nCitation: Omar, S., Ngadi, A., & Jebur, H. H. (2013). Machine learning techniques for anomaly detection: an overview. International Journal of Computer Applications, 79(2)."}}, {"id": 6, "prev": [5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Find scholarly articles concerning 'machine learning techniques for anomaly detection'. Select the first paper and obtain its citation in MLA format. Then, use the author's ID to retrieve the author's details. Generate a PowerPoint called 'Anomaly Detection Techniques' and include a page that summarizes the selected paper. Lastly, store the PowerPoint in the location `outputs/Anomaly_Detection_Techniques.ppt`."}]}, "query_79_1": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "GoogleScholar.get_citation_format", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "applications of artificial intelligence in healthcare"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "hBd9oL9b6KYJ"}}, {"id": 2, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "KayGeLj14tgJ"}}, {"id": 3, "prev": [1, 2], "name": "PPT.create_file", "args": {"theme": "AI in Healthcare", "abs_location": "outputs/AI_in_Healthcare.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Application of Artificial Intelligence in Healthcare", "bullet_items": "Manne, Ravi, and Sneha C. Kantheti. \"Application of artificial intelligence in healthcare: chances and challenges.\" Current Journal of Applied Science and Technology 40.6 (2021): 78-89."}}, {"id": 5, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Artificial Intelligence in Healthcare", "bullet_items": "Yu, Kun-Hsing, Andrew L. Beam, and Isaac S. Kohane. \"Artificial intelligence in healthcare.\" Nature biomedical engineering 2.10 (2018): 719-731."}}, {"id": 6, "prev": [4, 5], "name": "PPT.save_file", "args": {}}, {"id": 7, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "bnecV0n91msJ"}}, {"id": 8, "prev": [3], "name": "PPT.add_text_image_page", "args": {"title": "Applications of Artificial Intelligence in Healthcare", "bullet_items": "Shaheen, Mohammed Yousef. \"Applications of Artificial Intelligence (AI) in healthcare: A review.\" ScienceOpen Preprints (2021).", "image": "<image_path>"}}, {"id": 9, "prev": [8], "name": "PPT.save_file", "args": {}}, {"id": 10, "prev": [9], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Locate scholarly articles about the 'applications of artificial intelligence in healthcare'. Choose the first and second papers and get their respective citations in MLA format. Generate a PowerPoint titled 'AI in Healthcare' and add a text page for each paper including their citations. Lastly, store the PowerPoint in the location `outputs/AI_in_Healthcare.ppt`."}]}, "query_79_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.save_file", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "PPT.create_file", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "John Smith"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "John Smith"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_information", "args": {"author_id": "0juNTSgAAAAJ"}}, {"id": 3, "prev": [2], "name": "PPT.create_file", "args": {"theme": "Author Profile", "abs_location": "outputs/Author_Profile_John_Smith.ppt"}}, {"id": 4, "prev": [3], "name": "PPT.add_text_page", "args": {"title": "Author Information", "bullet_items": "Name: John Smith\nAffiliations: Unknown affiliation\nWebsite: http://www.donysterling.co.uk/"}}, {"id": 5, "prev": [4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Locate scholarly articles penned by 'John Smith'. Use the author's ID to acquire the author's details. Generate a PowerPoint titled 'Author Profile: John Smith' and include a page with the author's information. Lastly, store the PowerPoint in the location `outputs/Author_Profile_John_Smith.ppt`."}]}, "query_7_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_information", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 631154213461762756}}, {"id": 2, "prev": [1], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Paris tourism"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "pBw6UH_9mAUJ"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for properties in Paris on Airbnb. Retrieve the details of the first property in the search results. Then, search for scholarly articles related to 'Paris tourism' on Google Scholar and get the author information for the top-rated article."}]}, "query_7_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "GoogleScholar.search_google_scholar", "GoogleScholar.get_author_information", "GoogleScholar.get_author_id", "AirbnbSearch.check_availability", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Miami"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.check_availability", "args": {"propertyId": 25547075}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 25547075}}, {"id": 3, "prev": [2], "name": "GoogleScholar.search_google_scholar", "args": {"query": "Best Travel Destinations"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Best Travel Destinations"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_author_information", "args": {"author_id": "idq1Ms8AAAAJ"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['AirbnbSearch.check_availability', {'name': 'AirbnbSearch.check_availability', 'description': 'This function checks the availability of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date to check, it must in the format of YYYY-MM-DD.'}], 'return_data': [{'name': 'availability', 'description': 'The availability of the property for the given date or the next 10 days.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Check the availability of the first property listed on Airbnb in Miami. Retrieve the details of the property. Then, get the author ID for the most cited article titled 'Best Travel Destinations' on Google Scholar and get the author information for the author."}]}, "query_80_1": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_id", "GoogleScholar.get_citation_format", "Weather.forecast_weather", "Weather.get_weather_today", "GoogleScholar.get_author_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleScholar.search_google_scholar", "args": {"query": "artificial intelligence"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.get_citation_format", "args": {"q": "efZZXguoqq8J"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "Pavel Hamet"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "9zb7YrEAAAAJ"}}, {"id": 4, "prev": [3], "name": "Weather.get_weather_today", "args": {"location": "current"}}, {"id": 5, "prev": [4], "name": "Weather.forecast_weather", "args": {"location": "current", "days": 3}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['Weather.forecast_weather', {'name': 'Weather.forecast_weather', 'description': 'forecast weather in the N upcoming days', 'required_parameters': [{'name': 'location', 'description': '', 'type': 'STRING'}, {'name': 'days', 'description': 'the N number of days later, maximum N is 3', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'list weather forecast of N days, including date, overall weather and temperature'}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a student, I'm working on a research project revolving around artificial intelligence. I'd like to find scholarly articles related to artificial intelligence via Google Scholar. Could you provide the titles, number of citations, and publication details for the three most cited papers? Also, could you generate the MLA citation format for the most cited paper among these three? I also need the author's details for this paper, such as their name, affiliation, three published articles, and their website if available. Lastly, could you let me know the current weather and the forecast for the next three days for the location from where I'm making this query?"}]}, "query_81_0": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.get_room_status", "ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "14:00", "end_time": "16:00"}}, {"id": 1, "prev": [0], "name": "ReserveMeeting.reserve", "args": {"room_id": "103", "start_time": "14:00", "end_time": "16:00"}}, {"id": 2, "prev": [1], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a student with a group project meeting scheduled for today, between 2:00 PM and 4:00 PM. Can you find any unoccupied meeting rooms during this period? Once I have the list, I'd prefer to book the first room available. Lastly, can we confirm if the booking was successful by checking the current status of all the meeting rooms?"}]}, "query_82_1": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_weekday", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_weekday", "args": {}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "breakfast recipes"}}, {"id": 2, "prev": [1], "name": "GoogleSearch.serper_search", "args": {"query": "lunch recipes"}}, {"id": 3, "prev": [2], "name": "GoogleSearch.serper_search", "args": {"query": "dinner recipes"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning the menu for the upcoming week. Could you please find recipes for breakfast, lunch, and dinner? Also, could you tell me what day of the week it is today?"}]}, "query_82_2": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "TimeTool.get_weekday", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "GoogleSearch.serper_search", "args": {"query": "upper body workout routines"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "nutrition plans for weight loss"}}, {"id": 2, "prev": [1], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 3, "prev": [2], "name": "TimeTool.get_weekday", "args": {}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm looking for workout routines and nutrition plans. Could you please find workout routines that target the upper body and nutrition plans for weight loss? Also, could you provide me with the current date, time, and the weekday?"}]}, "query_85_0": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_empty_room_with_time", "TimeTool.get_curr_time", "TimeTool.get_weekday"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_weekday", "args": {}}, {"id": 2, "prev": [0, 1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "20:53", "end_time": "22:53"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": 101, "start_time": "20:53", "end_time": "22:53"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As the office manager, I need to find a meeting room that is available for the next two hours for a team meeting today. Once an available room is found, please book it for the specified duration, starting from the current time."}]}, "query_85_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "ReserveMeeting.get_room_status", "ReserveMeeting.get_empty_room_with_time", "TimeTool.get_curr_time"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ReserveMeeting.get_room_status", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [0, 1], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "20:54", "end_time": "23:59"}}, {"id": 3, "prev": [2], "name": "ReserveMeeting.reserve", "args": {"room_id": 102, "start_time": "20:54", "end_time": "23:59"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['ReserveMeeting.get_room_status', {'name': 'ReserveMeeting.get_room_status', 'description': 'get the room booking status', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of rooms as well as its booking status'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As the HR manager, I need to know the current booking status of the first meeting room for arranging interviews for multiple candidates. Once the room is available, I will book it for the interviews, starting from the current time."}]}, "query_88_0": {"meta": {"prompt_type": "str", "API_list": ["PPT.add_text_page", "PPT.create_file", "PPT.save_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/ConferenceAgenda.pptx"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Conference Agenda", "bullet_items": "9:00 AM - Registration and Networking[SPAN]10:00 AM - Keynote Speech[SPAN]11:30 AM - Break[SPAN]12:00 PM - Panel Discussion[SPAN]1:30 PM - Lunch Break[SPAN]2:30 PM - Workshop Sessions[SPAN]4:00 PM - Closing Remarks[SPAN]5:00 PM - Networking Reception"}}, {"id": 2, "prev": [1], "name": "PPT.save_file", "args": {}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am organizing a conference on November 15th. Please prepare a PowerPoint presentation with a title slide that reads 'Conference Agenda'. Add a text page with these bullet points: 9:00 AM - Registration and Networking, 10:00 AM - Keynote Speech, 11:30 AM - Break, 12:00 PM - Panel Discussion, 1:30 PM - Lunch Break, 2:30 PM - Workshop Sessions, 4:00 PM - Closing Remarks, 5:00 PM - Networking Reception. Save the PowerPoint file to 'outputs/ConferenceAgenda.pptx'."}]}, "query_88_2": {"meta": {"prompt_type": "str", "API_list": ["PPT.get_image", "PPT.save_file", "PPT.add_text_page", "PPT.add_text_image_page", "PPT.create_file"]}, "ground_truth": [{"id": 0, "prev": [], "name": "PPT.create_file", "args": {"theme": "default", "abs_location": "outputs/WW2Presentation.pptx"}}, {"id": 1, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Causes of World War II", "bullet_items": "Treaty of Versailles, Rise of Fascism, Appeasement"}}, {"id": 2, "prev": [0], "name": "PPT.add_text_page", "args": {"title": "Events of World War II", "bullet_items": "Invasion of Poland, Battle of Stalingrad, D-Day, Atomic Bombing of Hiroshima and Nagasaki"}}, {"id": 3, "prev": [2], "name": "PPT.get_image", "args": {"keywords": "World War II"}}, {"id": 4, "prev": [0, 2, 3], "name": "PPT.add_text_image_page", "args": {"title": "Image of World War II", "bullet_items": "Image of World War II", "image": "outputs/1697716116.3940063.jpg"}}, {"id": 5, "prev": [0, 1, 2, 4], "name": "PPT.save_file", "args": {}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['PPT.get_image', {'name': 'PPT.get_image', 'description': 'Get an image given keywords from Internet, return the image path', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the comma separated keywords to describe the image'}], 'optional_parameters': [], 'return_data': [{'name': 'picture_url', 'description': 'the file path to the searched image'}]}], ['PPT.save_file', {'name': 'PPT.save_file', 'description': 'When all steps done, YOU MUST use save_file() to save PPT', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_page', {'name': 'PPT.add_text_page', 'description': 'Add text page of ppt', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.add_text_image_page', {'name': 'PPT.add_text_image_page', 'description': 'Add a text page with one image. Image should be a path', 'required_parameters': [{'name': 'title', 'type': 'STRING', 'description': 'the title of the page'}, {'name': 'bullet_items', 'type': 'STRING', 'description': 'bullet_items should be string, for multiple bullet items, please use [SPAN] to separate them.'}, {'name': 'image', 'type': 'STRING', 'description': 'the path of the image'}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}], ['PPT.create_file', {'name': 'PPT.create_file', 'description': 'Create a pptx file with specific themes', 'required_parameters': [{'name': 'theme', 'type': 'STRING', 'description': 'the theme used'}, {'name': 'abs_location', 'type': 'STRING', 'description': \"the ppt file's absolute saving location\"}], 'optional_parameters': [], 'return_data': [{'name': 'status', 'description': 'the result of the execution'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I need to prepare a presentation for my class on World War II. Create a PowerPoint presentation with a title slide that reads 'World War II'. Add a text page with the following bullet points: Causes of World War II, Treaty of Versailles, Rise of Fascism, Appeasement, Events of World War II, Invasion of Poland, Battle of Stalingrad, D-Day, Atomic Bombing of Hiroshima and Nagasaki. Please add a suitable image related to World War II from the available resources. Save the PowerPoint file to 'outputs/WW2Presentation.pptx'."}]}, "query_89_0": {"meta": {"prompt_type": "str", "API_list": ["TimeTool.get_curr_time", "TimeTool.get_weekday", "Weather.get_weather_today"]}, "ground_truth": [{"id": 0, "prev": [], "name": "TimeTool.get_weekday", "args": {}}, {"id": 1, "prev": [0], "name": "TimeTool.get_curr_time", "args": {}}, {"id": 2, "prev": [1], "name": "Weather.get_weather_today", "args": {"location": "current"}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['TimeTool.get_curr_time', {'name': 'TimeTool.get_curr_time', 'description': 'get current time', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'time', 'description': 'the time in YYYY-MM-DD HH:MM format'}]}], ['TimeTool.get_weekday', {'name': 'TimeTool.get_weekday', 'description': 'get the weekday today', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'weekday', 'description': ''}]}], ['Weather.get_weather_today', {'name': 'Weather.get_weather_today', 'description': \"get today's weather\", 'required_parameters': [{'name': 'location', 'description': 'the location name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'overall', 'description': ''}, {'name': 'avg temperature', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a fitness enthusiast, I need to organize my outdoor activities. Could you inform me about the day today and what's the current time? I'm also interested in knowing the weather conditions at my current location for today."}]}, "query_8_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Los Angeles"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 33884250}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 909363587647904523}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 20654271}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 33884250}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 909363587647904523}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 20654271}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "My client is interested in finding a place in Los Angeles. Can you find some properties in Los Angeles and provide the details, such as the type of property, how many people it can accommodate, its rating, and its geographical coordinates? In addition, could you share the reviews of these properties?"}]}, "query_91_0": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "BINGMap.get_distance", "ArxivSearch.get_arxiv_article_information", "AirbnbSearch.get_property_reviews", "BINGMap.get_route", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 691676460109271194}}, {"id": 3, "prev": [2], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "tourist attractions New York City"}}, {"id": 4, "prev": [0], "name": "BINGMap.search_nearby", "args": {"search_term": "restaurant", "places": "New York, NY, United States", "latitude": 40.71806, "longitude": -74.00095, "radius": 1000}}, {"id": 5, "prev": [4], "name": "BINGMap.get_distance", "args": {"start": "New York, NY, United States", "end": "45 Murray St, New York, NY, 10007"}}, {"id": 6, "prev": [4], "name": "BINGMap.get_route", "args": {"start": "New York, NY, United States", "end": "45 Murray St, New York, NY, 10007"}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['BINGMap.get_distance', {'name': 'BINGMap.get_distance', 'description': 'Get the distance between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'distance', 'description': 'the distance in km.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to New York City. Could you find available Airbnb properties there? Then, could you provide details for the top three properties? Next, can we see the reviews of the first property? Also, could you find articles related to tourist attractions in New York City on Arxiv? Finally, could you find restaurants within a 1 km radius of the first property, measure the distance between the first property and the nearest restaurant, and provide a driving route from the property to the restaurant?"}]}, "query_91_2": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews", "BINGMap.get_route", "BINGMap.search_nearby", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Bali"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": "598889637396090869"}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "598889637396090869"}}, {"id": 3, "prev": [1], "name": "BINGMap.search_nearby", "args": {"search_term": "beach", "latitude": -8.44929, "longitude": 115.3113, "radius": 2000}}, {"id": 4, "prev": [1, 3], "name": "BINGMap.get_route", "args": {"start": "Moon - Price Villa in home Six Bali", "end": "Komaneka at Keramas Beach"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['BINGMap.get_route', {'name': 'BINGMap.get_route', 'description': 'Get the route between two locations in km.', 'required_parameters': [{'name': 'start', 'type': 'STRING', 'description': 'The start location.'}, {'name': 'end', 'type': 'STRING', 'description': 'The end location.'}], 'optional_parameters': [], 'return_data': [{'name': 'route', 'description': 'the route, a list of actions.'}]}], ['BINGMap.search_nearby', {'name': 'BINGMap.search_nearby', 'description': 'Search for places nearby a location, within a given radius, and return the results into a list. Put the location name at the end of the query.', 'required_parameters': [{'name': 'search_term', 'type': 'STRING', 'description': 'the place name'}], 'optional_parameters': [{'name': 'places', 'type': 'STRING', 'description': 'the name of the location.'}, {'name': 'latitude', 'type': 'FLOAT', 'description': 'the latitude of the location.'}, {'name': 'longitude', 'type': 'FLOAT', 'description': 'the longitude of the location.'}, {'name': 'radius', 'type': 'NUMBER', 'description': 'radius in meters.'}], 'return_data': [{'name': 'places', 'description': 'the list of places, each place is a dict with name and address, at most 5 places.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning a vacation in Bali. Could you find available Airbnb properties there? Then, could you provide details of the top three properties? Next, can we see the reviews of the first property? Also, could you find beaches within a 2 km radius of the first property, measure the distance between the first property and the nearest beach, and provide a driving route from the first property to the nearest beach?"}]}, "query_92_1": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "AirbnbSearch.get_property_details", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 691676460109271194}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51619634}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 667316357375615620}}, {"id": 4, "prev": [3], "name": "Email.show", "args": {"only_unread": false}}, {"id": 5, "prev": [4], "name": "Email.send", "args": {"address": "professor@example.com", "title": "Research Proposal", "body": "Dear Professor, I hope this email finds you well. I am writing to submit my research proposal on the topic of [insert topic]. I have attached the proposal document for your review. Thank you for your time and consideration. Best regards, [Your Name]"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm searching for accommodation for my upcoming trip to New York City. Can you search for properties in New York City and provide me with the details of the top 3 properties? Also, please show me the emails in my inbox at myemail@example.com and send an email to my professor at professor@example.com with the subject 'Research Proposal'."}]}, "query_92_2": {"meta": {"prompt_type": "str", "API_list": ["Email.send", "ArxivSearch.get_arxiv_article_information", "AirbnbSearch.get_property_checkout_price", "Email.show", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_checkout_price", "args": {"propertyId": 49634091, "checkIn": "2023-10-25", "checkOut": "2023-10-28"}}, {"id": 2, "prev": [1], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 3, "prev": [2], "name": "Email.show", "args": {"only_unread": false}}, {"id": 4, "prev": [3], "name": "Email.send", "args": {"address": "colleague@example.com", "title": "Conference Schedule", "body": "Dear colleague,\n\nI hope this email finds you well. I wanted to share the schedule for the conference in San Francisco next week:\n\n- Date: October 25-28, 2023\n- Location: San Francisco, CA\n\nPlease let me know if you have any questions or need further information.\n\nBest regards,\n[Your Name]"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['Email.show', {'name': 'Email.show', 'description': 'show the emails in the inbox', 'required_parameters': [{'name': 'only_unread', 'description': 'whether to show only unread emails in the inbox', 'type': 'BOOLEAN'}], 'optional_parameters': [], 'return_data': [{'name': 'emails', 'descriptions': 'a list of emails in the inbox including sender, title, content, and time'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm attending a conference in San Francisco next week. Can you retrieve the checkout cost of the first property in San Francisco for the dates for the next three days? Additionally, please search for research papers related to machine learning and provide me with the information of the top 3 papers. Lastly, show me the emails in my inbox at myemail@example.com and send an email to my colleague at colleague@example.com with the subject 'Conference Schedule'."}]}, "query_93_0": {"meta": {"prompt_type": "str", "API_list": ["FileOperation.read_file", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Paris"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 42736872}}, {"id": 2, "prev": [1], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Eiffel Tower, Paris"}}, {"id": 3, "prev": [2], "name": "FileOperation.read_file", "args": {"file_path": "data_v2/template_data/hotel.txt"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FileOperation.read_file', {'name': 'FileOperation.read_file', 'description': 'read file from disk', 'required_parameters': [{'name': 'file_path', 'type': 'STRING', 'description': 'The path of the file.'}], 'optional_parameters': [], 'return_data': [{'name': 'text', 'description': 'the text of the file.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am planning a trip to Paris. Please provide me with the details of the first property. Also, find 3 properties near the Eiffel Tower in Paris. Lastly, read the contents of the file located at 'data_v2/template_data/hotel.txt'."}]}, "query_94_0": {"meta": {"prompt_type": "str", "API_list": ["FilmDouban.now_playing_out_filter", "FilmDouban.print_detail"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmDouban.now_playing_out_filter", "args": {}}, {"id": 1, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "火山挚恋"}}, {"id": 2, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "奥本海默"}}, {"id": 3, "prev": [0], "name": "FilmDouban.print_detail", "args": {"film_name": "驯龙高手"}}, {"id": 4, "prev": [3], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmDouban.now_playing_out_filter', {'name': 'FilmDouban.now_playing_out_filter', 'description': 'prints the details of the filtered [outNum] playing films now in China', 'required_parameters': [], 'optional_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'the region of search query, and the parameter must in Chinese.'}, {'name': 'outNum', 'type': 'NUMBER', 'description': 'the number of search query'}], 'return_data': [{'name': 'film', 'description': 'a list of film information, including date, title, cate, region, wantWatchPeopleNum, link'}]}], ['FilmDouban.print_detail', {'name': 'FilmDouban.print_detail', 'description': 'prints the details of a movie, giving its name', 'required_parameters': [{'name': 'film_name', 'type': 'STRING', 'description': \"target movie's name, must be in Chinese\"}], 'optional_parameters': [], 'return_data': [{'name': 'description', 'description': 'the description of the movie'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I would like to know the details of the films '火山挚恋', '奥本海默', and '驯龙高手' which are playing in China. Could you provide me with their release date, title, category, region, and the number of people interested in watching them? I would also appreciate a brief description of each film."}]}, "query_94_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I am conducting research in the field of computer science. Could you search for articles related to 'machine learning' on Arxiv and provide me with the published date, title, authors, and summary of the first three articles in the search results?"}]}, "query_95_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "FilmTMDB.get_top_rated_movies"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to analyze the top ten latest research papers in the field of machine learning and also get a list of the top five rated movies."}]}, "query_95_2": {"meta": {"prompt_type": "str", "API_list": ["FilmTMDB.get_top_rated_movies", "FilmTMDB.get_similar_movies", "FilmTMDB.get_movie_details"]}, "ground_truth": [{"id": 0, "prev": [], "name": "FilmTMDB.get_top_rated_movies", "args": {}}, {"id": 1, "prev": [0], "name": "FilmTMDB.get_movie_details", "args": {"movie_id": 238}}, {"id": 2, "prev": [1], "name": "FilmTMDB.get_similar_movies", "args": {"movie_id": 238}}, {"id": 3, "prev": [2], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['FilmTMDB.get_top_rated_movies', {'name': 'FilmTMDB.get_top_rated_movies', 'description': 'Get a list of movies ordered by rating', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': 'list of films ranked by rating, including id, title, release date, popularity and rating'}]}], ['FilmTMDB.get_similar_movies', {'name': 'FilmTMDB.get_similar_movies', 'description': 'Get the similar movies based on genres and keywords', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'films', 'description': \"list of reviews including user's name, rating, and reviews\"}]}], ['FilmTMDB.get_movie_details', {'name': 'FilmTMDB.get_movie_details', 'description': 'Get the top level details of a movie by ID', 'required_parameters': [{'name': 'movie_id', 'type': 'NUMBER', 'description': \"','\"}], 'optional_parameters': [], 'return_data': [{'name': 'genres', 'description': 'category list of film'}, {'name': 'id', 'description': ''}, {'name': 'release_date', 'description': ''}, {'name': 'runtime', 'description': 'film length in minute'}, {'name': 'title', 'description': ''}, {'name': 'overview', 'description': ''}, {'name': 'vote_average', 'description': 'rating for the film'}, {'name': 'popularity', 'description': ''}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I want to get detailed information about the first movie in the list and also find the top three similar movies based on its genre and keywords."}]}, "query_96_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "San Francisco"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 51403713}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 4631873}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 11437509}}, {"id": 4, "prev": [3], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 5, "prev": [4], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Look for accommodations in San Francisco and acquire the reviews of the first three properties. Also, conduct a search for articles on the topic of 'machine learning' on Arxiv and extract the metadata, including the published date, title, authors, and summary, for the first three articles."}]}, "query_97_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleScholar.search_google_scholar"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning"}}, {"id": 1, "prev": [0], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Search for articles and papers related to 'machine learning' on Arxiv and Google Scholar published in the last five years. Retrieve the title, authors, and summary of three articles from Arxiv. Also, retrieve the titles, citation numbers, and publication information of the top three most cited papers from Google Scholar."}]}, "query_97_2": {"meta": {"prompt_type": "str", "API_list": ["GoogleScholar.search_google_scholar", "GoogleScholar.get_author_information", "GoogleScholar.get_author_id", "AirbnbSearch.get_property_reviews", "GoogleScholar.get_citation_format", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": "858697692672545141"}}, {"id": 2, "prev": [1], "name": "GoogleScholar.get_author_id", "args": {"mauthors": "first author"}}, {"id": 3, "prev": [2], "name": "GoogleScholar.get_author_information", "args": {"author_id": "HhtZwpAAAAAJ"}}, {"id": 4, "prev": [3], "name": "GoogleScholar.search_google_scholar", "args": {"query": "machine learning"}}, {"id": 5, "prev": [4], "name": "GoogleScholar.get_citation_format", "args": {"q": "EQ8shYj8Ai8J"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['GoogleScholar.get_author_information', {'name': 'GoogleScholar.get_author_information', 'description': \"Search for an author's information by author's id provided by get_author_id.\", 'required_parameters': [{'name': 'author_id', 'type': 'STRING', 'description': 'unique ID of the author'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'author name'}, {'name': 'affliation', 'description': 'affliation of the author'}, {'name': 'articles', 'description': 'at most 3 articles by the author'}, {'name': 'website', 'description': \"the authors's homepage url\"}]}], ['GoogleScholar.get_author_id', {'name': 'GoogleScholar.get_author_id', 'description': \"The getAuthorId function is used to get the author's id by his or her name.\", 'required_parameters': [{'name': 'mauthors', 'description': 'the name of the author', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'author_id', 'description': 'the author_id of the author'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['GoogleScholar.get_citation_format', {'name': 'GoogleScholar.get_citation_format', 'description': \"get MLA citation format by an identification of organic result's id\", 'required_parameters': [{'name': 'q', 'type': 'STRING', 'description': 'ID of an individual Google Scholar organic search result'}], 'optional_parameters': [], 'return_data': [{'name': 'citation', 'description': 'the citation format of the article'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "Get the reviews of the first Airbnb property listed in New York. Retrieve at most three reviews including the comment, rating, and date. Also, search for information about the first author listed on Google Scholar and retrieve their name, affiliation, and up to three articles written by them. Finally, generate the MLA citation format for the first Google Scholar organic search result related to 'machine learning'."}]}, "query_98_0": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information", "GoogleSearch.serper_search"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum mechanics"}}, {"id": 1, "prev": [0], "name": "GoogleSearch.serper_search", "args": {"query": "applications of quantum mechanics"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['GoogleSearch.serper_search', {'name': 'GoogleSearch.serper_search', 'description': 'A google search API. You can use it when you want to get answer about specific `questions.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'at most 3 items of google search results'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a student working on a physics project. I'd like to find articles about 'quantum mechanics' and get meta information for the three most relevant ones, including publication date, title, authors, and summary. Also, could you find the three most relevant search results for 'applications of quantum mechanics'?"}]}, "query_98_1": {"meta": {"prompt_type": "str", "API_list": ["AirbnbSearch.search_property_by_place", "AirbnbSearch.get_property_details", "AirbnbSearch.get_property_reviews"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "Bali"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 44400573}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 34546645}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 38533722}}, {"id": 4, "prev": [1], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 44400573}}, {"id": 5, "prev": [2], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 34546645}}, {"id": 6, "prev": [3], "name": "AirbnbSearch.get_property_reviews", "args": {"propertyId": 38533722}}, {"id": 7, "prev": [6], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['AirbnbSearch.get_property_reviews', {'name': 'AirbnbSearch.get_property_reviews', 'description': 'This function retrieves the reviews of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The reviews of the property, containing comment, rating, and date. At most 3 reviews are returned.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a content writer working on an article about vacation rentals. I need to find available rentals in Bali and get detailed information for the three most popular ones, including title, type, capacity, rating, and location. Could you also pull up some reviews for these properties?"}]}, "query_98_2": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "machine learning algorithms"}}, {"id": 1, "prev": [0], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "recent advancements in artificial intelligence"}}, {"id": 2, "prev": [1], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm a researcher studying artificial intelligence. I need to find articles about 'machine learning algorithms' and get meta information for the three most relevant ones, including publication date, title, authors, and summary. Also, could you find the three most relevant search results for 'recent advancements in artificial intelligence'?"}]}, "query_99_1": {"meta": {"prompt_type": "str", "API_list": ["ArxivSearch.get_arxiv_article_information"]}, "ground_truth": [{"id": 0, "prev": [], "name": "ArxivSearch.get_arxiv_article_information", "args": {"query": "quantum computing"}}, {"id": 1, "prev": [0], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "As a researcher, I need to search for scientific articles on arxiv.org to gather information for my research. Please run an arxiv search using the query 'quantum computing' and provide me with the meta information of the first three articles, including the published date, title, authors, and summary."}]}, "query_9_1": {"meta": {"prompt_type": "str", "API_list": ["ReserveMeeting.reserve", "AirbnbSearch.get_property_details", "ReserveMeeting.get_empty_room_with_time", "AirbnbSearch.search_property_by_place"]}, "ground_truth": [{"id": 0, "prev": [], "name": "AirbnbSearch.search_property_by_place", "args": {"place": "New York City"}}, {"id": 1, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 941597372112246343}}, {"id": 2, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 51619634}}, {"id": 3, "prev": [0], "name": "AirbnbSearch.get_property_details", "args": {"propertyId": 585382126083893704}}, {"id": 4, "prev": [3], "name": "ReserveMeeting.get_empty_room_with_time", "args": {"start_time": "18:00", "end_time": "22:00"}}, {"id": 5, "prev": [4], "name": "ReserveMeeting.reserve", "args": {"room_id": 101, "start_time": "18:00", "end_time": "22:00"}}, {"id": 6, "prev": [5], "name": "FinishAction", "args": {}}], "origin_prompt": [{"role": "system", "content": "\nYou have access to the following API:\n[['ReserveMeeting.reserve', {'name': 'ReserveMeeting.reserve', 'description': 'Book the meeting room today using the room id provided by `check_empty`', 'required_parameters': [{'name': 'room_id', 'description': 'the room you want to book', 'type': 'STRING'}, {'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'state', 'description': 'the state of the booking'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ReserveMeeting.get_empty_room_with_time', {'name': 'ReserveMeeting.get_empty_room_with_time', 'description': 'if they are any rooms available in the provided time', 'required_parameters': [{'name': 'start_time', 'description': 'the start booked time, must be in 24 hour format, e.g. 13:15', 'type': 'STRING'}, {'name': 'end_time', 'description': 'the end booked time, must be in 24 hour format, e.g. 22:21', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rooms', 'description': 'list of available room ids'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n\nProvide the WHOLE plan to solve the query using the provided APIs without other words. Each step should follow the format: Use [api name] to [goal]. Each step should start with a new line and only call API once.\n"}, {"role": "user", "content": "I'm planning an event and I need a venue. Please find properties in New York City and provide details of the top 3 properties i.e., their title, property type, capacity, rating, latitude, and longitude. Additionally, find an empty meeting room in my office building for today and make a reservation from 18:00 to 22:00."}]}}