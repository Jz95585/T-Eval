{
    "401": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BlockchainResearch.find_articles",
                "CryptoMarketData.get_historical_data",
                "CryptoMarketData.get_current_data",
                "ExpertOpinions.search_by_keyword"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BlockchainResearch.find_articles",
                "args": "{\"keyword\": \"bitcoin\", \"count\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoMarketData.get_historical_data",
                "args": "{\"crypto\": \"bitcoin\", \"date\": \"2024-06-10\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoMarketData.get_current_data",
                "args": "{\"crypto\": \"bitcoin\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ExpertOpinions.search_by_keyword",
                "args": "{\"keyword\": \"bitcoin investment\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BlockchainResearch.find_articles', {'name': 'BlockchainResearch.find_articles', 'description': 'This function searches for articles related to blockchain technology based on a keyword and returns up to a specified number of results.', 'required_parameters': [{'name': 'keyword', 'type': 'STRING', 'description': 'The keyword to search for in articles.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The maximum number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified number of articles related to the keyword.'}]}], ['CryptoMarketData.get_historical_data', {'name': 'CryptoMarketData.get_historical_data', 'description': 'This function retrieves historical market data for a specific cryptocurrency on a given date.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to retrieve data for.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve data, in YYYY-MM-DD format.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical market data for the cryptocurrency on the specified date.'}]}], ['CryptoMarketData.get_current_data', {'name': 'CryptoMarketData.get_current_data', 'description': 'This function retrieves the current market data for a specific cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to retrieve data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Current market data for the cryptocurrency.'}]}], ['ExpertOpinions.search_by_keyword', {'name': 'ExpertOpinions.search_by_keyword', 'description': 'This function searches for expert opinions on a specific topic based on a keyword.', 'required_parameters': [{'name': 'keyword', 'type': 'STRING', 'description': 'The keyword to search for in expert opinions.'}], 'optional_parameters': [], 'return_data': [{'name': 'opinions', 'description': 'A list of expert opinions related to the keyword.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BlockchainResearch.find_articles` 并传入 `keyword` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BlockchainResearch.find_articles\",\n    \"args\": \"{'keyword': 'bitcoin', 'count': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估比特币的投资潜力。首先，从最新的区块链技术文章中获取3篇与比特币相关的研究文章。然后，获取2024年6月10日比特币的历史交易数据。接着，获取比特币当前的实时市场数据和交易量。最后，通过关键词获取一些关于比特币投资的专家意见。"
            }
        ]
    },
    "403": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsSearch.find_articles",
                "RealEstateData.get_city_indices",
                "FinancialAnalysis.find_reports",
                "InvestmentAdvice.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsSearch.find_articles",
                "args": "{\"query\": \"中国房地产市场\", \"time_range\": \"last_month\", \"limit\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateData.get_city_indices",
                "args": "{\"cities\": [\"北京\", \"上海\", \"广州\", \"深圳\", \"杭州\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialAnalysis.find_reports",
                "args": "{\"query\": \"房地产市场金融稳定影响\", \"limit\": 3}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.get_recommendations",
                "args": "{\"market\": \"中国房地产\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsSearch.find_articles', {'name': 'NewsSearch.find_articles', 'description': 'This function searches for news articles based on a query and time range.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'The search query.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'The time range for the articles.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified limit of articles matching the query.'}]}], ['RealEstateData.get_city_indices', {'name': 'RealEstateData.get_city_indices', 'description': 'This function retrieves real estate price indices and transaction volumes for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'indices', 'description': 'Price indices and transaction volumes for each city.'}]}], ['FinancialAnalysis.find_reports', {'name': 'FinancialAnalysis.find_reports', 'description': 'This function searches for financial analysis reports based on a query.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'The search query.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of reports to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to the specified limit of reports matching the query.'}]}], ['InvestmentAdvice.get_recommendations', {'name': 'InvestmentAdvice.get_recommendations', 'description': 'This function provides investment advice for a specified market.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market for which investment advice is sought.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment advice for the specified market.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `NewsSearch.find_articles` 并传入 `query`、`time_range` 和 `limit`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"NewsSearch.find_articles\",\n    \"args\": \"{'query': '中国房地产市场', 'time_range': 'last_month', 'limit': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析中国房地产市场的金融影响。首先，获取最近一个月内关于中国房地产市场的5篇新闻报道。然后，获取中国主要城市的房价指数和交易量数据。接着，通过关键词获取关于房地产市场对金融稳定影响的3篇深度分析报告。最后，获取一些关于投资中国房地产市场的建议。"
            }
        ]
    },
    "405": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GreenFinanceResearch.find_papers",
                "GreenFinanceData.get_green_bond_issuance",
                "GreenFinanceAnalysis.get_impact_articles",
                "GreenFinanceInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GreenFinanceResearch.find_papers",
                "args": "{\"topic\": \"green finance\", \"count\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GreenFinanceData.get_green_bond_issuance",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GreenFinanceAnalysis.get_impact_articles",
                "args": "{\"keyword\": \"sustainable development\", \"count\": 5}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GreenFinanceInvestment.get_investment_advice",
                "args": "{\"product\": \"green finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GreenFinanceResearch.find_papers', {'name': 'GreenFinanceResearch.find_papers', 'description': 'This function searches for research papers on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research papers, e.g., green finance.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of papers to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to three research papers on the specified topic.'}]}], ['GreenFinanceData.get_green_bond_issuance', {'name': 'GreenFinanceData.get_green_bond_issuance', 'description': 'This function retrieves the global green bond issuance data for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which to retrieve the data.'}], 'optional_parameters': [], 'return_data': [{'name': 'issuance', 'description': 'The total global green bond issuance for the specified year.'}]}], ['GreenFinanceAnalysis.get_impact_articles', {'name': 'GreenFinanceAnalysis.get_impact_articles', 'description': 'This function searches for articles analyzing the impact of a specified keyword on green finance.', 'required_parameters': [{'name': 'keyword', 'type': 'STRING', 'description': 'The keyword to search for, e.g., sustainable development.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five articles analyzing the impact of the specified keyword on green finance.'}]}], ['GreenFinanceInvestment.get_investment_advice', {'name': 'GreenFinanceInvestment.get_investment_advice', 'description': 'This function provides investment advice for a specified product.', 'required_parameters': [{'name': 'product', 'type': 'STRING', 'description': 'The product to provide investment advice for, e.g., green finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified product.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `GreenFinanceResearch.find_papers` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"GreenFinanceResearch.find_papers\",\n    \"args\": \"{'topic': 'green finance', 'count': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我对绿色金融和可持续发展很感兴趣。首先，获取3篇关于绿色金融的最新研究论文。然后，获取全球绿色债券的发行量和市场规模数据。接着，通过关键词获取关于绿色金融对可持续发展影响的5篇分析文章。最后，获取一些关于投资绿色金融产品的建议。"
            }
        ]
    },
    "407": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankingResearch.find_papers",
                "BankingResearch.get_bank_cases",
                "BankingResearch.get_trend_articles",
                "InvestmentAdvice.get_fintech_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankingResearch.find_papers",
                "args": "{\"topic\": \"fintech impact on banking\", \"count\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BankingResearch.get_bank_cases",
                "args": "{\"banks\": [\"JPMorgan\", \"HSBC\", \"Citi\"], \"fintech\": true}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BankingResearch.get_trend_articles",
                "args": "{\"keywords\": [\"fintech\", \"future\", \"trends\"], \"count\": 5}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.get_fintech_tips",
                "args": "{\"sector\": \"fintech\", \"advice_type\": \"investment\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankingResearch.find_papers', {'name': 'BankingResearch.find_papers', 'description': 'This function searches for research papers on a specific topic in banking.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research papers, e.g., fintech impact on banking.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of papers to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to the specified number of research papers on the topic.'}]}], ['BankingResearch.get_bank_cases', {'name': 'BankingResearch.get_bank_cases', 'description': 'This function retrieves case studies of banks adopting fintech.', 'required_parameters': [{'name': 'banks', 'type': 'ARRAY', 'description': 'An array of bank names to find case studies for.'}, {'name': 'fintech', 'type': 'BOOLEAN', 'description': 'Whether to filter for fintech adoption.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of case studies for the specified banks regarding fintech adoption.'}]}], ['BankingResearch.get_trend_articles', {'name': 'BankingResearch.get_trend_articles', 'description': 'This function searches for articles on trends in banking.', 'required_parameters': [{'name': 'keywords', 'type': 'ARRAY', 'description': 'An array of keywords to search for in the articles.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified number of articles on banking trends.'}]}], ['InvestmentAdvice.get_fintech_tips', {'name': 'InvestmentAdvice.get_fintech_tips', 'description': 'This function provides investment advice for fintech companies.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which investment advice is sought, e.g., fintech.'}, {'name': 'advice_type', 'type': 'STRING', 'description': 'The type of advice requested, e.g., investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'A list of investment tips for the specified sector.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankingResearch.find_papers` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankingResearch.find_papers\",\n    \"args\": \"{'topic': 'fintech impact on banking', 'count': 3}\"\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融科技对传统银行业的影响。首先，获取3篇关于金融科技对银行业影响的最新研究论文。然后，获取全球主要银行采用金融科技的案例和数据。接着，通过关键词获取关于金融科技未来发展趋势的5篇分析文章。最后，获取一些关于投资金融科技公司的建议。"
            }
        ]
    },
    "409": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "QuantInvestmentResearch.find_papers",
                "QuantInvestmentFunds.get_performance_data",
                "AlgorithmTradingTrends.get_analysis_articles",
                "QuantInvestmentAdvice.get_investment_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "QuantInvestmentResearch.find_papers",
                "args": "{\"count\": 3, \"topic\": \"quantitative investing\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "QuantInvestmentFunds.get_performance_data",
                "args": "{\"strategy\": \"quantitative\", \"count\": 5}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AlgorithmTradingTrends.get_analysis_articles",
                "args": "{\"count\": 5, \"keyword\": \"future trends\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "QuantInvestmentAdvice.get_investment_tips",
                "args": "{\"fundType\": \"quantitative\", \"count\": 3}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['QuantInvestmentResearch.find_papers', {'name': 'QuantInvestmentResearch.find_papers', 'description': 'This function searches for research papers on quantitative investing based on a specified topic and returns a specified number of results.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of papers to return.'}, {'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research papers.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to the specified number of research papers on the topic.'}]}], ['QuantInvestmentFunds.get_performance_data', {'name': 'QuantInvestmentFunds.get_performance_data', 'description': 'This function retrieves performance data for quantitative investment funds based on a specified strategy and returns a specified number of results.', 'required_parameters': [{'name': 'strategy', 'type': 'STRING', 'description': 'The investment strategy of the funds.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of funds to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'funds', 'description': 'A list of up to the specified number of quantitative investment funds with their performance data.'}]}], ['AlgorithmTradingTrends.get_analysis_articles', {'name': 'AlgorithmTradingTrends.get_analysis_articles', 'description': 'This function searches for analysis articles on algorithm trading trends based on a specified keyword and returns a specified number of results.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}, {'name': 'keyword', 'type': 'STRING', 'description': 'The keyword to search for in the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified number of analysis articles on algorithm trading trends.'}]}], ['QuantInvestmentAdvice.get_investment_tips', {'name': 'QuantInvestmentAdvice.get_investment_tips', 'description': 'This function provides investment tips for quantitative investment funds based on a specified fund type and returns a specified number of results.', 'required_parameters': [{'name': 'fundType', 'type': 'STRING', 'description': 'The type of investment funds.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of tips to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'A list of up to the specified number of investment tips for the specified type of funds.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `QuantInvestmentResearch.find_papers` 并传入 `count` 和 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"QuantInvestmentResearch.find_papers\",\n    \"args\": \"{'count': 3, 'topic': 'quantitative investing'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我对量化投资和算法交易很感兴趣。首先，我需要获取3篇关于量化投资的最新研究论文。然后，我想要获取主要量化投资基金的业绩和策略数据，至少5个。接着，我需要通过关键词获取关于算法交易未来发展趋势的5篇分析文章。最后，我想要获取一些关于投资量化投资基金的建议，至少3条。"
            }
        ]
    },
    "411": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsSearch.find_articles",
                "FinanceData.get_platform_metrics",
                "ReportSearch.fetch_trend_analysis",
                "InvestmentAdvice.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsSearch.find_articles",
                "args": "{\"keywords\": [\"中国互联网金融\"], \"timeframe\": \"last_month\", \"limit\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceData.get_platform_metrics",
                "args": "{\"platforms\": [\"蚂蚁金服\", \"京东金融\", \"陆金所\"], \"metrics\": [\"user_growth\", \"transaction_volume\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ReportSearch.fetch_trend_analysis",
                "args": "{\"keywords\": [\"互联网金融\", \"未来趋势\"], \"limit\": 3}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.get_recommendations",
                "args": "{\"sector\": \"中国互联网金融\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsSearch.find_articles', {'name': 'NewsSearch.find_articles', 'description': 'This function searches for news articles based on keywords and timeframe.', 'required_parameters': [{'name': 'keywords', 'type': 'ARRAY', 'description': 'A list of keywords to search for in the articles.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the articles, e.g., last_month, last_year.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified limit of articles, each with a title, source, and publication date.'}]}], ['FinanceData.get_platform_metrics', {'name': 'FinanceData.get_platform_metrics', 'description': 'This function retrieves metrics for specified financial platforms.', 'required_parameters': [{'name': 'platforms', 'type': 'ARRAY', 'description': 'A list of financial platforms to retrieve metrics for.'}, {'name': 'metrics', 'type': 'ARRAY', 'description': 'A list of metrics to retrieve, e.g., user_growth, transaction_volume.'}], 'optional_parameters': [], 'return_data': [{'name': 'metrics_data', 'description': 'A dictionary of metrics for each platform, including user growth and transaction volume.'}]}], ['ReportSearch.fetch_trend_analysis', {'name': 'ReportSearch.fetch_trend_analysis', 'description': 'This function fetches trend analysis reports based on keywords.', 'required_parameters': [{'name': 'keywords', 'type': 'ARRAY', 'description': 'A list of keywords to search for in the trend analysis reports.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of reports to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to the specified limit of trend analysis reports, each with a title, author, and publication date.'}]}], ['InvestmentAdvice.get_recommendations', {'name': 'InvestmentAdvice.get_recommendations', 'description': 'This function provides investment recommendations for a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which to provide investment recommendations.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'A list of investment recommendations for the specified sector, including potential risks and opportunities.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `NewsSearch.find_articles` 并传入 `keywords` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"NewsSearch.find_articles\",\n    \"args\": \"{'keywords': ['中国互联网金融'], 'timeframe': 'last_month', 'limit': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析中国互联网金融的发展趋势。首先，获取最近一个月内关于中国互联网金融的5篇新闻报道。然后，获取中国主要互联网金融平台的用户增长和交易量数据。接着，通过关键词获取关于互联网金融未来发展趋势的3篇深度分析报告。最后，获取一些关于投资中国互联网金融平台的建议。"
            }
        ]
    },
    "413": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketData.get_historical_prices",
                "ClimateImpactAnalysis.analyze_climate_effect",
                "AgricultureReport.get_production_data",
                "InvestmentAdvice.suggest_investment_options"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketData.get_historical_prices",
                "args": "{\"commodities\": [\"soybeans\", \"wheat\"]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ClimateImpactAnalysis.analyze_climate_effect",
                "args": "{\"commodities\": [\"soybeans\", \"wheat\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AgricultureReport.get_production_data",
                "args": "{\"countries\": [\"United States\", \"Brazil\", \"Russia\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.suggest_investment_options",
                "args": "{\"commodities\": [\"soybeans\", \"wheat\"], \"countries\": [\"United States\", \"Brazil\", \"Russia\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketData.get_historical_prices', {'name': 'MarketData.get_historical_prices', 'description': 'This function retrieves historical price data for specified commodities.', 'required_parameters': [{'name': 'commodities', 'type': 'ARRAY', 'description': 'A list of commodities for which historical price data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Historical price data for the specified commodities.'}]}], ['ClimateImpactAnalysis.analyze_climate_effect', {'name': 'ClimateImpactAnalysis.analyze_climate_effect', 'description': 'This function analyzes the impact of global climate change on specified commodities.', 'required_parameters': [{'name': 'commodities', 'type': 'ARRAY', 'description': 'A list of commodities to analyze the climate impact on.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'Analysis of climate change impact on the specified commodities.'}]}], ['AgricultureReport.get_production_data', {'name': 'AgricultureReport.get_production_data', 'description': 'This function retrieves production data for specified countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'A list of countries for which production data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'production', 'description': 'Production data for the specified countries.'}]}], ['InvestmentAdvice.suggest_investment_options', {'name': 'InvestmentAdvice.suggest_investment_options', 'description': 'This function suggests investment options based on commodities and countries.', 'required_parameters': [{'name': 'commodities', 'type': 'ARRAY', 'description': 'A list of commodities to consider for investment.'}, {'name': 'countries', 'type': 'ARRAY', 'description': 'A list of countries to consider for investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'options', 'description': 'Investment options based on the specified commodities and countries.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketData.get_historical_prices` 并传入 `commodities`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketData.get_historical_prices\",\n    \"args\": \"{'commodities': ['soybeans', 'wheat']}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估农业市场的投资机会。首先，获取主要农产品如大豆和小麦的历史价格数据。然后，分析全球气候变化对农产品价格的影响。接着，获取主要生产国的农业产量报告。最后，提供一些关于农业投资的选择建议。"
            }
        ]
    },
    "415": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceNews.get_recent_articles",
                "FinanceIndex.fetch_index_data",
                "FinanceIndex.get_historical_prices",
                "MarketTrendAnalysis.generate_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceNews.get_recent_articles",
                "args": "{\"category\": \"global_markets\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceIndex.fetch_index_data",
                "args": "{\"indices\": [\"Dow_Jones\", \"NASDAQ\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceIndex.get_historical_prices",
                "args": "{\"indices\": [\"Dow_Jones\", \"NASDAQ\"], \"duration\": \"1 month\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketTrendAnalysis.generate_report",
                "args": "{\"indices\": [\"Dow_Jones\", \"NASDAQ\"], \"news_articles\": [12345, 67890]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceNews.get_recent_articles', {'name': 'FinanceNews.get_recent_articles', 'description': 'This function retrieves recent news articles based on a specified category.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of news articles, e.g., global_markets, economy.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five news articles with titles, sources, and publication dates.'}]}], ['FinanceIndex.fetch_index_data', {'name': 'FinanceIndex.fetch_index_data', 'description': 'This function fetches the latest data for specified financial indices.', 'required_parameters': [{'name': 'indices', 'type': 'ARRAY', 'description': 'An array of financial indices, e.g., Dow_Jones, NASDAQ.'}], 'optional_parameters': [], 'return_data': [{'name': 'index_data', 'description': 'The latest data for each specified index, including the current value and change percentage.'}]}], ['FinanceIndex.get_historical_prices', {'name': 'FinanceIndex.get_historical_prices', 'description': 'This function retrieves historical prices for specified financial indices.', 'required_parameters': [{'name': 'indices', 'type': 'ARRAY', 'description': 'An array of financial indices, e.g., Dow_Jones, NASDAQ.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which to retrieve historical prices, e.g., 1 month, 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_prices', 'description': 'Historical prices for each specified index, including daily closing values.'}]}], ['MarketTrendAnalysis.generate_report', {'name': 'MarketTrendAnalysis.generate_report', 'description': 'This function generates a market trend analysis report based on specified indices and news articles.', 'required_parameters': [{'name': 'indices', 'type': 'ARRAY', 'description': 'An array of financial indices, e.g., Dow_Jones, NASDAQ.'}, {'name': 'news_articles', 'type': 'ARRAY', 'description': 'An array of news article IDs to include in the analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A market trend analysis report summarizing the performance of specified indices and relevant news articles.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceNews.get_recent_articles` 并传入 `category` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceNews.get_recent_articles\",\n    \"args\": \"{'category': 'global_markets', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解全球金融市场的最新趋势。首先，获取最近一周内关于全球金融市场的5篇新闻报道。然后，分析这些报道中提到的主要金融指数，如道琼斯工业平均指数和纳斯达克指数。接着，获取这些指数在过去一个月的每日收盘价数据。最后，基于这些数据，提供一份简短的市场趋势分析报告。"
            }
        ]
    },
    "416": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankReportSearch.find_financial_reports",
                "BankReportAnalysis.analyze_financial_ratios",
                "StockMarketData.get_stock_history",
                "FinancialHealthAssessment.generate_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankReportSearch.find_financial_reports",
                "args": "{\"bankName\": \"GlobalTrust Bank\", \"years\": [2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BankReportAnalysis.analyze_financial_ratios",
                "args": "{\"ratios\": [\"assetLiabilityRatio\", \"netProfitMargin\"], \"reports\": [1, 2, 3]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_stock_history",
                "args": "{\"bankSymbol\": \"GTB\", \"duration\": \"1 year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialHealthAssessment.generate_report",
                "args": "{\"bankName\": \"GlobalTrust Bank\", \"ratiosAnalysis\": 4, \"stockHistory\": 5}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankReportSearch.find_financial_reports', {'name': 'BankReportSearch.find_financial_reports', 'description': 'This function searches for financial reports of a bank based on the bank name and specified years.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}, {'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which reports are required.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to three financial reports for the specified bank and years.'}]}], ['BankReportAnalysis.analyze_financial_ratios', {'name': 'BankReportAnalysis.analyze_financial_ratios', 'description': 'This function analyzes financial ratios from bank reports.', 'required_parameters': [{'name': 'ratios', 'type': 'ARRAY', 'description': 'An array of ratios to analyze, e.g., assetLiabilityRatio, netProfitMargin.'}, {'name': 'reports', 'type': 'ARRAY', 'description': 'An array of report IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected financial ratios from the reports.'}]}], ['StockMarketData.get_stock_history', {'name': 'StockMarketData.get_stock_history', 'description': 'This function retrieves historical stock data for a bank.', 'required_parameters': [{'name': 'bankSymbol', 'type': 'STRING', 'description': 'The stock symbol of the bank.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which stock history is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'history', 'description': 'Historical stock data for the specified bank and duration.'}]}], ['FinancialHealthAssessment.generate_report', {'name': 'FinancialHealthAssessment.generate_report', 'description': 'This function generates a financial health assessment report for a bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}, {'name': 'ratiosAnalysis', 'type': 'NUMBER', 'description': 'The ID of the ratios analysis.'}, {'name': 'stockHistory', 'type': 'NUMBER', 'description': 'The ID of the stock history data.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A financial health assessment report for the bank.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankReportSearch.find_financial_reports` 并传入 `bankName` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankReportSearch.find_financial_reports\",\n    \"args\": \"{'bankName': 'GlobalTrust Bank', 'years': [2020, 2021, 2022]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估GlobalTrust Bank的财务健康状况。首先，获取该银行最近三年的年度财务报告。然后，分析报告中的关键财务比率，如资产负债率和净利润率。接着，获取该银行的股票在过去一年的交易数据。最后，基于这些数据，提供一份财务健康状况评估报告。"
            }
        ]
    },
    "418": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketResearch.find_reports",
                "MarketResearch.analyze_economic_indicators",
                "MarketResearch.get_stock_index_performance",
                "MarketResearch.generate_investment_analysis"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.find_reports",
                "args": "{\"marketType\": \"emerging\", \"reportCount\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketResearch.analyze_economic_indicators",
                "args": "{\"indicators\": [\"GDP_growth\", \"inflation_rate\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketResearch.get_stock_index_performance",
                "args": "{\"timeFrame\": \"1_year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketResearch.generate_investment_analysis",
                "args": "{\"analysisType\": \"investment_opportunities\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketResearch.find_reports', {'name': 'MarketResearch.find_reports', 'description': 'This function searches for market research reports based on market type and the number of reports required.', 'required_parameters': [{'name': 'marketType', 'type': 'STRING', 'description': 'The type of market, e.g., emerging, developed.'}, {'name': 'reportCount', 'type': 'NUMBER', 'description': 'The number of reports to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to the specified number of matching market research reports.'}]}], ['MarketResearch.analyze_economic_indicators', {'name': 'MarketResearch.analyze_economic_indicators', 'description': 'This function analyzes economic indicators for specified markets.', 'required_parameters': [{'name': 'indicators', 'type': 'ARRAY', 'description': 'An array of economic indicators to analyze, e.g., GDP_growth, inflation_rate.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the specified economic indicators for the market.'}]}], ['MarketResearch.get_stock_index_performance', {'name': 'MarketResearch.get_stock_index_performance', 'description': 'This function retrieves the performance of stock indices for a specified time frame.', 'required_parameters': [{'name': 'timeFrame', 'type': 'STRING', 'description': 'The time frame for which to retrieve performance data, e.g., 1_year, 5_years.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance', 'description': 'Performance data of stock indices for the specified time frame.'}]}], ['MarketResearch.generate_investment_analysis', {'name': 'MarketResearch.generate_investment_analysis', 'description': 'This function generates an investment analysis report based on the provided data.', 'required_parameters': [{'name': 'analysisType', 'type': 'STRING', 'description': 'The type of analysis to generate, e.g., investment_opportunities, risk_assessment.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'An investment analysis report based on the specified analysis type.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketResearch.find_reports` 并传入 `marketType` 和 `reportCount`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketResearch.find_reports\",\n    \"args\": \"{'marketType': 'emerging', 'reportCount': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究新兴市场的投资机会。首先，获取关于新兴市场的5篇最新研究报告。然后，分析报告中提到的新兴市场国家的经济指标，如GDP增长率和通货膨胀率。接着，获取这些国家的主要股票指数在过去一年的表现数据。最后，基于这些数据，提供一份投资机会分析报告。"
            }
        ]
    },
    "419": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoNewsAggregator.get_recent_news",
                "CryptoMarketData.fetch_daily_prices",
                "MarketAnalysis.compute_volatility"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoNewsAggregator.get_recent_news",
                "args": "{\"currency\": [\"bitcoin\", \"ethereum\"], \"timeframe\": \"1 month\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoMarketData.fetch_daily_prices",
                "args": "{\"currencies\": [\"bitcoin\", \"ethereum\"], \"timeframe\": \"1 month\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketAnalysis.compute_volatility",
                "args": "{\"prices\": {\"bitcoin\": [1, 2, 3, 4, 5], \"ethereum\": [6, 7, 8, 9, 10]}}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoNewsAggregator.get_recent_news', {'name': 'CryptoNewsAggregator.get_recent_news', 'description': 'This function retrieves recent news articles about specified cryptocurrencies within a given timeframe.', 'required_parameters': [{'name': 'currency', 'type': 'ARRAY', 'description': 'An array of cryptocurrency symbols, e.g., [\"bitcoin\", \"ethereum\"].'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for news articles, e.g., \"1 month\".'}], 'optional_parameters': [], 'return_data': [{'name': 'news', 'description': 'A list of up to five news articles about the specified cryptocurrencies.'}]}], ['CryptoMarketData.fetch_daily_prices', {'name': 'CryptoMarketData.fetch_daily_prices', 'description': 'This function fetches daily price data for specified cryptocurrencies within a given timeframe.', 'required_parameters': [{'name': 'currencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency symbols, e.g., [\"bitcoin\", \"ethereum\"].'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for price data, e.g., \"1 month\".'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'A dictionary of daily price data for each cryptocurrency.'}]}], ['MarketAnalysis.compute_volatility', {'name': 'MarketAnalysis.compute_volatility', 'description': 'This function computes the volatility of specified cryptocurrencies based on their daily price data.', 'required_parameters': [{'name': 'prices', 'type': 'DICTIONARY', 'description': 'A dictionary of daily price data for each cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'volatility', 'description': 'A dictionary of volatility values for each cryptocurrency.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoNewsAggregator.get_recent_news` 并传入 `currency` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoNewsAggregator.get_recent_news\",\n    \"args\": \"{'currency': ['bitcoin', 'ethereum'], 'timeframe': '1 month'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析加密货币市场的波动性。首先，获取最近一个月内关于加密货币的5篇新闻报道。然后，分析这些报道中提到的主要加密货币，如比特币和以太坊。接着，获取这些加密货币在过去一个月的每日价格数据。最后，基于这些数据，提供一份市场波动性分析报告。"
            }
        ]
    },
    "421": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GreenFinanceResearch.find_articles",
                "GreenFinanceResearch.analyze_projects",
                "GreenFinanceResearch.get_funding_data",
                "GreenFinanceResearch.generate_trend_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GreenFinanceResearch.find_articles",
                "args": "{\"count\": 5, \"topic\": \"green finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GreenFinanceResearch.analyze_projects",
                "args": "{\"articles\": [1, 2, 3, 4, 5]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GreenFinanceResearch.get_funding_data",
                "args": "{\"projects\": [\"projectA\", \"projectB\", \"projectC\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GreenFinanceResearch.generate_trend_report",
                "args": "{\"fundingData\": [1000000, 1500000, 2000000]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GreenFinanceResearch.find_articles', {'name': 'GreenFinanceResearch.find_articles', 'description': 'This function searches for the latest research articles on a specified topic.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}, {'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., green finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five article IDs.'}]}], ['GreenFinanceResearch.analyze_projects', {'name': 'GreenFinanceResearch.analyze_projects', 'description': 'This function analyzes projects mentioned in research articles.', 'required_parameters': [{'name': 'articles', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': 'A list of projects and policies mentioned in the articles.'}]}], ['GreenFinanceResearch.get_funding_data', {'name': 'GreenFinanceResearch.get_funding_data', 'description': 'This function retrieves funding data for specified projects.', 'required_parameters': [{'name': 'projects', 'type': 'ARRAY', 'description': 'An array of project names to retrieve funding data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'funding', 'description': 'Funding data for each project over the past year.'}]}], ['GreenFinanceResearch.generate_trend_report', {'name': 'GreenFinanceResearch.generate_trend_report', 'description': 'This function generates a trend report based on funding data.', 'required_parameters': [{'name': 'fundingData', 'type': 'ARRAY', 'description': 'An array of funding data for analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A trend report on green finance development.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `GreenFinanceResearch.find_articles` 并传入 `count` 和 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"GreenFinanceResearch.find_articles\",\n    \"args\": \"{'count': 5, 'topic': 'green finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解绿色金融的发展趋势。首先，获取关于绿色金融的5篇最新研究文章。然后，分析这些文章中提到的绿色金融项目和政策。接着，获取这些项目在过去一年的资金流动数据。最后，基于这些数据，提供一份绿色金融发展趋势分析报告。"
            }
        ]
    },
    "423": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceRiskAnalysis.get_risk_management_reports",
                "InsuranceRiskAnalysis.analyze_risk_indicators",
                "StockMarketData.get_stock_data",
                "InsuranceRiskAnalysis.generate_risk_assessment_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceRiskAnalysis.get_risk_management_reports",
                "args": "{\"insuranceCompany\": \"ABC Insurance\", \"years\": [2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceRiskAnalysis.analyze_risk_indicators",
                "args": "{\"reports\": [\"ABC_2020\", \"ABC_2021\", \"ABC_2022\"], \"indicators\": [\"solvency_ratio\", \"capital_adequacy\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_stock_data",
                "args": "{\"company\": \"ABC Insurance\", \"duration\": \"1 year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceRiskAnalysis.generate_risk_assessment_report",
                "args": "{\"company\": \"ABC Insurance\", \"riskIndicators\": [\"solvency_ratio\", \"capital_adequacy\"], \"stockData\": \"ABC_Stock_Data_1Y\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceRiskAnalysis.get_risk_management_reports', {'name': 'InsuranceRiskAnalysis.get_risk_management_reports', 'description': 'This function retrieves risk management reports for a specified insurance company for given years.', 'required_parameters': [{'name': 'insuranceCompany', 'type': 'STRING', 'description': 'The name of the insurance company.'}, {'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which reports are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of risk management reports for the specified years.'}]}], ['InsuranceRiskAnalysis.analyze_risk_indicators', {'name': 'InsuranceRiskAnalysis.analyze_risk_indicators', 'description': 'This function analyzes specified risk indicators from provided risk management reports.', 'required_parameters': [{'name': 'reports', 'type': 'ARRAY', 'description': 'An array of report identifiers to analyze.'}, {'name': 'indicators', 'type': 'ARRAY', 'description': 'An array of risk indicators to analyze from the reports.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the specified risk indicators.'}]}], ['StockMarketData.get_stock_data', {'name': 'StockMarketData.get_stock_data', 'description': 'This function retrieves stock market data for a specified company over a given duration.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which stock data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockData', 'description': 'Stock market data for the specified duration.'}]}], ['InsuranceRiskAnalysis.generate_risk_assessment_report', {'name': 'InsuranceRiskAnalysis.generate_risk_assessment_report', 'description': 'This function generates a risk assessment report for a specified insurance company based on analyzed risk indicators and stock market data.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the insurance company.'}, {'name': 'riskIndicators', 'type': 'ARRAY', 'description': 'An array of risk indicators analyzed.'}, {'name': 'stockData', 'type': 'STRING', 'description': 'Identifier for the stock market data.'}], 'optional_parameters': [], 'return_data': [{'name': 'riskAssessmentReport', 'description': 'A comprehensive risk assessment report.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InsuranceRiskAnalysis.get_risk_management_reports` 并传入 `insuranceCompany` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InsuranceRiskAnalysis.get_risk_management_reports\",\n    \"args\": \"{'insuranceCompany': 'XYZ Insurance', 'years': [2018, 2019, 2020]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家名为ABC Insurance的保险公司的风险管理能力。首先，获取该公司最近三年的风险管理报告。然后，分析报告中的风险指标，如偿付能力和资本充足率。接着，获取该公司的股票在过去一年的交易数据。最后，基于这些数据，提供一份风险管理能力评估报告。"
            }
        ]
    },
    "425": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceResearch.find_articles",
                "FinanceResearch.analyze_articles",
                "BankPerformance.get_bank_data",
                "FinanceResearch.generate_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceResearch.find_articles",
                "args": "{\"topic\": \"金融科技\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceResearch.analyze_articles",
                "args": "{\"articles\": [1, 2, 3, 4, 5]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BankPerformance.get_bank_data",
                "args": "{\"year\": 2022}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceResearch.generate_report",
                "args": "{\"analysis\": \"金融科技影响分析\", \"bank_data\": 2022}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceResearch.find_articles', {'name': 'FinanceResearch.find_articles', 'description': 'This function searches for research articles based on a topic and returns a specified number of articles.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to the specified number of research articles.'}]}], ['FinanceResearch.analyze_articles', {'name': 'FinanceResearch.analyze_articles', 'description': 'This function analyzes a list of research articles and extracts key findings.', 'required_parameters': [{'name': 'articles', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'A summary of key findings from the analyzed articles.'}]}], ['BankPerformance.get_bank_data', {'name': 'BankPerformance.get_bank_data', 'description': 'This function retrieves performance data for traditional banks for a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which to retrieve bank performance data.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Performance data for traditional banks for the specified year.'}]}], ['FinanceResearch.generate_report', {'name': 'FinanceResearch.generate_report', 'description': 'This function generates a report based on the analysis of research articles and bank performance data.', 'required_parameters': [{'name': 'analysis', 'type': 'STRING', 'description': 'The analysis of research articles.'}, {'name': 'bank_data', 'type': 'NUMBER', 'description': 'The year of bank performance data.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A comprehensive report on the impact of fintech on traditional banking.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceResearch.find_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceResearch.find_articles\",\n    \"args\": \"{'topic': '金融科技', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究金融科技对传统银行业的影响。首先，获取关于金融科技的5篇最新研究文章。然后，分析这些文章中提到的金融科技应用和创新。接着，获取传统银行在过去一年的业绩数据。最后，基于这些数据，提供一份金融科技影响分析报告。"
            }
        ]
    },
    "427": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateResearch.find_latest_reports",
                "RealEstateAnalysis.extract_city_data",
                "RealEstateData.get_transaction_history",
                "InvestmentPotential.generate_analysis_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateResearch.find_latest_reports",
                "args": "{\"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateAnalysis.extract_city_data",
                "args": "{\"reportIds\": [1, 2, 3, 4, 5]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateData.get_transaction_history",
                "args": "{\"cities\": [\"NewYork\", \"LosAngeles\", \"Chicago\", \"Houston\", \"Philadelphia\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentPotential.generate_analysis_report",
                "args": "{\"cities\": [\"NewYork\", \"LosAngeles\", \"Chicago\", \"Houston\", \"Philadelphia\"], \"transactionHistory\": [1, 2, 3, 4, 5]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateResearch.find_latest_reports', {'name': 'RealEstateResearch.find_latest_reports', 'description': 'This function searches for the latest real estate market research reports.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of reports to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five latest research reports.'}]}], ['RealEstateAnalysis.extract_city_data', {'name': 'RealEstateAnalysis.extract_city_data', 'description': 'This function extracts city data from real estate research reports.', 'required_parameters': [{'name': 'reportIds', 'type': 'ARRAY', 'description': 'An array of report IDs to extract city data from.'}], 'optional_parameters': [], 'return_data': [{'name': 'cityData', 'description': 'A list of cities and their real estate market data.'}]}], ['RealEstateData.get_transaction_history', {'name': 'RealEstateData.get_transaction_history', 'description': 'This function retrieves the real estate transaction history for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names to retrieve transaction history for.'}], 'optional_parameters': [], 'return_data': [{'name': 'history', 'description': 'A list of transaction histories for the specified cities.'}]}], ['InvestmentPotential.generate_analysis_report', {'name': 'InvestmentPotential.generate_analysis_report', 'description': 'This function generates an investment potential analysis report based on city data and transaction history.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names to include in the analysis.'}, {'name': 'transactionHistory', 'type': 'ARRAY', 'description': 'An array of transaction history IDs to include in the analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'An investment potential analysis report.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateResearch.find_latest_reports` 并传入 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateResearch.find_latest_reports\",\n    \"args\": \"{'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析房地产市场的投资潜力。首先，获取关于房地产市场的5篇最新研究报告。然后，分析报告中提到的主要城市和地区的房价指数。接着，获取这些地区在过去一年的房地产交易数据。最后，基于这些数据，提供一份投资潜力分析报告。"
            }
        ]
    },
    "429": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PrivateEquityResearch.find_articles",
                "PrivateEquityResearch.analyze_funds",
                "PrivateEquityResearch.get_performance_data",
                "PrivateEquityResearch.generate_strategy_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PrivateEquityResearch.find_articles",
                "args": "{\"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PrivateEquityResearch.analyze_funds",
                "args": "{\"articleIds\": [1, 2, 3, 4, 5]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PrivateEquityResearch.get_performance_data",
                "args": "{\"fundIds\": [101, 102, 103, 104, 105]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PrivateEquityResearch.generate_strategy_report",
                "args": "{\"performanceData\": [101, 102, 103, 104, 105]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PrivateEquityResearch.find_articles', {'name': 'PrivateEquityResearch.find_articles', 'description': 'This function searches for the latest research articles on private equity.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five research articles on private equity.'}]}], ['PrivateEquityResearch.analyze_funds', {'name': 'PrivateEquityResearch.analyze_funds', 'description': 'This function analyzes private equity funds mentioned in articles.', 'required_parameters': [{'name': 'articleIds', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'funds', 'description': 'A list of funds mentioned in the articles, each with an ID and details.'}]}], ['PrivateEquityResearch.get_performance_data', {'name': 'PrivateEquityResearch.get_performance_data', 'description': 'This function retrieves performance data for private equity funds.', 'required_parameters': [{'name': 'fundIds', 'type': 'ARRAY', 'description': 'An array of fund IDs to retrieve performance data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance', 'description': 'Performance data for the selected funds, including returns and benchmarks.'}]}], ['PrivateEquityResearch.generate_strategy_report', {'name': 'PrivateEquityResearch.generate_strategy_report', 'description': 'This function generates an investment strategy report based on performance data.', 'required_parameters': [{'name': 'performanceData', 'type': 'ARRAY', 'description': 'An array of performance data for funds.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'An investment strategy report based on the performance data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `PrivateEquityResearch.find_articles` 并传入 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"PrivateEquityResearch.find_articles\",\n    \"args\": \"{'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解私募股权的投资策略。首先，获取关于私募股权的5篇最新研究文章。然后，分析这些文章中提到的私募股权基金和投资案例。接着，获取这些基金在过去一年的业绩数据。最后，基于这些数据，提供一份投资策略分析报告。"
            }
        ]
    },
    "431": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ESGReportSearch.find_sustainability_reports",
                "ESGReportAnalysis.analyze_ESG_metrics",
                "StockDataRetrieval.get_stock_data",
                "SustainabilityAssessment.generate_assessment_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ESGReportSearch.find_sustainability_reports",
                "args": "{\"companyName\": \"GreenEnergyCorp\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ESGReportAnalysis.analyze_ESG_metrics",
                "args": "{\"reportId\": 45678}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockDataRetrieval.get_stock_data",
                "args": "{\"companyId\": 45678, \"duration\": \"1 year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SustainabilityAssessment.generate_assessment_report",
                "args": "{\"reportId\": 45678, \"stockData\": [123.45, 124.56, 125.67]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ESGReportSearch.find_sustainability_reports', {'name': 'ESGReportSearch.find_sustainability_reports', 'description': 'This function searches for sustainability reports based on the company name.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company for which to find sustainability reports.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to three matching sustainability reports, each with an ID and publication date.'}]}], ['ESGReportAnalysis.analyze_ESG_metrics', {'name': 'ESGReportAnalysis.analyze_ESG_metrics', 'description': 'This function analyzes ESG metrics from a specific sustainability report given its ID.', 'required_parameters': [{'name': 'reportId', 'type': 'NUMBER', 'description': 'The ID of the sustainability report.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the ESG metrics, including environmental impact, social responsibility, and governance practices.'}]}], ['StockDataRetrieval.get_stock_data', {'name': 'StockDataRetrieval.get_stock_data', 'description': 'This function retrieves stock data for a company over a specified duration.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the company.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which to retrieve stock data, e.g., 1 year, 6 months.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockData', 'description': 'Historical stock data for the company over the specified duration.'}]}], ['SustainabilityAssessment.generate_assessment_report', {'name': 'SustainabilityAssessment.generate_assessment_report', 'description': 'This function generates a sustainability assessment report based on ESG analysis and stock data.', 'required_parameters': [{'name': 'reportId', 'type': 'NUMBER', 'description': 'The ID of the sustainability report.'}, {'name': 'stockData', 'type': 'ARRAY', 'description': 'Historical stock data for the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'assessmentReport', 'description': 'A comprehensive sustainability assessment report.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ESGReportSearch.find_sustainability_reports` 并传入 `companyName`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ESGReportSearch.find_sustainability_reports\",\n    \"args\": \"{'companyName': 'GreenEnergyCorp'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家名为GreenEnergyCorp的能源公司的可持续发展能力。首先，获取该公司的可持续发展报告。然后，分析报告中的环境、社会和治理（ESG）指标。接着，获取该公司的股票在过去一年的交易数据。最后，基于这些数据，提供一份可持续发展能力评估报告。"
            }
        ]
    },
    "433": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancePolicySearch.find_policies",
                "FinancePolicySearch.get_policy_details",
                "FinanceDataAccess.fetch_financing_data",
                "DataAnalysis.assess_impact"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancePolicySearch.find_policies",
                "args": "{\"category\": \"environmental_tech\", \"focus\": \"innovation\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancePolicySearch.get_policy_details",
                "args": "{\"policyId\": 54321}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceDataAccess.fetch_financing_data",
                "args": "{\"industry\": \"environmental_tech\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataAnalysis.assess_impact",
                "args": "{\"policyId\": 54321, \"industryData\": \"environmental_tech\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancePolicySearch.find_policies', {'name': 'FinancePolicySearch.find_policies', 'description': 'This function searches for financial support policies based on category and focus.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of the policy, e.g., environmental_tech.'}, {'name': 'focus', 'type': 'STRING', 'description': 'The focus of the policy, e.g., innovation.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of up to three matching policies, each with an ID, category, and focus.'}]}], ['FinancePolicySearch.get_policy_details', {'name': 'FinancePolicySearch.get_policy_details', 'description': 'This function retrieves detailed information about a specific financial policy given its ID.', 'required_parameters': [{'name': 'policyId', 'type': 'NUMBER', 'description': 'The ID of the financial policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the policy, including measures and scope.'}]}], ['FinanceDataAccess.fetch_financing_data', {'name': 'FinanceDataAccess.fetch_financing_data', 'description': 'This function fetches financing data for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry for which financing data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Financing data for the requested industry.'}]}], ['DataAnalysis.assess_impact', {'name': 'DataAnalysis.assess_impact', 'description': 'This function assesses the impact of a financial policy on a specific industry.', 'required_parameters': [{'name': 'policyId', 'type': 'NUMBER', 'description': 'The ID of the financial policy.'}, {'name': 'industryData', 'type': 'STRING', 'description': 'The industry data to assess the impact against.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'The assessed impact of the policy on the industry.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancePolicySearch.find_policies` 并传入 `category` 和 `focus`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancePolicySearch.find_policies\",\n    \"args\": \"{'category': 'environmental_tech', 'focus': 'innovation'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析金融支持环保科技创新政策对环保科技行业的影响。首先，获取最新的金融支持环保科技创新政策文件。然后，分析这些政策对环保科技行业的具体支持措施。接着，获取环保科技行业的融资数据。最后，通过融资数据分析，评估政策对环保科技行业的影响。"
            }
        ]
    },
    "435": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancePolicySearch.find_policies",
                "FinancePolicySearch.get_policy_details",
                "FinanceDataSearch.fetch_financing_data",
                "DataAnalysis.assess_policy_impact"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancePolicySearch.find_policies",
                "args": "{\"industry\": \"sports_fitness\", \"support_type\": \"financial\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancePolicySearch.get_policy_details",
                "args": "{\"policyId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceDataSearch.fetch_financing_data",
                "args": "{\"industry\": \"sports_fitness\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataAnalysis.assess_policy_impact",
                "args": "{\"policyId\": 1001, \"financingData\": [123456, 789012]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancePolicySearch.find_policies', {'name': 'FinancePolicySearch.find_policies', 'description': 'This function searches for financial support policies for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to search for policies, e.g., sports_fitness.'}, {'name': 'support_type', 'type': 'STRING', 'description': 'The type of support, e.g., financial.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of up to three matching policies, each with an ID, type, and details.'}]}], ['FinancePolicySearch.get_policy_details', {'name': 'FinancePolicySearch.get_policy_details', 'description': 'This function retrieves detailed information about a specific financial policy given its ID.', 'required_parameters': [{'name': 'policyId', 'type': 'NUMBER', 'description': 'The ID of the financial policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the policy, including support measures and terms.'}]}], ['FinanceDataSearch.fetch_financing_data', {'name': 'FinanceDataSearch.fetch_financing_data', 'description': 'This function fetches financing data for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to fetch financing data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'financingData', 'description': 'A list of financing data points for the industry.'}]}], ['DataAnalysis.assess_policy_impact', {'name': 'DataAnalysis.assess_policy_impact', 'description': 'This function assesses the impact of a financial policy on an industry based on financing data.', 'required_parameters': [{'name': 'policyId', 'type': 'NUMBER', 'description': 'The ID of the financial policy to assess.'}, {'name': 'financingData', 'type': 'ARRAY', 'description': 'An array of financing data points to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'impactAnalysis', 'description': 'An analysis of the policy impact on the industry, including trends and effects.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancePolicySearch.find_policies` 并传入 `industry` 和 `support_type`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancePolicySearch.find_policies\",\n    \"args\": \"{'industry': 'sports_fitness', 'support_type': 'financial'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析金融支持体育健身产业发展政策对体育健身行业的影响。首先，获取最新的金融支持体育健身产业发展政策文件。然后，分析这些政策对体育健身行业的具体支持措施。接着，获取体育健身行业的融资数据。最后，通过融资数据分析，评估政策对体育健身行业的影响。"
            }
        ]
    },
    "437": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoNews.get_recent_news",
                "CryptoMarket.get_price_history",
                "CryptoMarket.get_current_price",
                "CryptoMarket.get_crypto_details",
                "InvestmentStrategy.suggest_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoNews.get_recent_news",
                "args": "{\"crypto\": \"bitcoin\", \"duration\": \"1 week\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoMarket.get_price_history",
                "args": "{\"crypto\": \"bitcoin\", \"duration\": \"30 days\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoMarket.get_current_price",
                "args": "{\"crypto\": \"bitcoin\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoMarket.get_crypto_details",
                "args": "{\"crypto\": \"bitcoin\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentStrategy.suggest_strategy",
                "args": "{\"crypto\": \"bitcoin\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoNews.get_recent_news', {'name': 'CryptoNews.get_recent_news', 'description': 'This function retrieves recent news articles about a specific cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to search news for, e.g., bitcoin, ethereum.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which to retrieve news, e.g., 1 week, 1 month.'}], 'optional_parameters': [], 'return_data': [{'name': 'news', 'description': 'A list of up to five news articles about the cryptocurrency.'}]}], ['CryptoMarket.get_price_history', {'name': 'CryptoMarket.get_price_history', 'description': 'This function retrieves historical price data for a cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to retrieve price history for.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which to retrieve price history, e.g., 30 days, 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'price_history', 'description': 'Historical price data for the cryptocurrency.'}]}], ['CryptoMarket.get_current_price', {'name': 'CryptoMarket.get_current_price', 'description': 'This function retrieves the current price of a cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to retrieve the current price for.'}], 'optional_parameters': [], 'return_data': [{'name': 'current_price', 'description': 'The current price of the cryptocurrency.'}]}], ['CryptoMarket.get_crypto_details', {'name': 'CryptoMarket.get_crypto_details', 'description': 'This function retrieves detailed information about a cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to retrieve details for.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the cryptocurrency, including market cap, volume, and supply.'}]}], ['InvestmentStrategy.suggest_strategy', {'name': 'InvestmentStrategy.suggest_strategy', 'description': 'This function suggests an investment strategy for a cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The cryptocurrency to suggest a strategy for.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'An investment strategy for the cryptocurrency, considering market trends and volatility.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoNews.get_recent_news` 并传入 `crypto` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoNews.get_recent_news\",\n    \"args\": \"{'crypto': 'bitcoin', 'duration': '1 week'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解数字货币市场的最新动态。首先，获取最近一周关于比特币的5篇新闻报道。然后，获取比特币过去30天的价格历史数据。接着，获取比特币当前的实时交易价格。最后，通过货币名称获取比特币的详细信息，并提供一些投资策略建议。"
            }
        ]
    },
    "438": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ForexMarketAnalysis.find_articles",
                "ForexMarketAnalysis.get_historical_rates",
                "ForexMarketAnalysis.get_live_rate",
                "ForexMarketAnalysis.get_currency_pair_details",
                "ForexMarketAnalysis.suggest_trading_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ForexMarketAnalysis.find_articles",
                "args": "{\"currencyPair\": \"USD/EUR\", \"timeFrame\": \"1 month\", \"articleCount\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ForexMarketAnalysis.get_historical_rates",
                "args": "{\"currencyPair\": \"USD/EUR\", \"timeFrame\": \"90 days\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ForexMarketAnalysis.get_live_rate",
                "args": "{\"currencyPair\": \"USD/EUR\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ForexMarketAnalysis.get_currency_pair_details",
                "args": "{\"currencyPair\": \"USD/EUR\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ForexMarketAnalysis.suggest_trading_strategies",
                "args": "{\"currencyPair\": \"USD/EUR\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ForexMarketAnalysis.find_articles', {'name': 'ForexMarketAnalysis.find_articles', 'description': 'This function searches for analysis articles about a specific currency pair within a given time frame.', 'required_parameters': [{'name': 'currencyPair', 'type': 'STRING', 'description': 'The currency pair to analyze, e.g., USD/EUR.'}, {'name': 'timeFrame', 'type': 'STRING', 'description': 'The time frame for the articles, e.g., 1 month.'}, {'name': 'articleCount', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five analysis articles about the specified currency pair.'}]}], ['ForexMarketAnalysis.get_historical_rates', {'name': 'ForexMarketAnalysis.get_historical_rates', 'description': 'This function retrieves historical exchange rates for a specific currency pair within a given time frame.', 'required_parameters': [{'name': 'currencyPair', 'type': 'STRING', 'description': 'The currency pair to analyze, e.g., USD/EUR.'}, {'name': 'timeFrame', 'type': 'STRING', 'description': 'The time frame for the historical rates, e.g., 90 days.'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'Historical exchange rates for the specified currency pair.'}]}], ['ForexMarketAnalysis.get_live_rate', {'name': 'ForexMarketAnalysis.get_live_rate', 'description': 'This function retrieves the current live exchange rate for a specific currency pair.', 'required_parameters': [{'name': 'currencyPair', 'type': 'STRING', 'description': 'The currency pair to analyze, e.g., USD/EUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'liveRate', 'description': 'The current live exchange rate for the specified currency pair.'}]}], ['ForexMarketAnalysis.get_currency_pair_details', {'name': 'ForexMarketAnalysis.get_currency_pair_details', 'description': 'This function retrieves detailed information about a specific currency pair.', 'required_parameters': [{'name': 'currencyPair', 'type': 'STRING', 'description': 'The currency pair to analyze, e.g., USD/EUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the specified currency pair, including volatility and trading volume.'}]}], ['ForexMarketAnalysis.suggest_trading_strategies', {'name': 'ForexMarketAnalysis.suggest_trading_strategies', 'description': 'This function suggests trading strategies based on the analysis of a specific currency pair.', 'required_parameters': [{'name': 'currencyPair', 'type': 'STRING', 'description': 'The currency pair to analyze, e.g., USD/EUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of suggested trading strategies for the specified currency pair.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ForexMarketAnalysis.find_articles` 并传入 `currencyPair`, `timeFrame`, 和 `articleCount`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ForexMarketAnalysis.find_articles\",\n    \"args\": \"{'currencyPair': 'USD/EUR', 'timeFrame': '1 month', 'articleCount': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析国际外汇市场的波动。首先，获取最近一个月关于美元兑欧元汇率的5篇分析文章。然后，获取美元兑欧元过去90天的汇率历史数据。接着，获取美元兑欧元当前的实时汇率。最后，通过货币对名称获取详细信息，并提供一些交易策略建议。"
            }
        ]
    },
    "440": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketResearch.find_recent_reports",
                "MarketData.get_index_history",
                "MarketData.get_current_index_data",
                "MarketAnalysis.analyze_market",
                "InvestmentAdvice.generate_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.find_recent_reports",
                "args": "{\"category\": \"emerging_markets\", \"timeframe\": \"3_months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketData.get_index_history",
                "args": "{\"index\": \"EMI\", \"timeframe\": \"1_year\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketData.get_current_index_data",
                "args": "{\"index\": \"EMI\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketAnalysis.analyze_market",
                "args": "{\"index\": \"EMI\", \"market\": \"emerging\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentAdvice.generate_advice",
                "args": "{\"market\": \"emerging\", \"index\": \"EMI\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketResearch.find_recent_reports', {'name': 'MarketResearch.find_recent_reports', 'description': 'This function searches for recent market research reports based on category and timeframe.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of market research, e.g., emerging_markets, developed_markets.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the reports, e.g., 3_months, 1_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five matching reports, each with a title, author, and publication date.'}]}], ['MarketData.get_index_history', {'name': 'MarketData.get_index_history', 'description': 'This function retrieves historical data for a specific market index.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The market index, e.g., EMI, MSCI.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the historical data, e.g., 1_year, 5_years.'}], 'optional_parameters': [], 'return_data': [{'name': 'history', 'description': 'Historical data for the index, including dates and values.'}]}], ['MarketData.get_current_index_data', {'name': 'MarketData.get_current_index_data', 'description': 'This function retrieves the current data for a specific market index.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The market index, e.g., EMI, MSCI.'}], 'optional_parameters': [], 'return_data': [{'name': 'current_data', 'description': 'Current data for the index, including the latest value and change percentage.'}]}], ['MarketAnalysis.analyze_market', {'name': 'MarketAnalysis.analyze_market', 'description': 'This function analyzes a specific market based on the index and market name.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The market index, e.g., EMI, MSCI.'}, {'name': 'market', 'type': 'STRING', 'description': 'The market name, e.g., emerging, developed.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'Analysis of the market, including trends, risks, and opportunities.'}]}], ['InvestmentAdvice.generate_advice', {'name': 'InvestmentAdvice.generate_advice', 'description': 'This function generates investment advice based on the market and index.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market name, e.g., emerging, developed.'}, {'name': 'index', 'type': 'STRING', 'description': 'The market index, e.g., EMI, MSCI.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified market and index.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketResearch.find_recent_reports` 并传入 `category` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketResearch.find_recent_reports\",\n    \"args\": \"{'category': 'emerging_markets', 'timeframe': '3_months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估新兴市场的投资机会。首先，获取最近三个月关于新兴市场经济的5篇研究报告。然后，获取新兴市场主要指数过去一年的历史数据。接着，获取这些指数当前的实时市场数据。最后，通过市场名称获取详细信息，并提供一些投资建议。"
            }
        ]
    },
    "441": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsurTechTrends.get_recent_articles",
                "InsurTechStocks.get_historical_data",
                "InsurTechStocks.get_realtime_data",
                "InsurTechCompanies.get_company_details",
                "InvestmentAdvice.provide_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsurTechTrends.get_recent_articles",
                "args": "{\"count\": 5, \"timeframe\": \"last_half_year\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsurTechStocks.get_historical_data",
                "args": "{\"duration\": \"two_years\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsurTechStocks.get_realtime_data",
                "args": "{\"companies\": [\"InsureTechCorp\", \"InnovateInsure\", \"RiskGuard\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsurTechCompanies.get_company_details",
                "args": "{\"company_names\": [\"InsureTechCorp\", \"InnovateInsure\", \"RiskGuard\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentAdvice.provide_advice",
                "args": "{\"companies\": [\"InsureTechCorp\", \"InnovateInsure\", \"RiskGuard\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsurTechTrends.get_recent_articles', {'name': 'InsurTechTrends.get_recent_articles', 'description': 'This function retrieves recent articles about InsurTech trends within a specified timeframe.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the articles, e.g., last_half_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of recent articles about InsurTech trends.'}]}], ['InsurTechStocks.get_historical_data', {'name': 'InsurTechStocks.get_historical_data', 'description': 'This function retrieves historical stock data for InsurTech companies.', 'required_parameters': [{'name': 'duration', 'type': 'STRING', 'description': 'The duration of historical data to retrieve, e.g., two_years.'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': 'Historical stock data for specified InsurTech companies.'}]}], ['InsurTechStocks.get_realtime_data', {'name': 'InsurTechStocks.get_realtime_data', 'description': 'This function retrieves real-time stock market data for specified InsurTech companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names for which to retrieve real-time stock data.'}], 'optional_parameters': [], 'return_data': [{'name': 'realtime_data', 'description': 'Real-time stock market data for specified companies.'}]}], ['InsurTechCompanies.get_company_details', {'name': 'InsurTechCompanies.get_company_details', 'description': 'This function retrieves detailed information about specified InsurTech companies.', 'required_parameters': [{'name': 'company_names', 'type': 'ARRAY', 'description': 'An array of company names for which to retrieve detailed information.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the specified companies.'}]}], ['InvestmentAdvice.provide_advice', {'name': 'InvestmentAdvice.provide_advice', 'description': 'This function provides investment advice based on the specified InsurTech companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names for which to provide investment advice.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified companies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InsurTechTrends.get_recent_articles` 并传入 `count` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InsurTechTrends.get_recent_articles\",\n    \"args\": \"{'count': 5, 'timeframe': 'last_half_year'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析保险科技的发展趋势。首先，获取最近半年关于保险科技的5篇行业分析文章。然后，获取保险科技公司股票过去两年的历史数据。接着，获取这些公司当前的实时股票市场数据。最后，通过公司名称获取详细信息，并提供一些投资建议。"
            }
        ]
    },
    "442": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BlockchainFinance.fetch_articles",
                "BlockchainFinance.get_company_stock_history",
                "BlockchainFinance.get_company_stock_live",
                "BlockchainFinance.get_company_details",
                "BlockchainFinance.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BlockchainFinance.fetch_articles",
                "args": "{\"count\": 5, \"timeframe\": \"last_year\", \"topic\": \"blockchain_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BlockchainFinance.get_company_stock_history",
                "args": "{\"companies\": [\"CompanyA\", \"CompanyB\", \"CompanyC\"], \"timeframe\": \"last_year\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BlockchainFinance.get_company_stock_live",
                "args": "{\"companies\": [\"CompanyA\", \"CompanyB\", \"CompanyC\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BlockchainFinance.get_company_details",
                "args": "{\"companies\": [\"CompanyA\", \"CompanyB\", \"CompanyC\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "BlockchainFinance.provide_investment_advice",
                "args": "{\"companies\": [\"CompanyA\", \"CompanyB\", \"CompanyC\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BlockchainFinance.fetch_articles', {'name': 'BlockchainFinance.fetch_articles', 'description': 'This function fetches recent articles on blockchain finance.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the articles, e.g., last_year.'}, {'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., blockchain_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles with titles, authors, and publication dates.'}]}], ['BlockchainFinance.get_company_stock_history', {'name': 'BlockchainFinance.get_company_stock_history', 'description': 'This function retrieves historical stock data for blockchain-related companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the stock data, e.g., last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'history', 'description': 'Historical stock data for the companies.'}]}], ['BlockchainFinance.get_company_stock_live', {'name': 'BlockchainFinance.get_company_stock_live', 'description': 'This function retrieves live stock data for blockchain-related companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'live_data', 'description': 'Live stock data for the companies.'}]}], ['BlockchainFinance.get_company_details', {'name': 'BlockchainFinance.get_company_details', 'description': 'This function retrieves detailed information about blockchain-related companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the companies, including financials and management.'}]}], ['BlockchainFinance.provide_investment_advice', {'name': 'BlockchainFinance.provide_investment_advice', 'description': 'This function provides investment advice based on company details.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the companies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BlockchainFinance.fetch_articles` 并传入 `count`, `timeframe`, 和 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BlockchainFinance.fetch_articles\",\n    \"args\": \"{'count': 5, 'timeframe': 'last_year', 'topic': 'blockchain_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解区块链技术在金融领域的应用。首先，获取最近一年关于区块链金融应用的5篇技术文章。然后，获取区块链相关公司股票过去一年的历史数据。接着，获取这些公司当前的实时股票市场数据。最后，通过公司名称获取详细信息，并提供一些投资建议。"
            }
        ]
    },
    "443": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialDataRetrieval.get_financial_statements",
                "FinancialDataAnalysis.analyze_trends",
                "StockMarketData.get_stock_performance",
                "InvestmentRiskAnalysis.evaluate_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialDataRetrieval.get_financial_statements",
                "args": "{\"companyName\": \"TechInnovate\", \"years\": [2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialDataAnalysis.analyze_trends",
                "args": "{\"companyName\": \"TechInnovate\", \"financialYears\": [2020, 2021, 2022]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_stock_performance",
                "args": "{\"companyName\": \"TechInnovate\", \"period\": \"1 year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentRiskAnalysis.evaluate_investment",
                "args": "{\"companyName\": \"TechInnovate\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialDataRetrieval.get_financial_statements', {'name': 'FinancialDataRetrieval.get_financial_statements', 'description': 'This function retrieves the financial statements of a company for specified years.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which financial statements are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'financialStatements', 'description': 'A list of financial statements for the specified years.'}]}], ['FinancialDataAnalysis.analyze_trends', {'name': 'FinancialDataAnalysis.analyze_trends', 'description': 'This function analyzes the trends in revenue, profit, and cash flow of a company over specified years.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'financialYears', 'type': 'ARRAY', 'description': 'An array of years for which trends are analyzed.'}], 'optional_parameters': [], 'return_data': [{'name': 'trendAnalysis', 'description': 'A detailed analysis of revenue, profit, and cash flow trends.'}]}], ['StockMarketData.get_stock_performance', {'name': 'StockMarketData.get_stock_performance', 'description': 'This function retrieves the stock performance data of a company for a specified period.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which stock performance data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockPerformance', 'description': 'Stock performance data including stock price and trading volume.'}]}], ['InvestmentRiskAnalysis.evaluate_investment', {'name': 'InvestmentRiskAnalysis.evaluate_investment', 'description': 'This function evaluates the investment risk and potential returns of a company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'investmentAnalysis', 'description': 'An analysis of investment risks and potential returns.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialDataRetrieval.get_financial_statements` 并传入 `companyName` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialDataRetrieval.get_financial_statements\",\n    \"args\": \"{'companyName': 'TechInnovate', 'years': [2020, 2021, 2022]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家名为TechInnovate的新兴科技公司的财务状况。首先，获取该公司最近三年的财务报表。然后，分析其收入、利润和现金流的变化趋势。接着，获取该公司的股票表现数据，包括过去一年的股价和交易量。最后，提供一些关于该公司的投资风险和潜在回报的分析。"
            }
        ]
    },
    "445": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateNews.get_recent_articles",
                "StockMarketAnalysis.fetch_stock_data",
                "RealEstateIndex.get_city_price_index",
                "InvestmentStrategy.suggest_investment_tactics"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateNews.get_recent_articles",
                "args": "{\"topic\": \"中国房地产市场\", \"timeframe\": \"1 month\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarketAnalysis.fetch_stock_data",
                "args": "{\"symbols\": [\"万科\", \"恒大\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateIndex.get_city_price_index",
                "args": "{\"cities\": [\"北京\", \"上海\", \"广州\", \"深圳\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.suggest_investment_tactics",
                "args": "{\"market\": \"中国房地产\", \"stockData\": [\"万科\", \"恒大\"], \"cityIndex\": [\"北京\", \"上海\", \"广州\", \"深圳\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateNews.get_recent_articles', {'name': 'RealEstateNews.get_recent_articles', 'description': 'This function retrieves recent articles on a specified topic within a given timeframe.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest for the articles.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe within which the articles were published.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five articles related to the specified topic.'}]}], ['StockMarketAnalysis.fetch_stock_data', {'name': 'StockMarketAnalysis.fetch_stock_data', 'description': 'This function fetches historical stock data for specified symbols.', 'required_parameters': [{'name': 'symbols', 'type': 'ARRAY', 'description': 'An array of stock symbols to fetch data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockData', 'description': 'Historical stock data for the specified symbols.'}]}], ['RealEstateIndex.get_city_price_index', {'name': 'RealEstateIndex.get_city_price_index', 'description': 'This function retrieves the real estate price index for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names to fetch the price index for.'}], 'optional_parameters': [], 'return_data': [{'name': 'cityIndex', 'description': 'Real estate price index for the specified cities.'}]}], ['InvestmentStrategy.suggest_investment_tactics', {'name': 'InvestmentStrategy.suggest_investment_tactics', 'description': 'This function suggests investment tactics based on market analysis, stock data, and real estate price index.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The real estate market of interest.'}, {'name': 'stockData', 'type': 'ARRAY', 'description': 'An array of stock symbols for analysis.'}, {'name': 'cityIndex', 'type': 'ARRAY', 'description': 'An array of city names for price index analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'tactics', 'description': 'Investment tactics and strategies based on the analysis.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateNews.get_recent_articles` 并传入 `topic` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateNews.get_recent_articles\",\n    \"args\": \"{'topic': '中国房地产市场', 'timeframe': '1 month'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国房地产市场的最新趋势。首先，获取最近一个月内关于中国房地产市场的5篇深度报道。然后，分析这些报道对房地产股票的影响，获取万科和恒大的股票历史数据。接着，获取中国主要城市的房价指数。最后，提供一些关于房地产投资的策略建议。"
            }
        ]
    },
    "446": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceDataCollector.get_revenue_profit",
                "FinanceDataCollector.analyze_trend",
                "FinanceDataCollector.get_stock_performance",
                "StrategyAdvisor.suggest_expansion_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceDataCollector.get_revenue_profit",
                "args": "{\"company\": \"GlobalTech\", \"countries\": [\"USA\", \"China\", \"Germany\"]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceDataCollector.analyze_trend",
                "args": "{\"company\": \"GlobalTech\", \"metric\": \"revenue\", \"time_period\": \"5 years\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceDataCollector.analyze_trend",
                "args": "{\"company\": \"GlobalTech\", \"metric\": \"profit\", \"time_period\": \"5 years\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceDataCollector.get_stock_performance",
                "args": "{\"company\": \"GlobalTech\", \"markets\": [\"NYSE\", \"SHSE\", \"FWB\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "StrategyAdvisor.suggest_expansion_strategy",
                "args": "{\"company\": \"GlobalTech\", \"current_markets\": [\"USA\", \"China\", \"Germany\"], \"potential_markets\": [\"India\", \"Brazil\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceDataCollector.get_revenue_profit', {'name': 'FinanceDataCollector.get_revenue_profit', 'description': 'This function retrieves revenue and profit data for a company in specified countries.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'countries', 'type': 'ARRAY', 'description': 'A list of countries where the company operates.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Revenue and profit data for the company in the specified countries.'}]}], ['FinanceDataCollector.analyze_trend', {'name': 'FinanceDataCollector.analyze_trend', 'description': 'This function analyzes the trend of a specified metric for a company over a given time period.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'metric', 'type': 'STRING', 'description': 'The metric to analyze, e.g., revenue, profit.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'trend', 'description': 'Analysis of the trend for the specified metric over the given time period.'}]}], ['FinanceDataCollector.get_stock_performance', {'name': 'FinanceDataCollector.get_stock_performance', 'description': 'This function retrieves stock performance data for a company in specified markets.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'markets', 'type': 'ARRAY', 'description': 'A list of markets where the company is listed.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance', 'description': 'Stock performance data for the company in the specified markets.'}]}], ['StrategyAdvisor.suggest_expansion_strategy', {'name': 'StrategyAdvisor.suggest_expansion_strategy', 'description': 'This function suggests expansion strategies for a company based on its current and potential markets.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'current_markets', 'type': 'ARRAY', 'description': 'A list of markets where the company currently operates.'}, {'name': 'potential_markets', 'type': 'ARRAY', 'description': 'A list of potential markets for expansion.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'Expansion strategy suggestions for the company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceDataCollector.get_revenue_profit` 并传入 `company` 和 `countries`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceDataCollector.get_revenue_profit\",\n    \"args\": \"{'company': 'GlobalTech', 'countries': ['USA', 'China', 'Germany']}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析一家名为GlobalTech的跨国公司的全球业务表现。首先，获取该公司在不同国家的业务收入和利润数据。然后，分析这些数据随时间的变化趋势。接着，获取该公司在主要市场的股票表现，包括股价和交易量。最后，提供一些关于该公司全球扩张策略的建议。"
            }
        ]
    },
    "448": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoNews.get_recent_articles",
                "CryptoPriceAnalysis.analyze_price_impact",
                "CryptoPriceAnalysis.get_live_prices",
                "CryptoMarketData.get_trading_volume",
                "CryptoInvestmentAdvice.provide_investment_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoNews.get_recent_articles",
                "args": "{\"cryptocurrencies\": [\"bitcoin\", \"ethereum\"], \"timeframe\": \"1 week\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoPriceAnalysis.analyze_price_impact",
                "args": "{\"articles\": [1, 2, 3, 4, 5], \"cryptocurrencies\": [\"bitcoin\", \"ethereum\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoPriceAnalysis.get_live_prices",
                "args": "{\"cryptocurrencies\": [\"bitcoin\", \"ethereum\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoMarketData.get_trading_volume",
                "args": "{\"cryptocurrencies\": [\"bitcoin\", \"ethereum\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CryptoInvestmentAdvice.provide_investment_tips",
                "args": "{\"cryptocurrencies\": [\"bitcoin\", \"ethereum\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoNews.get_recent_articles', {'name': 'CryptoNews.get_recent_articles', 'description': 'This function retrieves recent news articles about specified cryptocurrencies within a given timeframe.', 'required_parameters': [{'name': 'cryptocurrencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency names to retrieve news for.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the news articles, e.g., 1 week, 1 month.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five news articles for each cryptocurrency.'}]}], ['CryptoPriceAnalysis.analyze_price_impact', {'name': 'CryptoPriceAnalysis.analyze_price_impact', 'description': 'This function analyzes the impact of news articles on the price of specified cryptocurrencies.', 'required_parameters': [{'name': 'articles', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}, {'name': 'cryptocurrencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency names to analyze the price impact for.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'An analysis of how the news articles have affected the price of the cryptocurrencies.'}]}], ['CryptoPriceAnalysis.get_live_prices', {'name': 'CryptoPriceAnalysis.get_live_prices', 'description': 'This function retrieves the live prices of specified cryptocurrencies.', 'required_parameters': [{'name': 'cryptocurrencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency names to retrieve live prices for.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'The live prices of the specified cryptocurrencies.'}]}], ['CryptoMarketData.get_trading_volume', {'name': 'CryptoMarketData.get_trading_volume', 'description': 'This function retrieves the trading volume data for specified cryptocurrencies.', 'required_parameters': [{'name': 'cryptocurrencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency names to retrieve trading volume data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'trading_volume', 'description': 'The trading volume data for the specified cryptocurrencies.'}]}], ['CryptoInvestmentAdvice.provide_investment_tips', {'name': 'CryptoInvestmentAdvice.provide_investment_tips', 'description': 'This function provides investment tips for specified cryptocurrencies.', 'required_parameters': [{'name': 'cryptocurrencies', 'type': 'ARRAY', 'description': 'An array of cryptocurrency names to provide investment tips for.'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_tips', 'description': 'Investment tips for the specified cryptocurrencies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoNews.get_recent_articles` 并传入 `cryptocurrencies` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoNews.get_recent_articles\",\n    \"args\": \"{'cryptocurrencies': ['bitcoin', 'ethereum'], 'timeframe': '1 week'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解加密货币市场的最新动态。首先，获取最近一周内关于比特币和以太坊的5篇新闻报道。然后，分析这些新闻对加密货币价格的影响，获取比特币和以太坊的实时价格。接着，获取加密货币市场的交易量数据。最后，提供一些关于加密货币投资的建议。"
            }
        ]
    },
    "449": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ESGReportSearch.find_ESG_reports",
                "ESGReportAnalysis.analyze_ESG_performance",
                "StockMarketData.get_stock_performance",
                "SustainableInvestmentStrategy.suggest_investment_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ESGReportSearch.find_ESG_reports",
                "args": "{\"companyName\": \"EnergyCorp\", \"years\": [2018, 2019, 2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ESGReportAnalysis.analyze_ESG_performance",
                "args": "{\"companyName\": \"EnergyCorp\", \"performanceMetrics\": [\"carbonEmissions\", \"energyEfficiency\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_stock_performance",
                "args": "{\"companyName\": \"EnergyCorp\", \"dataPoints\": [\"stockPrice\", \"tradingVolume\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SustainableInvestmentStrategy.suggest_investment_strategies",
                "args": "{\"companyName\": \"EnergyCorp\", \"ESGAnalysis\": true, \"stockPerformance\": true}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ESGReportSearch.find_ESG_reports', {'name': 'ESGReportSearch.find_ESG_reports', 'description': 'This function searches for ESG reports of a company for specified years.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which ESG reports are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of ESG reports for the specified years.'}]}], ['ESGReportAnalysis.analyze_ESG_performance', {'name': 'ESGReportAnalysis.analyze_ESG_performance', 'description': 'This function analyzes the ESG performance of a company based on specified metrics.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'performanceMetrics', 'type': 'ARRAY', 'description': 'An array of performance metrics to analyze, e.g., carbonEmissions, energyEfficiency.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the company’s ESG performance based on the specified metrics.'}]}], ['StockMarketData.get_stock_performance', {'name': 'StockMarketData.get_stock_performance', 'description': 'This function retrieves stock performance data for a company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'dataPoints', 'type': 'ARRAY', 'description': 'An array of data points to retrieve, e.g., stockPrice, tradingVolume.'}], 'optional_parameters': [], 'return_data': [{'name': 'performanceData', 'description': 'Stock performance data for the specified data points.'}]}], ['SustainableInvestmentStrategy.suggest_investment_strategies', {'name': 'SustainableInvestmentStrategy.suggest_investment_strategies', 'description': 'This function suggests sustainable investment strategies for a company based on ESG analysis and stock performance.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'ESGAnalysis', 'type': 'BOOLEAN', 'description': 'Whether ESG analysis is considered.'}, {'name': 'stockPerformance', 'type': 'BOOLEAN', 'description': 'Whether stock performance is considered.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of sustainable investment strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ESGReportSearch.find_ESG_reports` 并传入 `companyName` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ESGReportSearch.find_ESG_reports\",\n    \"args\": \"{'companyName': 'EnergyCorp', 'years': [2018, 2019, 2020, 2021, 2022]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家名为EnergyCorp的能源公司的可持续发展策略。首先，获取该公司最近五年的环境、社会和治理（ESG）报告。然后，分析其在减少碳排放和提高能源效率方面的表现。接着，获取该公司的股票表现数据，包括股价和交易量。最后，提供一些关于可持续投资策略的建议。"
            }
        ]
    },
    "451": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceNewsSearch.find_articles",
                "StockDataRetriever.get_stock_history",
                "MarketTrendAnalyzer.get_user_growth",
                "InvestmentAdvisor.suggest_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceNewsSearch.find_articles",
                "args": "{\"keywords\": [\"中国互联网金融\", \"发展趋势\"], \"timeframe\": \"last_month\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockDataRetriever.get_stock_history",
                "args": "{\"symbols\": [\"AntGroup\", \"JDFinance\"], \"timeframe\": \"last_month\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketTrendAnalyzer.get_user_growth",
                "args": "{\"market\": \"ChinaInternetFinance\", \"timeframe\": \"last_year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvisor.suggest_strategies",
                "args": "{\"market\": \"ChinaInternetFinance\", \"timeframe\": \"long_term\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceNewsSearch.find_articles', {'name': 'FinanceNewsSearch.find_articles', 'description': 'This function searches for articles based on keywords and timeframe.', 'required_parameters': [{'name': 'keywords', 'type': 'ARRAY', 'description': 'A list of keywords to search for.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the search, e.g., last_month, last_year.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the search criteria.'}]}], ['StockDataRetriever.get_stock_history', {'name': 'StockDataRetriever.get_stock_history', 'description': 'This function retrieves historical stock data for given symbols.', 'required_parameters': [{'name': 'symbols', 'type': 'ARRAY', 'description': 'A list of stock symbols to retrieve data for.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the data, e.g., last_month, last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data for the specified symbols.'}]}], ['MarketTrendAnalyzer.get_user_growth', {'name': 'MarketTrendAnalyzer.get_user_growth', 'description': 'This function analyzes user growth in a specific market.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market to analyze, e.g., ChinaInternetFinance.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the analysis, e.g., last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'growth', 'description': 'User growth data for the specified market.'}]}], ['InvestmentAdvisor.suggest_strategies', {'name': 'InvestmentAdvisor.suggest_strategies', 'description': 'This function suggests investment strategies for a specific market.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market to suggest strategies for, e.g., ChinaInternetFinance.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the strategies, e.g., long_term.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Investment strategies for the specified market.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceNewsSearch.find_articles` 并传入 `keywords` 和 `timeframe`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceNewsSearch.find_articles\",\n    \"args\": \"{'keywords': ['中国互联网金融', '发展趋势'], 'timeframe': 'last_month', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国互联网金融的发展趋势。首先，获取最近一个月内关于中国互联网金融的5篇深度报道。然后，分析这些报道对相关股票的影响，获取蚂蚁集团和京东金融的股票历史数据。接着，获取中国互联网金融市场的用户增长数据。最后，提供一些关于互联网金融投资的策略建议。"
            }
        ]
    },
    "452": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsSearch.find_articles",
                "StockMarket.get_stock_history",
                "InsuranceMarket.get_premium_income",
                "InvestmentStrategy.suggest_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsSearch.find_articles",
                "args": "{\"category\": \"insurance\", \"location\": \"China\", \"timeframe\": \"last_month\", \"depth\": \"true\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.get_stock_history",
                "args": "{\"symbols\": [\"PingAn\", \"ChinaLife\"], \"timeframe\": \"last_month\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceMarket.get_premium_income",
                "args": "{\"location\": \"China\", \"timeframe\": \"last_month\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.suggest_investment",
                "args": "{\"market\": \"insurance\", \"location\": \"China\", \"timeframe\": \"long_term\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsSearch.find_articles', {'name': 'NewsSearch.find_articles', 'description': 'This function searches for articles based on category, location, and timeframe.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of articles, e.g., insurance, finance, technology.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the articles are relevant.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the articles, e.g., last_month, last_year.'}, {'name': 'depth', 'type': 'BOOLEAN', 'description': 'Whether to return in-depth articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with a title, summary, and publication date.'}]}], ['StockMarket.get_stock_history', {'name': 'StockMarket.get_stock_history', 'description': 'This function retrieves historical stock data for given symbols within a timeframe.', 'required_parameters': [{'name': 'symbols', 'type': 'ARRAY', 'description': 'An array of stock symbols to retrieve data for.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the stock data, e.g., last_month, last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'history', 'description': 'Historical stock data for the selected symbols, including opening, closing, high, low prices, and volume.'}]}], ['InsuranceMarket.get_premium_income', {'name': 'InsuranceMarket.get_premium_income', 'description': 'This function retrieves premium income data for the insurance market in a given location and timeframe.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location of the insurance market.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the premium income data, e.g., last_month, last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'income', 'description': 'Premium income data for the insurance market, including total income and breakdown by insurance type.'}]}], ['InvestmentStrategy.suggest_investment', {'name': 'InvestmentStrategy.suggest_investment', 'description': 'This function suggests investment strategies based on market, location, and timeframe.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market to suggest investment strategies for, e.g., insurance, real_estate.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location of the market.'}, {'name': 'timeframe', 'type': 'STRING', 'description': 'The timeframe for the investment strategies, e.g., short_term, long_term.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Investment strategies for the selected market, including risk assessment, potential returns, and recommended investments.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `NewsSearch.find_articles` 并传入 `category`、`location`、`timeframe` 和 `depth`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"NewsSearch.find_articles\",\n    \"args\": \"{'category': 'insurance', 'location': 'China', 'timeframe': 'last_month', 'depth': 'true'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国保险市场的最新动态。首先，获取最近一个月内关于中国保险市场的5篇深度报道。然后，分析这些报道对保险股票的影响，获取中国平安和中国人寿的股票历史数据。接着，获取中国保险市场的保费收入数据。最后，提供一些关于保险投资的策略建议。"
            }
        ]
    },
    "453": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SupplyChainAnalysis.fetch_reports",
                "SupplyChainAnalysis.analyze_inventory",
                "SupplyChainAnalysis.analyze_logistics",
                "StockMarketAnalysis.get_stock_performance",
                "SupplyChainOptimization.suggest_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SupplyChainAnalysis.fetch_reports",
                "args": "{\"companyName\": \"ABC Manufacturing\", \"years\": [2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SupplyChainAnalysis.analyze_inventory",
                "args": "{\"companyName\": \"ABC Manufacturing\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SupplyChainAnalysis.analyze_logistics",
                "args": "{\"companyName\": \"ABC Manufacturing\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarketAnalysis.get_stock_performance",
                "args": "{\"companyName\": \"ABC Manufacturing\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "SupplyChainOptimization.suggest_strategies",
                "args": "{\"companyName\": \"ABC Manufacturing\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SupplyChainAnalysis.fetch_reports', {'name': 'SupplyChainAnalysis.fetch_reports', 'description': 'This function retrieves supply chain management reports for a specified company over a given time period.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which reports are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of supply chain management reports for the specified company and years.'}]}], ['SupplyChainAnalysis.analyze_inventory', {'name': 'SupplyChainAnalysis.analyze_inventory', 'description': 'This function analyzes inventory management efficiency for a specified company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'inventoryAnalysis', 'description': 'An analysis of inventory management efficiency.'}]}], ['SupplyChainAnalysis.analyze_logistics', {'name': 'SupplyChainAnalysis.analyze_logistics', 'description': 'This function analyzes logistics cost control for a specified company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'logisticsAnalysis', 'description': 'An analysis of logistics cost control.'}]}], ['StockMarketAnalysis.get_stock_performance', {'name': 'StockMarketAnalysis.get_stock_performance', 'description': 'This function retrieves stock performance data for a specified company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockPerformance', 'description': 'Stock performance data including stock price and trading volume.'}]}], ['SupplyChainOptimization.suggest_strategies', {'name': 'SupplyChainOptimization.suggest_strategies', 'description': 'This function suggests strategies for supply chain optimization for a specified company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of strategies for supply chain optimization.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `SupplyChainAnalysis.fetch_reports` 并传入 `companyName` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"SupplyChainAnalysis.fetch_reports\",\n    \"args\": \"{'companyName': 'ABC Manufacturing', 'years': [2020, 2021, 2022]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家名为ABC Manufacturing的制造业公司的供应链管理效率。首先，获取该公司最近三年的供应链管理报告。然后，分析其在库存管理和物流成本控制方面的表现。接着，获取该公司的股票表现数据，包括股价和交易量。最后，提供一些关于供应链优化的策略建议。"
            }
        ]
    },
    "455": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceTechSearch.find_articles",
                "FinanceTechSearch.get_investment_data",
                "FinanceTechSearch.get_company_ranking",
                "FinanceTechSearch.get_company_case",
                "FinanceTechSearch.get_application_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceTechSearch.find_articles",
                "args": "{\"topic\": \"消费金融技术应用\", \"count\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceTechSearch.get_investment_data",
                "args": "{\"year\": 2024, \"quarter\": 3, \"sector\": \"消费金融\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceTechSearch.get_company_ranking",
                "args": "{\"sector\": \"消费金融\", \"country\": \"中国\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceTechSearch.get_company_case",
                "args": "{\"companyName\": \"示例消费金融公司\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinanceTechSearch.get_application_suggestions",
                "args": "{\"companyName\": \"示例消费金融公司\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceTechSearch.find_articles', {'name': 'FinanceTechSearch.find_articles', 'description': 'This function searches for articles on a specific topic in the fintech sector.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles to search for.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three articles on the specified topic.'}]}], ['FinanceTechSearch.get_investment_data', {'name': 'FinanceTechSearch.get_investment_data', 'description': 'This function retrieves investment data for a specific sector in a given year and quarter.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which investment data is requested.'}, {'name': 'quarter', 'type': 'NUMBER', 'description': 'The quarter for which investment data is requested.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector for which investment data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'investmentData', 'description': 'Investment data for the specified sector, year, and quarter.'}]}], ['FinanceTechSearch.get_company_ranking', {'name': 'FinanceTechSearch.get_company_ranking', 'description': 'This function retrieves the ranking of companies in a specific sector in a given country.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which company rankings are requested.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country for which company rankings are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'rankings', 'description': 'Rankings of companies in the specified sector and country.'}]}], ['FinanceTechSearch.get_company_case', {'name': 'FinanceTechSearch.get_company_case', 'description': 'This function retrieves a case study of a specific company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company for which a case study is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'caseStudy', 'description': 'A case study of the specified company.'}]}], ['FinanceTechSearch.get_application_suggestions', {'name': 'FinanceTechSearch.get_application_suggestions', 'description': 'This function provides suggestions for technology applications within a specific company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company for which technology application suggestions are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Suggestions for technology applications within the specified company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceTechSearch.find_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceTechSearch.find_articles\",\n    \"args\": \"{'topic': '消费金融技术应用', 'count': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国消费金融公司的技术应用。首先，从最新的金融科技文章中获取3篇关于消费金融技术应用的文章。然后，获取2024年第三季度中国消费金融公司的技术投资数据。接着，获取中国消费金融公司的技术实力排名。最后，通过公司名称获取某消费金融公司的技术案例，并获取一些技术应用建议。"
            }
        ]
    },
    "456": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceResearch.search_theories",
                "FinanceResearch.query_market_effectiveness",
                "FinanceResearch.analyze_effectiveness_factors",
                "FinanceResearch.explore_improvement_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceResearch.search_theories",
                "args": "{\"keyword\": \"金融市场有效性\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceResearch.query_market_effectiveness",
                "args": "{\"marketType\": \"股票市场\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceResearch.analyze_effectiveness_factors",
                "args": "{\"marketType\": \"债券市场\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceResearch.explore_improvement_strategies",
                "args": "{\"marketType\": \"商品市场\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceResearch.search_theories', {'name': 'FinanceResearch.search_theories', 'description': '搜索关于金融市场有效性的理论和实证研究。', 'required_parameters': [{'name': 'keyword', 'type': 'STRING', 'description': '搜索关键词，例如金融市场有效性。'}], 'optional_parameters': [], 'return_data': [{'name': 'theories', 'description': '与关键词相关的理论和研究列表。'}]}], ['FinanceResearch.query_market_effectiveness', {'name': 'FinanceResearch.query_market_effectiveness', 'description': '查询特定市场的有效性程度。', 'required_parameters': [{'name': 'marketType', 'type': 'STRING', 'description': '市场类型，例如股票市场。'}], 'optional_parameters': [], 'return_data': [{'name': 'effectiveness', 'description': '市场有效性的评估结果。'}]}], ['FinanceResearch.analyze_effectiveness_factors', {'name': 'FinanceResearch.analyze_effectiveness_factors', 'description': '分析影响市场有效性的因素。', 'required_parameters': [{'name': 'marketType', 'type': 'STRING', 'description': '市场类型，例如债券市场。'}], 'optional_parameters': [], 'return_data': [{'name': 'factors', 'description': '影响市场有效性的关键因素列表。'}]}], ['FinanceResearch.explore_improvement_strategies', {'name': 'FinanceResearch.explore_improvement_strategies', 'description': '探讨提高特定市场有效性的途径。', 'required_parameters': [{'name': 'marketType', 'type': 'STRING', 'description': '市场类型，例如商品市场。'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': '提高市场有效性的策略列表。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceResearch.search_theories` 并传入 `keyword`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceResearch.search_theories\",\n    \"args\": \"{'keyword': '金融市场有效性'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融市场有效性。首先，收集金融市场有效性的理论和实证研究。然后，查询不同市场的有效性程度。接着，分析影响市场有效性的因素。最后，探讨提高金融市场有效性的途径。"
            }
        ]
    },
    "458": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialRegulationSearch.find_laws",
                "FinancialDataProcessSearch.get_institution_details",
                "DataPrivacyRiskAnalysis.analyze_risks",
                "DataProtectionStrategy.propose_measures"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialRegulationSearch.find_laws",
                "args": "{\"category\": \"privacy\", \"sector\": \"finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialDataProcessSearch.get_institution_details",
                "args": "{\"institution\": \"GlobalBank\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataPrivacyRiskAnalysis.analyze_risks",
                "args": "{\"institution\": \"GlobalBank\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataProtectionStrategy.propose_measures",
                "args": "{\"institution\": \"GlobalBank\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialRegulationSearch.find_laws', {'name': 'FinancialRegulationSearch.find_laws', 'description': 'This function searches for laws and regulations related to a specific category within a sector.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of laws, e.g., privacy, security.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector where the laws apply, e.g., finance, healthcare.'}], 'optional_parameters': [], 'return_data': [{'name': 'laws', 'description': 'A list of laws and regulations related to the specified category and sector.'}]}], ['FinancialDataProcessSearch.get_institution_details', {'name': 'FinancialDataProcessSearch.get_institution_details', 'description': 'This function retrieves details about data processing practices of a financial institution.', 'required_parameters': [{'name': 'institution', 'type': 'STRING', 'description': 'The name of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Details about the institution’s data processing practices, including data handling, storage, and security measures.'}]}], ['DataPrivacyRiskAnalysis.analyze_risks', {'name': 'DataPrivacyRiskAnalysis.analyze_risks', 'description': 'This function analyzes the risks associated with data privacy for a given institution.', 'required_parameters': [{'name': 'institution', 'type': 'STRING', 'description': 'The name of the institution to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'risks', 'description': 'A detailed analysis of data privacy risks for the institution.'}]}], ['DataProtectionStrategy.propose_measures', {'name': 'DataProtectionStrategy.propose_measures', 'description': 'This function proposes measures to enhance data protection for a given institution.', 'required_parameters': [{'name': 'institution', 'type': 'STRING', 'description': 'The name of the institution for which measures are proposed.'}], 'optional_parameters': [], 'return_data': [{'name': 'measures', 'description': 'A set of proposed measures to enhance data protection for the institution.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialRegulationSearch.find_laws` 并传入 `category` 和 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialRegulationSearch.find_laws\",\n    \"args\": \"{'category': 'privacy', 'sector': 'finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算研究金融数据隐私保护。首先，了解金融数据隐私保护的法律法规。然后，查询金融机构的数据处理流程。接着，分析数据隐私泄露的风险。最后，提出加强金融数据隐私保护的措施。"
            }
        ]
    },
    "460": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceResearch.find_literature",
                "FinanceResearch.get_case_studies",
                "FinanceResearch.analyze_mechanism",
                "FinanceResearch.develop_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceResearch.find_literature",
                "args": "{\"topic\": \"羊群效应\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceResearch.get_case_studies",
                "args": "{\"market\": \"金融市场\", \"phenomenon\": \"羊群效应\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceResearch.analyze_mechanism",
                "args": "{\"effect\": \"羊群效应\", \"context\": \"金融市场\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceResearch.develop_strategies",
                "args": "{\"effect\": \"羊群效应\", \"market\": \"金融市场\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceResearch.find_literature', {'name': 'FinanceResearch.find_literature', 'description': 'This function searches for academic literature on a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest for the literature search.'}], 'optional_parameters': [], 'return_data': [{'name': 'literature', 'description': 'A list of up to three relevant academic papers.'}]}], ['FinanceResearch.get_case_studies', {'name': 'FinanceResearch.get_case_studies', 'description': 'This function retrieves case studies related to a phenomenon in a specific market.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market where the phenomenon is observed.'}, {'name': 'phenomenon', 'type': 'STRING', 'description': 'The phenomenon of interest for case studies.'}], 'optional_parameters': [], 'return_data': [{'name': 'case_studies', 'description': 'A list of up to three case studies related to the phenomenon in the market.'}]}], ['FinanceResearch.analyze_mechanism', {'name': 'FinanceResearch.analyze_mechanism', 'description': 'This function analyzes the mechanism behind a specific effect in a given context.', 'required_parameters': [{'name': 'effect', 'type': 'STRING', 'description': 'The effect to analyze.'}, {'name': 'context', 'type': 'STRING', 'description': 'The context in which the effect is observed.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'A detailed analysis of the mechanism behind the effect in the context.'}]}], ['FinanceResearch.develop_strategies', {'name': 'FinanceResearch.develop_strategies', 'description': 'This function develops strategies to address a specific effect in a market.', 'required_parameters': [{'name': 'effect', 'type': 'STRING', 'description': 'The effect to develop strategies for.'}, {'name': 'market', 'type': 'STRING', 'description': 'The market where the effect is observed.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of strategies to address the effect in the market.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceResearch.find_literature` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceResearch.find_literature\",\n    \"args\": \"{'topic': '羊群效应'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我准备分析金融市场的羊群效应。首先，获取关于羊群效应的研究文献。然后，查询金融市场中羊群效应的表现案例。接着，分析羊群效应的形成机制。最后，探讨应对羊群效应的策略。"
            }
        ]
    },
    "462": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "StockDataRetrieval.get_historical_data",
                "ResearchPaperSearch.find_papers",
                "InvestmentCaseStudy.analyze_investment_cases",
                "RegulationAuthority.get_current_regulations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "StockDataRetrieval.get_historical_data",
                "args": "{\"market\": \"US\", \"duration\": \"5 years\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ResearchPaperSearch.find_papers",
                "args": "{\"topic\": \"quantitative investment strategies\", \"location\": \"US stock market\", \"count\": 10}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentCaseStudy.analyze_investment_cases",
                "args": "{\"companies\": [\"AQR Capital Management\", \"Two Sigma\", \"Renaissance Technologies\", \"D. E. Shaw\", \"Citadel LLC\"], \"market\": \"US\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RegulationAuthority.get_current_regulations",
                "args": "{\"topic\": \"quantitative investment\", \"location\": \"US\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['StockDataRetrieval.get_historical_data', {'name': 'StockDataRetrieval.get_historical_data', 'description': 'This function retrieves historical stock market data based on the specified market and duration.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The stock market to retrieve data from, e.g., US, UK.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration of historical data to retrieve, e.g., 5 years, 10 years.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock market data for the specified duration.'}]}], ['ResearchPaperSearch.find_papers', {'name': 'ResearchPaperSearch.find_papers', 'description': 'This function searches for academic papers based on a topic, location, and count.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the academic papers, e.g., quantitative investment strategies.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location of the study, e.g., US stock market.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of papers to find.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to the specified count of academic papers.'}]}], ['InvestmentCaseStudy.analyze_investment_cases', {'name': 'InvestmentCaseStudy.analyze_investment_cases', 'description': 'This function analyzes investment cases based on specified companies and market.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names to analyze investment cases for.'}, {'name': 'market', 'type': 'STRING', 'description': 'The stock market where the companies operate, e.g., US.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'Analyzed investment cases for the specified companies.'}]}], ['RegulationAuthority.get_current_regulations', {'name': 'RegulationAuthority.get_current_regulations', 'description': 'This function retrieves current regulations based on a topic and location.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the regulations, e.g., quantitative investment.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location of the regulations, e.g., US.'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': 'Current regulations for the specified topic and location.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `StockDataRetrieval.get_historical_data` 并传入 `market` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"StockDataRetrieval.get_historical_data\",\n    \"args\": \"{'market': 'US', 'duration': '5 years'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究量化投资策略对美国股市的影响。首先，获取过去五年美国股市的综合数据。然后，查找十篇关于量化投资策略在美股应用的学术论文。接着，分析五家大型量化投资公司在美股的投资案例。最后，通过权威机构获取当前美国量化投资的政策法规。"
            }
        ]
    },
    "464": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketDataCollector.collect_macro_data",
                "ExchangeRuleFetcher.get_exchange_rules",
                "FundPerformanceAnalyzer.find_quant_funds",
                "PolicyImpactEvaluator.analyze_financial_policy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketDataCollector.collect_macro_data",
                "args": "{\"countries\": [\"Brazil\", \"India\", \"South Africa\"]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ExchangeRuleFetcher.get_exchange_rules",
                "args": "{\"country\": \"Brazil\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ExchangeRuleFetcher.get_exchange_rules",
                "args": "{\"country\": \"India\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ExchangeRuleFetcher.get_exchange_rules",
                "args": "{\"country\": \"South Africa\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FundPerformanceAnalyzer.find_quant_funds",
                "args": "{\"number_of_funds\": 5, \"market_type\": \"emerging\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "PolicyImpactEvaluator.analyze_financial_policy",
                "args": "{\"countries\": [\"Brazil\", \"India\", \"South Africa\"]}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketDataCollector.collect_macro_data', {'name': 'MarketDataCollector.collect_macro_data', 'description': 'This function collects macroeconomic data for specified countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country names for which macroeconomic data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'macro_data', 'description': 'A list of macroeconomic data for each country.'}]}], ['ExchangeRuleFetcher.get_exchange_rules', {'name': 'ExchangeRuleFetcher.get_exchange_rules', 'description': 'This function fetches trading rules for the main stock exchanges in a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which exchange rules are required.'}], 'optional_parameters': [], 'return_data': [{'name': 'exchange_rules', 'description': 'Trading rules for the main stock exchange in the specified country.'}]}], ['FundPerformanceAnalyzer.find_quant_funds', {'name': 'FundPerformanceAnalyzer.find_quant_funds', 'description': 'This function finds quant funds with successful experience in a specified market type.', 'required_parameters': [{'name': 'number_of_funds', 'type': 'NUMBER', 'description': 'The number of funds to find.'}, {'name': 'market_type', 'type': 'STRING', 'description': 'The type of market, e.g., emerging, developed.'}], 'optional_parameters': [], 'return_data': [{'name': 'funds', 'description': 'A list of quant funds with details including performance and strategy.'}]}], ['PolicyImpactEvaluator.analyze_financial_policy', {'name': 'PolicyImpactEvaluator.analyze_financial_policy', 'description': 'This function analyzes the impact of recent financial policies on quant investments in specified countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country names for which policy impact analysis is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'An analysis of how recent financial policies have affected quant investments in each country.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketDataCollector.collect_macro_data` 并传入 `countries`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketDataCollector.collect_macro_data\",\n    \"args\": \"{'countries': ['Brazil', 'India', 'South Africa']}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我要评估新兴市场国家的量化投资机会。首先，收集三个新兴市场国家的宏观经济数据。然后，获取这些国家主要证券交易所的交易规则。接着，查找五家在新兴市场有成功经验的量化投资基金的运作模式。最后，分析新兴市场国家近期的金融政策对量化投资的影响。"
            }
        ]
    },
    "465": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketData.get_historical_prices",
                "ResearchLibrary.find_quantitative_investment_reports",
                "Financials.get_company_financials",
                "IndustryNews.get_latest_news"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketData.get_historical_prices",
                "args": "{\"market\": \"global_energy\", \"duration\": \"5_years\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ResearchLibrary.find_quantitative_investment_reports",
                "args": "{\"sector\": \"energy\", \"count\": 8}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Financials.get_company_financials",
                "args": "{\"companies\": [\"ExxonMobil\", \"BP\", \"Shell\", \"Chevron\", \"TotalEnergies\", \"Equinor\", \"Eni\", \"Repsol\", \"Sinopec\", \"PetroChina\"], \"details\": \"full\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "IndustryNews.get_latest_news",
                "args": "{\"sector\": \"energy\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketData.get_historical_prices', {'name': 'MarketData.get_historical_prices', 'description': 'This function retrieves historical price data for a specified market over a given duration.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The market for which historical prices are requested, e.g., global_energy.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which historical prices are requested, e.g., 5_years.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'A list of historical price data for the specified market.'}]}], ['ResearchLibrary.find_quantitative_investment_reports', {'name': 'ResearchLibrary.find_quantitative_investment_reports', 'description': 'This function finds quantitative investment reports for a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which reports are requested, e.g., energy.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of reports to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to the specified number of quantitative investment reports for the sector.'}]}], ['Financials.get_company_financials', {'name': 'Financials.get_company_financials', 'description': 'This function retrieves financial data for specified companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names for which financial data is requested.'}, {'name': 'details', 'type': 'STRING', 'description': 'The level of detail for the financial data, e.g., full.'}], 'optional_parameters': [], 'return_data': [{'name': 'financials', 'description': 'A list of financial data for the specified companies.'}]}], ['IndustryNews.get_latest_news', {'name': 'IndustryNews.get_latest_news', 'description': 'This function retrieves the latest news for a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which news is requested, e.g., energy.'}], 'optional_parameters': [], 'return_data': [{'name': 'news', 'description': 'A list of the latest news articles for the sector.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketData.get_historical_prices` 并传入 `market` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketData.get_historical_prices\",\n    \"args\": \"{'market': 'global_energy', 'duration': '5_years'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我准备分析量化投资在能源板块的应用。首先，获取全球能源市场的历史价格走势。然后，查找八篇关于能源板块量化投资策略的研究报告。接着，了解十家能源企业的财务数据。最后，获取能源板块的最新行业动态。"
            }
        ]
    },
    "467": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ManufacturingReportSearch.find_reports",
                "ManufacturingDataAccess.get_production_efficiency",
                "PolicyAnalysis.analyze_industry_support",
                "Forecasting.predict_transformation",
                "TechnicalChallenges.identify_shared_manufacturing_difficulties"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ManufacturingReportSearch.find_reports",
                "args": "{\"topic\": \"共享经济在制造业的融合\", \"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ManufacturingDataAccess.get_production_efficiency",
                "args": "{\"year\": 2022, \"sector\": \"共享制造\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PolicyAnalysis.analyze_industry_support",
                "args": "{\"industry\": \"共享制造\", \"year\": 2023}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Forecasting.predict_transformation",
                "args": "{\"industry\": \"共享制造\", \"years_ahead\": 3}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TechnicalChallenges.identify_shared_manufacturing_difficulties",
                "args": "{\"industry\": \"共享制造\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ManufacturingReportSearch.find_reports', {'name': 'ManufacturingReportSearch.find_reports', 'description': 'This function searches for manufacturing reports based on a specific topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the manufacturing report.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the report.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to fifteen matching reports.'}]}], ['ManufacturingDataAccess.get_production_efficiency', {'name': 'ManufacturingDataAccess.get_production_efficiency', 'description': 'This function retrieves production efficiency data for a specific year and sector.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year of the data.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of the manufacturing industry.'}], 'optional_parameters': [], 'return_data': [{'name': 'efficiency_data', 'description': 'Production efficiency data for the specified year and sector.'}]}], ['PolicyAnalysis.analyze_industry_support', {'name': 'PolicyAnalysis.analyze_industry_support', 'description': 'This function analyzes the level of support from industry policies for a specific sector in a given year.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The sector of the manufacturing industry.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the policy analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'support_level', 'description': 'The level of support from industry policies.'}]}], ['Forecasting.predict_transformation', {'name': 'Forecasting.predict_transformation', 'description': 'This function predicts the transformation and direction of a specific sector over a number of years ahead.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The sector of the manufacturing industry.'}, {'name': 'years_ahead', 'type': 'NUMBER', 'description': 'The number of years ahead for the forecast.'}], 'optional_parameters': [], 'return_data': [{'name': 'transformation_forecast', 'description': 'Forecast of the industry transformation.'}]}], ['TechnicalChallenges.identify_shared_manufacturing_difficulties', {'name': 'TechnicalChallenges.identify_shared_manufacturing_difficulties', 'description': 'This function identifies technical challenges in a specific sector of the manufacturing industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The sector of the manufacturing industry.'}], 'optional_parameters': [], 'return_data': [{'name': 'challenges', 'description': 'A list of technical challenges.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ManufacturingReportSearch.find_reports` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ManufacturingReportSearch.find_reports\",\n    \"args\": \"{'topic': '共享经济在制造业的融合', 'year': 2023}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我要研究共享经济在制造业的融合情况。首先，查阅15篇关于共享制造的专业报告。然后，获取2022年主要共享制造企业的生产效率数据。接着，分析相关产业政策对共享制造的支持力度。最后，通过制造业数据获取未来三年共享制造的转型升级方向，并获取一些实施共享制造的技术难点。"
            }
        ]
    },
    "469": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "RealEstateSearch.get_listing_details",
                "RealEstateSearch.compare_listings"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"type\": \"rent\", \"location\": \"Beijing\", \"bedrooms\": 3, \"proximity\": \"market\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateSearch.get_listing_details",
                "args": "{\"listingId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateSearch.get_listing_details",
                "args": "{\"listingId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_listing_details",
                "args": "{\"listingId\": 1003}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RealEstateSearch.compare_listings",
                "args": "{\"listingIds\": [1001, 1002, 1003]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on type, location, number of bedrooms, and proximity to specific amenities.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of real estate listing, e.g., rent, sale.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the listing is located.'}, {'name': 'bedrooms', 'type': 'NUMBER', 'description': 'The number of bedrooms in the property.'}, {'name': 'proximity', 'type': 'STRING', 'description': 'Proximity to specific amenities, e.g., market, school.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of up to five matching listings, each with an ID, type, location, and bedrooms.'}]}], ['RealEstateSearch.get_listing_details', {'name': 'RealEstateSearch.get_listing_details', 'description': 'This function retrieves detailed information about a specific real estate listing given its ID.', 'required_parameters': [{'name': 'listingId', 'type': 'NUMBER', 'description': 'The ID of the real estate listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the listing, including price, amenities, and property features.'}]}], ['RealEstateSearch.compare_listings', {'name': 'RealEstateSearch.compare_listings', 'description': 'This function compares multiple real estate listings based on their IDs.', 'required_parameters': [{'name': 'listingIds', 'type': 'ARRAY', 'description': 'An array of listing IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected listings, highlighting differences in price, location, and features.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `type`, `location`, `bedrooms`, 和 `proximity`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'type': 'rent', 'location': 'Beijing', 'bedrooms': 3, 'proximity': 'market'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算在北京租一套三居室的房子，希望靠近菜市场。首先，我需要找到五套符合条件的房源。然后，我想要获取这些房源的详细信息，包括价格、设施和物业特点。最后，我需要比较这些房源，以便做出最佳选择。"
            }
        ]
    },
    "471": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "RealEstateSearch.get_listing_details",
                "RealEstateSearch.get_neighborhood_info",
                "RealEstateSearch.get_tenant_reviews"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"type\": \"1-bedroom\", \"location\": \"near gym\", \"count\": 8}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateSearch.get_listing_details",
                "args": "{\"listingId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateSearch.get_neighborhood_info",
                "args": "{\"neighborhoodId\": 1001}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_tenant_reviews",
                "args": "{\"listingId\": 1001}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on type, location, and count.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of property, e.g., 1-bedroom, 2-bedroom.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location preference for the property.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of listings to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of matching property listings.'}]}], ['RealEstateSearch.get_listing_details', {'name': 'RealEstateSearch.get_listing_details', 'description': 'This function retrieves detailed information about a specific real estate listing given its ID.', 'required_parameters': [{'name': 'listingId', 'type': 'NUMBER', 'description': 'The ID of the real estate listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the listing, including amenities and features.'}]}], ['RealEstateSearch.get_neighborhood_info', {'name': 'RealEstateSearch.get_neighborhood_info', 'description': 'This function retrieves information about the neighborhood of a specific listing given its ID.', 'required_parameters': [{'name': 'neighborhoodId', 'type': 'NUMBER', 'description': 'The ID of the neighborhood associated with the listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'info', 'description': 'Information about the neighborhood, including green space percentage.'}]}], ['RealEstateSearch.get_tenant_reviews', {'name': 'RealEstateSearch.get_tenant_reviews', 'description': 'This function retrieves reviews from tenants for a specific listing given its ID.', 'required_parameters': [{'name': 'listingId', 'type': 'NUMBER', 'description': 'The ID of the real estate listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'Reviews from tenants about the listing.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `type`、`location` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'type': '1-bedroom', 'location': 'near gym', 'count': 8}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我准备租房居住。首先，在大型租房平台获取8套近健身房的一居室房源。然后，查看这些房源的空调配备情况。接着，获取这些房源所在小区的绿化面积比例。最后，了解这些房源的租客评价。"
            }
        ]
    },
    "473": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "RealEstateSearch.get_maintenance_records",
                "EnvironmentalData.get_noise_pollution",
                "RealEstateSearch.get_payment_options"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"location\": \"City Center\", \"property_type\": \"2-bedroom\", \"proximity\": \"library\", \"count\": 6}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateSearch.get_maintenance_records",
                "args": "{\"listings\": [1001, 1002, 1003, 1004, 1005, 1006]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EnvironmentalData.get_noise_pollution",
                "args": "{\"locations\": [\"City Center Listing 1\", \"City Center Listing 2\", \"City Center Listing 3\", \"City Center Listing 4\", \"City Center Listing 5\", \"City Center Listing 6\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_payment_options",
                "args": "{\"listings\": [1001, 1002, 1003, 1004, 1005, 1006]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on location, property type, proximity to a point of interest, and count.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location where the property is located.'}, {'name': 'property_type', 'type': 'STRING', 'description': 'The type of property, e.g., 2-bedroom, 3-bedroom.'}, {'name': 'proximity', 'type': 'STRING', 'description': 'Proximity to a point of interest, e.g., library, park.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of listings to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of up to six matching property listings, each with an ID and location.'}]}], ['RealEstateSearch.get_maintenance_records', {'name': 'RealEstateSearch.get_maintenance_records', 'description': 'This function retrieves maintenance records for specific property listings given their IDs.', 'required_parameters': [{'name': 'listings', 'type': 'ARRAY', 'description': 'An array of property listing IDs.'}], 'optional_parameters': [], 'return_data': [{'name': 'records', 'description': 'Maintenance records for the specified listings, including any history of leaks.'}]}], ['EnvironmentalData.get_noise_pollution', {'name': 'EnvironmentalData.get_noise_pollution', 'description': 'This function retrieves noise pollution data for specific locations.', 'required_parameters': [{'name': 'locations', 'type': 'ARRAY', 'description': 'An array of location names.'}], 'optional_parameters': [], 'return_data': [{'name': 'pollution_levels', 'description': 'Noise pollution levels for the specified locations.'}]}], ['RealEstateSearch.get_payment_options', {'name': 'RealEstateSearch.get_payment_options', 'description': 'This function retrieves payment options for specific property listings given their IDs.', 'required_parameters': [{'name': 'listings', 'type': 'ARRAY', 'description': 'An array of property listing IDs.'}], 'optional_parameters': [], 'return_data': [{'name': 'options', 'description': 'Payment options for the specified listings, including rent payment methods.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `location`, `property_type`, `proximity`, `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'location': 'City Center', 'property_type': '2-bedroom', 'proximity': 'library', 'count': 6}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在找租房房源。首先，从热门租房软件获取6套近图书馆的两居室房源。然后，查询这些房源的房屋漏水维修记录。接着，了解这些房源所在区域的噪音污染程度。最后，获取这些房源的租金支付方式。"
            }
        ]
    },
    "475": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "RealEstateSearch.get_listing_details",
                "RealEstateSearch.get_community_info",
                "RealEstateSearch.get_tax_details"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"type\": \"rent\", \"location\": \"Beijing\", \"bedrooms\": 3, \"nearby\": \"bus_station\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateSearch.get_listing_details",
                "args": "{\"listingId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateSearch.get_community_info",
                "args": "{\"communityId\": 1001}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_tax_details",
                "args": "{\"listingId\": 1001}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on type, location, number of bedrooms, and nearby amenities.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of real estate listing, e.g., rent, sale.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the listing is.'}, {'name': 'bedrooms', 'type': 'NUMBER', 'description': 'The number of bedrooms in the property.'}, {'name': 'nearby', 'type': 'STRING', 'description': 'Amenities nearby, e.g., bus_station, subway.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of up to four matching listings, each with an ID, type, location, and bedrooms.'}]}], ['RealEstateSearch.get_listing_details', {'name': 'RealEstateSearch.get_listing_details', 'description': 'This function retrieves detailed information about a specific real estate listing given its ID.', 'required_parameters': [{'name': 'listingId', 'type': 'NUMBER', 'description': 'The ID of the real estate listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the listing, including orientation, price, and availability.'}]}], ['RealEstateSearch.get_community_info', {'name': 'RealEstateSearch.get_community_info', 'description': 'This function retrieves information about the community where a real estate listing is located.', 'required_parameters': [{'name': 'communityId', 'type': 'NUMBER', 'description': 'The ID of the community where the listing is located.'}], 'optional_parameters': [], 'return_data': [{'name': 'info', 'description': 'Information about the community, including security, amenities, and management.'}]}], ['RealEstateSearch.get_tax_details', {'name': 'RealEstateSearch.get_tax_details', 'description': 'This function retrieves tax details for a real estate listing.', 'required_parameters': [{'name': 'listingId', 'type': 'NUMBER', 'description': 'The ID of the real estate listing.'}], 'optional_parameters': [], 'return_data': [{'name': 'taxes', 'description': 'Tax details for the listing, including who pays property taxes and other fees.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `type`、`location`、`bedrooms` 和 `nearby`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'type': 'rent', 'location': 'Beijing', 'bedrooms': 3, 'nearby': 'bus_station'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想在北京租房，需要找到四套三居室的房源，这些房源需要靠近公交站。然后，我需要查看这些房源的朝向情况，了解房源所在小区的门禁管理情况，最后了解租赁税费的承担方式。"
            }
        ]
    },
    "477": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "InsuranceSearch.find_policies",
                "EnvironmentalData.get_air_quality_index",
                "RealEstateSearch.get_rental_process"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"location\": \"Los Angeles\", \"property_type\": \"1-bedroom\", \"near\": \"cinema\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceSearch.find_policies",
                "args": "{\"type\": \"home\", \"location\": \"Los Angeles\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EnvironmentalData.get_air_quality_index",
                "args": "{\"location\": \"Los Angeles\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_rental_process",
                "args": "{\"listing_ids\": [1001, 1002, 1003, 1004, 1005, 1006, 1007]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on location, property type, and proximity to specified amenities.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location where the property is located.'}, {'name': 'property_type', 'type': 'STRING', 'description': 'The type of property, e.g., 1-bedroom, 2-bedroom, etc.'}, {'name': 'near', 'type': 'STRING', 'description': 'Amenity or location the property should be near.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of up to seven matching properties, each with an ID, address, and price.'}]}], ['InsuranceSearch.find_policies', {'name': 'InsuranceSearch.find_policies', 'description': 'This function searches for insurance policies based on type and location.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of insurance policy, e.g., health, auto, home.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the policy will be applied.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of up to three matching policies, each with an ID, type, and provider.'}]}], ['EnvironmentalData.get_air_quality_index', {'name': 'EnvironmentalData.get_air_quality_index', 'description': 'This function retrieves the air quality index for a specified location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location for which the air quality index is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'air_quality_index', 'description': 'The air quality index for the specified location.'}]}], ['RealEstateSearch.get_rental_process', {'name': 'RealEstateSearch.get_rental_process', 'description': 'This function retrieves the rental process for a specific property given its ID.', 'required_parameters': [{'name': 'listing_ids', 'type': 'ARRAY', 'description': 'An array of property IDs for which the rental process is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'processes', 'description': 'A list of rental processes for the specified properties.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `location`, `property_type`, 和 `near`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'location': 'Los Angeles', 'property_type': '1-bedroom', 'near': 'cinema'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我要租房子啦。首先，从知名租房网站获取7套近电影院的一居室房源。然后，查询这些房源的房屋保险情况。接着，了解这些房源所在区域的空气质量指数。最后，获取这些房源的退租流程。"
            }
        ]
    },
    "481": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateSearch.find_listings",
                "RealEstateSearch.get_fire_safety",
                "NaturalDisasterRisk.assess_area",
                "RealEstateSearch.get_furniture_policy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateSearch.find_listings",
                "args": "{\"location\": \"Shanghai\", \"propertyType\": \"3-bedroom\", \"nearby\": \"subway\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateSearch.get_fire_safety",
                "args": "{\"listingIds\": [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "NaturalDisasterRisk.assess_area",
                "args": "{\"locations\": [\"Shanghai District 1\", \"Shanghai District 2\", \"Shanghai District 3\", \"Shanghai District 4\", \"Shanghai District 5\", \"Shanghai District 6\", \"Shanghai District 7\", \"Shanghai District 8\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateSearch.get_furniture_policy",
                "args": "{\"listingIds\": [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateSearch.find_listings', {'name': 'RealEstateSearch.find_listings', 'description': 'This function searches for real estate listings based on location, property type, and nearby amenities.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location where the property is located.'}, {'name': 'propertyType', 'type': 'STRING', 'description': 'The type of property, e.g., 3-bedroom, apartment.'}, {'name': 'nearby', 'type': 'STRING', 'description': 'Amenities nearby, e.g., subway, park.'}], 'optional_parameters': [], 'return_data': [{'name': 'listings', 'description': 'A list of up to eight matching properties, each with an ID, location, and type.'}]}], ['RealEstateSearch.get_fire_safety', {'name': 'RealEstateSearch.get_fire_safety', 'description': 'This function retrieves fire safety information for specific real estate listings given their IDs.', 'required_parameters': [{'name': 'listingIds', 'type': 'ARRAY', 'description': 'An array of listing IDs to retrieve fire safety information for.'}], 'optional_parameters': [], 'return_data': [{'name': 'safetyInfo', 'description': 'Fire safety information for each listing, including safety ratings and equipment.'}]}], ['NaturalDisasterRisk.assess_area', {'name': 'NaturalDisasterRisk.assess_area', 'description': 'This function assesses the natural disaster risk for specific areas.', 'required_parameters': [{'name': 'locations', 'type': 'ARRAY', 'description': 'An array of locations to assess natural disaster risk for.'}], 'optional_parameters': [], 'return_data': [{'name': 'riskAssessment', 'description': 'Natural disaster risk assessment for each location, including flood, earthquake, and storm risks.'}]}], ['RealEstateSearch.get_furniture_policy', {'name': 'RealEstateSearch.get_furniture_policy', 'description': 'This function retrieves the furniture damage policy for specific real estate listings given their IDs.', 'required_parameters': [{'name': 'listingIds', 'type': 'ARRAY', 'description': 'An array of listing IDs to retrieve furniture damage policies for.'}], 'optional_parameters': [], 'return_data': [{'name': 'policyDetails', 'description': 'Furniture damage policy details for each listing, including coverage and terms.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateSearch.find_listings` 并传入 `location`, `propertyType`, 和 `nearby`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateSearch.find_listings\",\n    \"args\": \"{'location': 'Shanghai', 'propertyType': '3-bedroom', 'nearby': 'subway'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我准备开始在上海租房。首先，在热门租房应用获取8套近地铁站的三居室房源。然后，查询这些房源的房屋防火设施情况。接着，了解这些房源所在区域的自然灾害风险。最后，获取这些房源的家具损坏赔偿规定。"
            }
        ]
    },
    "483": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketResearch.get_demand_report",
                "MedicalInstitution.assess_technical_level",
                "MedicalInstitution.get_talent_team",
                "InstitutionImpact.predict_social_influence"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.get_demand_report",
                "args": "{\"industry\": \"medical\", \"location\": \"China\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MedicalInstitution.assess_technical_level",
                "args": "{\"institutionId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MedicalInstitution.assess_technical_level",
                "args": "{\"institutionId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MedicalInstitution.assess_technical_level",
                "args": "{\"institutionId\": 1003}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MedicalInstitution.get_talent_team",
                "args": "{\"institutionId\": 1001}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "MedicalInstitution.get_talent_team",
                "args": "{\"institutionId\": 1002}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "MedicalInstitution.get_talent_team",
                "args": "{\"institutionId\": 1003}"
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "InstitutionImpact.predict_social_influence",
                "args": "{\"institutionIds\": [1001, 1002, 1003]}"
            },
            {
                "id": 8,
                "prev": [
                    7
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketResearch.get_demand_report', {'name': 'MarketResearch.get_demand_report', 'description': 'This function retrieves the demand report for a specific industry in a given location.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry for which the demand report is required.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the demand is being analyzed.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed demand report for the specified industry and location.'}]}], ['MedicalInstitution.assess_technical_level', {'name': 'MedicalInstitution.assess_technical_level', 'description': 'This function assesses the technical level of a medical institution given its ID.', 'required_parameters': [{'name': 'institutionId', 'type': 'NUMBER', 'description': 'The ID of the medical institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'technicalLevel', 'description': 'An assessment of the institution’s technical capabilities.'}]}], ['MedicalInstitution.get_talent_team', {'name': 'MedicalInstitution.get_talent_team', 'description': 'This function retrieves information about the talent team of a medical institution given its ID.', 'required_parameters': [{'name': 'institutionId', 'type': 'NUMBER', 'description': 'The ID of the medical institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'teamInfo', 'description': 'Information about the institution’s talent team.'}]}], ['InstitutionImpact.predict_social_influence', {'name': 'InstitutionImpact.predict_social_influence', 'description': 'This function predicts the social influence of multiple institutions based on their IDs.', 'required_parameters': [{'name': 'institutionIds', 'type': 'ARRAY', 'description': 'An array of institution IDs to predict social influence for.'}], 'optional_parameters': [], 'return_data': [{'name': 'influencePrediction', 'description': 'A prediction of the social influence for the selected institutions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketResearch.get_demand_report` 并传入 `industry` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketResearch.get_demand_report\",\n    \"args\": \"{'industry': 'medical', 'location': 'China'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我关注实体经济中的医疗行业。首先，获取医疗行业的市场需求调研报告。然后，查询3家医疗机构的医疗技术水平评估。接着，收集这些机构的人才队伍建设情况。最后，预测这些机构的社会影响力。"
            }
        ]
    },
    "485": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinTechAI.search_applications",
                "FinTechAI.get_algorithm_details",
                "FinTechAI.analyze_customer_experience",
                "FinTechAI.assess_risk_management"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinTechAI.search_applications",
                "args": "{\"domain\": \"internet_finance\", \"technology\": \"AI\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinTechAI.get_algorithm_details",
                "args": "{\"applicationId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinTechAI.analyze_customer_experience",
                "args": "{\"applicationId\": 1001}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinTechAI.assess_risk_management",
                "args": "{\"applicationId\": 1001}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinTechAI.search_applications', {'name': 'FinTechAI.search_applications', 'description': 'This function searches for applications of AI in internet finance.', 'required_parameters': [{'name': 'domain', 'type': 'STRING', 'description': 'The domain of interest, e.g., internet_finance.'}, {'name': 'technology', 'type': 'STRING', 'description': 'The technology of interest, e.g., AI.'}], 'optional_parameters': [], 'return_data': [{'name': 'applications', 'description': 'A list of applications where AI is used in internet finance.'}]}], ['FinTechAI.get_algorithm_details', {'name': 'FinTechAI.get_algorithm_details', 'description': 'This function retrieves detailed information about the algorithms used in a specific application.', 'required_parameters': [{'name': 'applicationId', 'type': 'NUMBER', 'description': 'The ID of the application.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the algorithms used in the application.'}]}], ['FinTechAI.analyze_customer_experience', {'name': 'FinTechAI.analyze_customer_experience', 'description': 'This function analyzes how AI improves customer experience in a specific application.', 'required_parameters': [{'name': 'applicationId', 'type': 'NUMBER', 'description': 'The ID of the application.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'Analysis of how AI improves customer experience in the application.'}]}], ['FinTechAI.assess_risk_management', {'name': 'FinTechAI.assess_risk_management', 'description': 'This function assesses how AI improves risk management in a specific application.', 'required_parameters': [{'name': 'applicationId', 'type': 'NUMBER', 'description': 'The ID of the application.'}], 'optional_parameters': [], 'return_data': [{'name': 'assessment', 'description': 'Assessment of how AI improves risk management in the application.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinTechAI.search_applications` 并传入 `domain` 和 `technology`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinTechAI.search_applications\",\n    \"args\": \"{'domain': 'internet_finance', 'technology': 'AI'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解互联网金融与人工智能的结合点。首先，收集人工智能在互联网金融中的应用方向。然后，查询相关的算法和模型。接着，研究人工智能如何提升客户服务体验。最后，分析人工智能对互联网金融风险管理的改进。"
            }
        ]
    },
    "487": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialCrisisReports.search_reports",
                "FinancialCrisisReports.get_report_details",
                "FinancialCrisisReports.find_emerging_markets_studies",
                "FinancialCrisisReports.get_us_recovery_data",
                "FinancialCrisisReports.predict_future_crisis",
                "FinancialCrisisReports.get_crisis_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialCrisisReports.search_reports",
                "args": "{\"crisisType\": \"major\", \"timeFrame\": \"lastDecade\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialCrisisReports.get_report_details",
                "args": "{\"reportId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialCrisisReports.get_report_details",
                "args": "{\"reportId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialCrisisReports.get_report_details",
                "args": "{\"reportId\": 1003}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinancialCrisisReports.find_emerging_markets_studies",
                "args": "{\"crisisType\": \"major\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinancialCrisisReports.get_us_recovery_data",
                "args": "{\"crisisType\": \"lastCrisis\"}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinancialCrisisReports.predict_future_crisis",
                "args": "{\"timeFrame\": \"nextDecade\"}"
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "FinancialCrisisReports.get_crisis_strategies",
                "args": "{\"crisisType\": \"potential\"}"
            },
            {
                "id": 8,
                "prev": [
                    7
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialCrisisReports.search_reports', {'name': 'FinancialCrisisReports.search_reports', 'description': 'This function searches for detailed reports on major financial crises within a specified time frame.', 'required_parameters': [{'name': 'crisisType', 'type': 'STRING', 'description': 'The type of financial crisis, e.g., major, minor.'}, {'name': 'timeFrame', 'type': 'STRING', 'description': 'The time frame for the search, e.g., lastDecade, nextDecade.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to three matching reports, each with an ID, title, and summary.'}]}], ['FinancialCrisisReports.get_report_details', {'name': 'FinancialCrisisReports.get_report_details', 'description': 'This function retrieves detailed information about a specific financial crisis report given its ID.', 'required_parameters': [{'name': 'reportId', 'type': 'NUMBER', 'description': 'The ID of the financial crisis report.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the report, including full text, analysis, and conclusions.'}]}], ['FinancialCrisisReports.find_emerging_markets_studies', {'name': 'FinancialCrisisReports.find_emerging_markets_studies', 'description': 'This function searches for studies on the performance of emerging markets during major financial crises.', 'required_parameters': [{'name': 'crisisType', 'type': 'STRING', 'description': 'The type of financial crisis, e.g., major, minor.'}], 'optional_parameters': [], 'return_data': [{'name': 'studies', 'description': 'A list of studies, each with an ID, title, and summary.'}]}], ['FinancialCrisisReports.get_us_recovery_data', {'name': 'FinancialCrisisReports.get_us_recovery_data', 'description': 'This function retrieves data on the economic recovery of the United States after a specified financial crisis.', 'required_parameters': [{'name': 'crisisType', 'type': 'STRING', 'description': 'The type of financial crisis, e.g., lastCrisis, previousCrisis.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Economic recovery data, including GDP growth, employment rates, and stock market performance.'}]}], ['FinancialCrisisReports.predict_future_crisis', {'name': 'FinancialCrisisReports.predict_future_crisis', 'description': 'This function retrieves predictions from authoritative institutions on the likelihood of future financial crises within a specified time frame.', 'required_parameters': [{'name': 'timeFrame', 'type': 'STRING', 'description': 'The time frame for the prediction, e.g., nextDecade, nextFiveYears.'}], 'optional_parameters': [], 'return_data': [{'name': 'predictions', 'description': 'Predictions on future financial crises, including probabilities and potential causes.'}]}], ['FinancialCrisisReports.get_crisis_strategies', {'name': 'FinancialCrisisReports.get_crisis_strategies', 'description': 'This function retrieves strategies for dealing with potential financial crises.', 'required_parameters': [{'name': 'crisisType', 'type': 'STRING', 'description': 'The type of financial crisis, e.g., potential, historical.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of strategies, each with a description and recommended actions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialCrisisReports.search_reports` 并传入 `crisisType` 和 `timeFrame`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialCrisisReports.search_reports\",\n    \"args\": \"{'crisisType': 'major', 'timeFrame': 'lastDecade'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究全球金融危机的影响。首先，获取过去十年中三次重大金融危机的详细报告。然后，查找有关新兴市场在金融危机中表现的研究论文。接着，获取美国在最近一次金融危机后的经济复苏数据。最后，通过权威机构获取对未来可能发生金融危机的预测，并了解一些应对金融危机的策略。"
            }
        ]
    },
    "489": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialCrisisData.fetch_unemployment_rates",
                "FinancialCrisisData.get_industry_changes",
                "FinancialCrisisData.analyze_graduate_employment",
                "FinancialCrisisData.get_coping_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialCrisisData.fetch_unemployment_rates",
                "args": "{\"years\": [2018, 2019, 2020, 2021, 2022]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialCrisisData.get_industry_changes",
                "args": "{\"crisis_years\": [2018, 2019, 2020, 2021, 2022]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialCrisisData.analyze_graduate_employment",
                "args": "{\"crisis_years\": [2018, 2019, 2020, 2021, 2022]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialCrisisData.get_coping_strategies",
                "args": "{\"crisis_years\": [2018, 2019, 2020, 2021, 2022]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialCrisisData.fetch_unemployment_rates', {'name': 'FinancialCrisisData.fetch_unemployment_rates', 'description': 'This function fetches unemployment rates for specified years.', 'required_parameters': [{'name': 'years', 'type': 'ARRAY', 'description': 'An array of years for which unemployment rates are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'unemployment_rates', 'description': 'A list of unemployment rates for the specified years.'}]}], ['FinancialCrisisData.get_industry_changes', {'name': 'FinancialCrisisData.get_industry_changes', 'description': 'This function retrieves employment changes in different industries during specified crisis years.', 'required_parameters': [{'name': 'crisis_years', 'type': 'ARRAY', 'description': 'An array of crisis years for which industry changes are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'industry_changes', 'description': 'A list of employment changes in different industries during the specified crisis years.'}]}], ['FinancialCrisisData.analyze_graduate_employment', {'name': 'FinancialCrisisData.analyze_graduate_employment', 'description': 'This function analyzes employment opportunities and challenges for recent graduates during specified crisis years.', 'required_parameters': [{'name': 'crisis_years', 'type': 'ARRAY', 'description': 'An array of crisis years for which graduate employment analysis is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'graduate_employment_analysis', 'description': 'An analysis of employment opportunities and challenges for recent graduates during the specified crisis years.'}]}], ['FinancialCrisisData.get_coping_strategies', {'name': 'FinancialCrisisData.get_coping_strategies', 'description': 'This function provides strategies to cope with employment challenges during financial crises.', 'required_parameters': [{'name': 'crisis_years', 'type': 'ARRAY', 'description': 'An array of crisis years for which coping strategies are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'coping_strategies', 'description': 'A list of strategies to cope with employment challenges during the specified financial crises.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialCrisisData.fetch_unemployment_rates` 并传入 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialCrisisData.fetch_unemployment_rates\",\n    \"args\": \"{'years': [2018, 2019, 2020, 2021, 2022]}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我要了解金融危机对就业市场的冲击。首先，收集近五年内全球金融危机导致的失业率数据。然后，获取不同行业在金融危机期间的就业变化情况。接着，分析刚毕业大学生在金融危机中的就业机会和挑战。最后，通过专业机构获取应对金融危机就业困境的建议。"
            }
        ]
    },
    "491": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CulturalMarketAnalysis.fetch_cultural_spending",
                "CulturalMarketAnalysis.get_product_performance",
                "CulturalMarketAnalysis.study_graduates_spending",
                "CulturalMarketAnalysis.fetch_innovation_trends"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CulturalMarketAnalysis.fetch_cultural_spending",
                "args": "{\"crisis_period\": \"2008\", \"category\": \"entertainment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CulturalMarketAnalysis.get_product_performance",
                "args": "{\"crisis_period\": \"2008\", \"product_types\": [\"movies\", \"music\", \"video_games\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CulturalMarketAnalysis.study_graduates_spending",
                "args": "{\"crisis_period\": \"2008\", \"demographic\": \"recent_graduates\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CulturalMarketAnalysis.fetch_innovation_trends",
                "args": "{\"source\": \"cultural_institute\", \"category\": \"entertainment\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CulturalMarketAnalysis.fetch_cultural_spending', {'name': 'CulturalMarketAnalysis.fetch_cultural_spending', 'description': 'This function retrieves cultural spending data during a specified crisis period.', 'required_parameters': [{'name': 'crisis_period', 'type': 'STRING', 'description': 'The period of the crisis, e.g., 2008 for the financial crisis.'}, {'name': 'category', 'type': 'STRING', 'description': 'The category of cultural spending, e.g., entertainment, arts.'}], 'optional_parameters': [], 'return_data': [{'name': 'spending_data', 'description': 'A dataset of cultural spending during the crisis period.'}]}], ['CulturalMarketAnalysis.get_product_performance', {'name': 'CulturalMarketAnalysis.get_product_performance', 'description': 'This function retrieves the market performance of cultural products during a crisis period.', 'required_parameters': [{'name': 'crisis_period', 'type': 'STRING', 'description': 'The period of the crisis, e.g., 2008 for the financial crisis.'}, {'name': 'product_types', 'type': 'ARRAY', 'description': 'An array of product types to analyze, e.g., movies, music.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance_data', 'description': 'A dataset of product performance during the crisis period.'}]}], ['CulturalMarketAnalysis.study_graduates_spending', {'name': 'CulturalMarketAnalysis.study_graduates_spending', 'description': 'This function studies the spending habits of a specific demographic during a crisis period.', 'required_parameters': [{'name': 'crisis_period', 'type': 'STRING', 'description': 'The period of the crisis, e.g., 2008 for the financial crisis.'}, {'name': 'demographic', 'type': 'STRING', 'description': 'The demographic to study, e.g., recent_graduates.'}], 'optional_parameters': [], 'return_data': [{'name': 'spending_habits', 'description': 'A dataset of spending habits for the specified demographic during the crisis period.'}]}], ['CulturalMarketAnalysis.fetch_innovation_trends', {'name': 'CulturalMarketAnalysis.fetch_innovation_trends', 'description': 'This function fetches future innovation trends in a cultural category from a specified source.', 'required_parameters': [{'name': 'source', 'type': 'STRING', 'description': 'The source of the innovation trends, e.g., cultural_institute.'}, {'name': 'category', 'type': 'STRING', 'description': 'The cultural category to analyze, e.g., entertainment.'}], 'optional_parameters': [], 'return_data': [{'name': 'innovation_trends', 'description': 'A dataset of future innovation trends in the cultural category.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CulturalMarketAnalysis.fetch_cultural_spending` 并传入 `crisis_period` 和 `category`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CulturalMarketAnalysis.fetch_cultural_spending\",\n    \"args\": \"{'crisis_period': '2008', 'category': 'entertainment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析金融危机对文化娱乐市场的冲击。首先，收集金融危机期间文化娱乐消费的支出数据。然后，获取不同类型文化娱乐产品在金融危机中的市场表现。接着，研究刚毕业大学生在文化娱乐消费方面在金融危机下的变化。最后，通过文化产业研究机构获取文化娱乐市场未来的创新趋势。"
            }
        ]
    },
    "493": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondInvestment.get_bond_fundamentals",
                "BondInvestment.filter_stable_bonds",
                "BondInvestment.check_credit_rating",
                "BondInvestment.develop_investment_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondInvestment.get_bond_fundamentals",
                "args": "{\"type\": \"bond\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondInvestment.filter_stable_bonds",
                "args": "{\"count\": 3}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BondInvestment.check_credit_rating",
                "args": "{\"bondIds\": [1001, 1002, 1003]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BondInvestment.develop_investment_strategy",
                "args": "{\"bondIds\": [1001, 1002, 1003]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondInvestment.get_bond_fundamentals', {'name': 'BondInvestment.get_bond_fundamentals', 'description': 'This function provides basic information about bonds.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of bond, e.g., corporate, government.'}], 'optional_parameters': [], 'return_data': [{'name': 'fundamentals', 'description': 'A list of up to three matching bonds, each with an ID, type, and issuer.'}]}], ['BondInvestment.filter_stable_bonds', {'name': 'BondInvestment.filter_stable_bonds', 'description': 'This function filters out bonds with stable returns.', 'required_parameters': [{'name': 'count', 'type': 'NUMBER', 'description': 'The number of stable bonds to return.'}], 'optional_parameters': [], 'return_data': [{'name': 'stableBonds', 'description': 'A list of stable bonds, each with an ID.'}]}], ['BondInvestment.check_credit_rating', {'name': 'BondInvestment.check_credit_rating', 'description': 'This function checks the credit rating of specific bonds given their IDs.', 'required_parameters': [{'name': 'bondIds', 'type': 'ARRAY', 'description': 'An array of bond IDs to check.'}], 'optional_parameters': [], 'return_data': [{'name': 'ratings', 'description': 'Credit ratings for the selected bonds.'}]}], ['BondInvestment.develop_investment_strategy', {'name': 'BondInvestment.develop_investment_strategy', 'description': 'This function develops an investment strategy for specific bonds given their IDs.', 'required_parameters': [{'name': 'bondIds', 'type': 'ARRAY', 'description': 'An array of bond IDs to develop a strategy for.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'An investment strategy for the selected bonds.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BondInvestment.get_bond_fundamentals` 并传入 `type`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BondInvestment.get_bond_fundamentals\",\n    \"args\": \"{'type': 'corporate'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解债券投资，首先，提供债券投资的基础知识介绍。然后，筛选出3种收益稳定的债券品种。接着，查询这3种债券的发行主体信用评级。最后，给出这3种债券的投资策略。"
            }
        ]
    },
    "495": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CrowdfundingSearch.find_projects",
                "CrowdfundingSearch.get_project_details",
                "CrowdfundingSearch.assess_project_feasibility",
                "CrowdfundingSearch.provide_participation_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CrowdfundingSearch.find_projects",
                "args": "{\"category\": \"technology\", \"status\": \"hot\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CrowdfundingSearch.get_project_details",
                "args": "{\"projectId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CrowdfundingSearch.assess_project_feasibility",
                "args": "{\"projectId\": 1001}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CrowdfundingSearch.provide_participation_tips",
                "args": "{\"projectId\": 1001}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CrowdfundingSearch.find_projects', {'name': 'CrowdfundingSearch.find_projects', 'description': 'This function searches for crowdfunding projects based on category and status.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of the crowdfunding project, e.g., technology, art, social.'}, {'name': 'status', 'type': 'STRING', 'description': 'The status of the project, e.g., hot, upcoming, completed.'}], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': 'A list of up to three matching projects, each with an ID, category, and status.'}]}], ['CrowdfundingSearch.get_project_details', {'name': 'CrowdfundingSearch.get_project_details', 'description': 'This function retrieves detailed information about a specific crowdfunding project given its ID.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the crowdfunding project.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the project, including funding goal, current funding, and timeline.'}]}], ['CrowdfundingSearch.assess_project_feasibility', {'name': 'CrowdfundingSearch.assess_project_feasibility', 'description': 'This function assesses the feasibility of a crowdfunding project based on its details.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the crowdfunding project.'}], 'optional_parameters': [], 'return_data': [{'name': 'feasibility', 'description': 'An assessment of the project’s feasibility, including risks and potential returns.'}]}], ['CrowdfundingSearch.provide_participation_tips', {'name': 'CrowdfundingSearch.provide_participation_tips', 'description': 'This function provides tips for participating in a crowdfunding project based on its ID.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the crowdfunding project.'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'Tips for participating in the project, including how to invest and what to watch out for.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CrowdfundingSearch.find_projects` 并传入 `category` 和 `status`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CrowdfundingSearch.find_projects\",\n    \"args\": \"{'category': 'technology', 'status': 'hot'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我考虑参与众筹融资，首先，我需要了解当前热门的科技类众筹项目。然后，我想要获取这些项目的详细信息。接着，评估这些项目的可行性。最后，我需要得到参与众筹的注意事项。"
            }
        ]
    },
    "497": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoldInvestment.get_investment_methods",
                "GoldInvestment.get_recent_price_trends",
                "GoldInvestment.analyze_price_factors",
                "GoldInvestment.suggest_investment_timing"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoldInvestment.get_investment_methods",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GoldInvestment.get_recent_price_trends",
                "args": "{\"duration\": \"1 month\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GoldInvestment.analyze_price_factors",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GoldInvestment.suggest_investment_timing",
                "args": "{\"risk_tolerance\": \"medium\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoldInvestment.get_investment_methods', {'name': 'GoldInvestment.get_investment_methods', 'description': 'This function provides basic methods for investing in gold.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': 'A list of methods for investing in gold, including details on each method.'}]}], ['GoldInvestment.get_recent_price_trends', {'name': 'GoldInvestment.get_recent_price_trends', 'description': 'This function retrieves recent price trends for gold.', 'required_parameters': [{'name': 'duration', 'type': 'STRING', 'description': 'The duration for which to retrieve price trends, e.g., 1 month, 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'A chart or data showing the price trends of gold over the specified duration.'}]}], ['GoldInvestment.analyze_price_factors', {'name': 'GoldInvestment.analyze_price_factors', 'description': 'This function analyzes the main factors affecting gold prices.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'factors', 'description': 'An analysis of the factors that significantly impact gold prices.'}]}], ['GoldInvestment.suggest_investment_timing', {'name': 'GoldInvestment.suggest_investment_timing', 'description': 'This function suggests the best timing for gold investment based on risk tolerance.', 'required_parameters': [{'name': 'risk_tolerance', 'type': 'STRING', 'description': 'The investor’s risk tolerance level, e.g., low, medium, high.'}], 'optional_parameters': [], 'return_data': [{'name': 'timing', 'description': 'A suggestion on the best timing for gold investment based on the investor’s risk tolerance.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `GoldInvestment.get_investment_methods`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"GoldInvestment.get_investment_methods\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我有意投资黄金，首先，讲解黄金投资的基本方式。然后，获取近期黄金价格走势。接着，分析影响黄金价格的主要因素。最后，给出黄金投资的时机建议。"
            }
        ]
    },
    "499": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ForexInfo.get_forex_regulations",
                "ForexInfo.list_hot_currency_pairs",
                "ForexInfo.fetch_historical_rates",
                "ForexInfo.risk_management_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ForexInfo.get_forex_regulations",
                "args": "{\"country\": \"United States\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ForexInfo.list_hot_currency_pairs",
                "args": "{\"number\": 3}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ForexInfo.fetch_historical_rates",
                "args": "{\"currencyPairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ForexInfo.risk_management_strategies",
                "args": "{\"currencyPairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ForexInfo.get_forex_regulations', {'name': 'ForexInfo.get_forex_regulations', 'description': 'This function provides information on forex trading regulations based on the country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which regulations are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': 'A summary of forex trading regulations in the specified country.'}]}], ['ForexInfo.list_hot_currency_pairs', {'name': 'ForexInfo.list_hot_currency_pairs', 'description': 'This function lists the hottest currency pairs in forex trading.', 'required_parameters': [{'name': 'number', 'type': 'NUMBER', 'description': 'The number of currency pairs to list.'}], 'optional_parameters': [], 'return_data': [{'name': 'pairs', 'description': 'A list of the hottest currency pairs in forex trading.'}]}], ['ForexInfo.fetch_historical_rates', {'name': 'ForexInfo.fetch_historical_rates', 'description': 'This function fetches historical exchange rates for specified currency pairs.', 'required_parameters': [{'name': 'currencyPairs', 'type': 'ARRAY', 'description': 'An array of currency pairs for which historical rates are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'Historical exchange rates for the specified currency pairs.'}]}], ['ForexInfo.risk_management_strategies', {'name': 'ForexInfo.risk_management_strategies', 'description': 'This function provides risk management strategies for trading specified currency pairs.', 'required_parameters': [{'name': 'currencyPairs', 'type': 'ARRAY', 'description': 'An array of currency pairs for which risk management strategies are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Risk management strategies for trading the specified currency pairs.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ForexInfo.get_forex_regulations` 并传入 `country`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ForexInfo.get_forex_regulations\",\n    \"args\": \"{'country': 'United States'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想涉足外汇交易，首先，我需要了解在美国的外汇交易流程和法规。然后，我想知道目前最热门的三种外汇货币对。接着，我需要查询这些货币对的历史汇率数据。最后，我希望获得外汇交易的风险管理方法。"
            }
        ]
    },
    "500": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceSearch.find_financial_products",
                "FinanceSearch.get_product_details",
                "FinanceSearch.compare_products"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceSearch.find_financial_products",
                "args": "{\"type\": \"internet_finance\", \"category\": \"wealth_management\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceSearch.get_product_details",
                "args": "{\"productId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceSearch.get_product_details",
                "args": "{\"productId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceSearch.get_product_details",
                "args": "{\"productId\": 1003}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinanceSearch.compare_products",
                "args": "{\"productIds\": [1001, 1002, 1003]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceSearch.find_financial_products', {'name': 'FinanceSearch.find_financial_products', 'description': 'This function searches for financial products based on type and category.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of financial product, e.g., internet_finance, traditional_banking.'}, {'name': 'category', 'type': 'STRING', 'description': 'The category of the financial product, e.g., wealth_management, loans.'}], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of up to five matching financial products, each with an ID, type, and provider.'}]}], ['FinanceSearch.get_product_details', {'name': 'FinanceSearch.get_product_details', 'description': 'This function retrieves detailed information about a specific financial product given its ID.', 'required_parameters': [{'name': 'productId', 'type': 'NUMBER', 'description': 'The ID of the financial product.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the product, including interest rates, risk levels, and terms.'}]}], ['FinanceSearch.compare_products', {'name': 'FinanceSearch.compare_products', 'description': 'This function compares multiple financial products based on their IDs.', 'required_parameters': [{'name': 'productIds', 'type': 'ARRAY', 'description': 'An array of product IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected products, highlighting differences in interest rates, risk, and terms.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceSearch.find_financial_products` 并传入 `type` 和 `category`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceSearch.find_financial_products\",\n    \"args\": \"{'type': 'internet_finance', 'category': 'wealth_management'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我关注互联网金融理财产品，首先，列举5种热门的互联网金融理财产品。然后，获取它们的年化利率。接着，分析各自的风险等级。最后，推荐适合我的产品。"
            }
        ]
    },
    "502": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateFinance.list_financing_methods",
                "RealEstateFinance.query_regulations",
                "RealEstateFinance.analyze_market_environment",
                "RealEstateFinance.suggest_financing_operations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateFinance.list_financing_methods",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateFinance.query_regulations",
                "args": "{\"country\": \"China\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateFinance.analyze_market_environment",
                "args": "{\"location\": \"China\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateFinance.suggest_financing_operations",
                "args": "{\"marketAnalysis\": \"current\", \"regulations\": \"up-to-date\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateFinance.list_financing_methods', {'name': 'RealEstateFinance.list_financing_methods', 'description': 'Lists common methods of real estate financing.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': 'A list of financing methods.'}]}], ['RealEstateFinance.query_regulations', {'name': 'RealEstateFinance.query_regulations', 'description': 'Queries real estate financing regulations in a specific country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which regulations are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': 'A summary of relevant regulations.'}]}], ['RealEstateFinance.analyze_market_environment', {'name': 'RealEstateFinance.analyze_market_environment', 'description': 'Analyzes the current financing environment in the real estate market.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location of the real estate market to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the financing environment.'}]}], ['RealEstateFinance.suggest_financing_operations', {'name': 'RealEstateFinance.suggest_financing_operations', 'description': 'Suggests operations for real estate financing based on market analysis and regulations.', 'required_parameters': [{'name': 'marketAnalysis', 'type': 'STRING', 'description': 'The current market analysis.'}, {'name': 'regulations', 'type': 'STRING', 'description': 'The up-to-date regulations.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'A list of suggested financing operations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateFinance.list_financing_methods`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateFinance.list_financing_methods\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我对房地产融资有兴趣，首先，介绍房地产融资的常见方式。然后，查询我国房地产融资的政策法规。接着，分析当前房地产市场的融资环境。最后，给出房地产融资的操作建议。"
            }
        ]
    },
    "504": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceSearch.find_policies",
                "InsuranceSearch.get_policy_details",
                "InsuranceSearch.compare_policies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceSearch.find_policies",
                "args": "{\"type\": \"investment\", \"location\": \"California\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceSearch.get_policy_details",
                "args": "{\"policyId\": 10001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceSearch.get_policy_details",
                "args": "{\"policyId\": 10002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceSearch.get_policy_details",
                "args": "{\"policyId\": 10003}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InsuranceSearch.compare_policies",
                "args": "{\"policyIds\": [10001, 10002, 10003]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceSearch.find_policies', {'name': 'InsuranceSearch.find_policies', 'description': 'This function searches for insurance policies based on type and location.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of insurance policy, e.g., health, auto, home.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the policy will be applied.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of up to three matching policies, each with an ID, type, and provider.'}]}], ['InsuranceSearch.get_policy_details', {'name': 'InsuranceSearch.get_policy_details', 'description': 'This function retrieves detailed information about a specific insurance policy given its ID.', 'required_parameters': [{'name': 'policyId', 'type': 'NUMBER', 'description': 'The ID of the insurance policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the policy, including coverage, premium, and terms.'}]}], ['InsuranceSearch.compare_policies', {'name': 'InsuranceSearch.compare_policies', 'description': 'This function compares multiple insurance policies based on their IDs.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected policies, highlighting differences in coverage and cost.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InsuranceSearch.find_policies` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InsuranceSearch.find_policies\",\n    \"args\": \"{'type': 'health', 'location': 'New York'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算投资保险理财产品，首先，我需要了解在加州的保险理财产品种类和特点。然后，筛选出3款性价比高的产品。接着，查询它们的保障范围和理赔条件。最后，我需要知道购买这些产品的渠道和流程。"
            }
        ]
    },
    "506": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LeaseFinanceSearch.find_companies",
                "LeaseFinanceSearch.get_company_details",
                "LeaseFinanceSearch.compare_companies",
                "LeaseFinanceRiskAnalysis.analyze_risks_and_benefits"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LeaseFinanceSearch.find_companies",
                "args": "{\"location\": \"China\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "LeaseFinanceSearch.get_company_details",
                "args": "{\"companyId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "LeaseFinanceSearch.get_company_details",
                "args": "{\"companyId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LeaseFinanceSearch.compare_companies",
                "args": "{\"companyIds\": [1001, 1002]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "LeaseFinanceRiskAnalysis.analyze_risks_and_benefits",
                "args": "{\"companyIds\": [1001, 1002]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LeaseFinanceSearch.find_companies', {'name': 'LeaseFinanceSearch.find_companies', 'description': 'This function searches for lease finance companies based on location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location where the lease finance companies operate.'}], 'optional_parameters': [], 'return_data': [{'name': 'companies', 'description': 'A list of up to three lease finance companies, each with an ID, name, and location.'}]}], ['LeaseFinanceSearch.get_company_details', {'name': 'LeaseFinanceSearch.get_company_details', 'description': 'This function retrieves detailed information about a specific lease finance company given its ID.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the lease finance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the company, including business scope, advantages, and contact information.'}]}], ['LeaseFinanceSearch.compare_companies', {'name': 'LeaseFinanceSearch.compare_companies', 'description': 'This function compares multiple lease finance companies based on their IDs.', 'required_parameters': [{'name': 'companyIds', 'type': 'ARRAY', 'description': 'An array of company IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected companies, highlighting differences in services, advantages, and market presence.'}]}], ['LeaseFinanceRiskAnalysis.analyze_risks_and_benefits', {'name': 'LeaseFinanceRiskAnalysis.analyze_risks_and_benefits', 'description': 'This function analyzes the risks and benefits of lease finance for a given set of companies.', 'required_parameters': [{'name': 'companyIds', 'type': 'ARRAY', 'description': 'An array of company IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the risks and benefits associated with lease finance for the selected companies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `LeaseFinanceSearch.find_companies` 并传入 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"LeaseFinanceSearch.find_companies\",\n    \"args\": \"{'location': 'China'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解融资租赁，首先，讲解融资租赁的概念和运作模式。然后，查找国内知名的融资租赁公司。接着，获取这些公司的业务范围和优势。最后，分析融资租赁的风险和收益。"
            }
        ]
    },
    "508": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SupplyChainFinance.describe_concept",
                "SupplyChainFinance.find_case_study",
                "SupplyChainFinance.analyze_case",
                "SupplyChainFinance.outline_process"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SupplyChainFinance.describe_concept",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SupplyChainFinance.find_case_study",
                "args": "{\"industry\": \"automotive\", \"region\": \"Asia\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SupplyChainFinance.analyze_case",
                "args": "{\"caseId\": 54321}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SupplyChainFinance.outline_process",
                "args": "{\"businessType\": \"manufacturing\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SupplyChainFinance.describe_concept', {'name': 'SupplyChainFinance.describe_concept', 'description': 'This function provides an overview of supply chain finance, including its definition and role.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'concept', 'description': 'A detailed explanation of supply chain finance.'}]}], ['SupplyChainFinance.find_case_study', {'name': 'SupplyChainFinance.find_case_study', 'description': 'This function searches for a successful case study in supply chain finance based on industry and region.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry sector, e.g., automotive, electronics.'}, {'name': 'region', 'type': 'STRING', 'description': 'The geographical region where the case study is relevant.'}], 'optional_parameters': [], 'return_data': [{'name': 'caseStudy', 'description': 'A case study with details about the company, industry, and financial outcomes.'}]}], ['SupplyChainFinance.analyze_case', {'name': 'SupplyChainFinance.analyze_case', 'description': 'This function analyzes a specific case study in supply chain finance, highlighting key elements and innovations.', 'required_parameters': [{'name': 'caseId', 'type': 'NUMBER', 'description': 'The ID of the case study to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An in-depth analysis of the case study, including critical components and innovations.'}]}], ['SupplyChainFinance.outline_process', {'name': 'SupplyChainFinance.outline_process', 'description': 'This function outlines the process for implementing supply chain finance in a specific business type.', 'required_parameters': [{'name': 'businessType', 'type': 'STRING', 'description': 'The type of business, e.g., manufacturing, retail.'}], 'optional_parameters': [], 'return_data': [{'name': 'process', 'description': 'A step-by-step guide for implementing supply chain finance in the specified business type.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `SupplyChainFinance.find_case_study` 并传入 `industry` 和 `region`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"SupplyChainFinance.find_case_study\",\n    \"args\": \"{'industry': 'automotive', 'region': 'Asia'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我对供应链金融感兴趣，首先，我需要了解供应链金融的内涵和作用。然后，我想获取一个在亚洲汽车行业的供应链金融成功案例。接着，我需要分析案例中的关键环节和创新点。最后，我希望得到在制造业开展供应链金融业务的流程和要点。"
            }
        ]
    },
    "510": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceInnovationSearch.find_products",
                "FinanceInnovationSearch.get_product_details",
                "FinanceInnovationSearch.compare_products",
                "FinanceInnovationSearch.analyze_trends",
                "FinanceInnovationSearch.assess_market_prospects"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceInnovationSearch.find_products",
                "args": "{\"category\": \"financial_innovation\", \"location\": \"Global\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceInnovationSearch.get_product_details",
                "args": "{\"productId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceInnovationSearch.get_product_details",
                "args": "{\"productId\": 1002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceInnovationSearch.compare_products",
                "args": "{\"productIds\": [1001, 1002]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinanceInnovationSearch.analyze_trends",
                "args": "{\"productCategory\": \"financial_innovation\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinanceInnovationSearch.assess_market_prospects",
                "args": "{\"productCategory\": \"financial_innovation\"}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceInnovationSearch.find_products', {'name': 'FinanceInnovationSearch.find_products', 'description': 'This function searches for financial innovation products based on category and location.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of financial innovation products, e.g., financial_innovation.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the products are available.'}], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of up to three matching financial innovation products, each with an ID, category, and provider.'}]}], ['FinanceInnovationSearch.get_product_details', {'name': 'FinanceInnovationSearch.get_product_details', 'description': 'This function retrieves detailed information about a specific financial innovation product given its ID.', 'required_parameters': [{'name': 'productId', 'type': 'NUMBER', 'description': 'The ID of the financial innovation product.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the product, including innovation points, advantages, and terms.'}]}], ['FinanceInnovationSearch.compare_products', {'name': 'FinanceInnovationSearch.compare_products', 'description': 'This function compares multiple financial innovation products based on their IDs.', 'required_parameters': [{'name': 'productIds', 'type': 'ARRAY', 'description': 'An array of product IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected products, highlighting differences in innovation and benefits.'}]}], ['FinanceInnovationSearch.analyze_trends', {'name': 'FinanceInnovationSearch.analyze_trends', 'description': 'This function analyzes the trends of financial innovation products based on the category.', 'required_parameters': [{'name': 'productCategory', 'type': 'STRING', 'description': 'The category of financial innovation products to analyze trends for.'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'An analysis of the trends in the specified category of financial innovation products.'}]}], ['FinanceInnovationSearch.assess_market_prospects', {'name': 'FinanceInnovationSearch.assess_market_prospects', 'description': 'This function assesses the market prospects of financial innovation products based on the category.', 'required_parameters': [{'name': 'productCategory', 'type': 'STRING', 'description': 'The category of financial innovation products to assess market prospects for.'}], 'optional_parameters': [], 'return_data': [{'name': 'prospects', 'description': 'An assessment of the market prospects for the specified category of financial innovation products.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceInnovationSearch.find_products` 并传入 `category` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceInnovationSearch.find_products\",\n    \"args\": \"{'category': 'financial_innovation', 'location': 'Global'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算研究全球范围内的金融创新产品，首先，我需要找到当前热门的金融创新产品。然后，获取这些产品的详细信息，包括创新点和优势。接着，分析这些金融创新产品的发展趋势。最后，评估这些金融创新产品的市场前景。"
            }
        ]
    },
    "511": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FintechDiscovery.search_innovations",
                "FintechDiscovery.fetch_innovation_details",
                "FintechDiscovery.trend_analysis",
                "FintechDiscovery.market_forecast"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FintechDiscovery.search_innovations",
                "args": "{\"sector\": \"fintech\", \"region\": \"Global\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FintechDiscovery.fetch_innovation_details",
                "args": "{\"innovationId\": 2001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FintechDiscovery.fetch_innovation_details",
                "args": "{\"innovationId\": 2002}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FintechDiscovery.trend_analysis",
                "args": "{\"sector\": \"fintech\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FintechDiscovery.market_forecast",
                "args": "{\"sector\": \"fintech\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FintechDiscovery.search_innovations', {'name': 'FintechDiscovery.search_innovations', 'description': 'This function searches for fintech innovations based on sector and region.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of fintech innovations, e.g., fintech.'}, {'name': 'region', 'type': 'STRING', 'description': 'The region where the innovations are prominent.'}], 'optional_parameters': [], 'return_data': [{'name': 'innovations', 'description': 'A list of up to three matching fintech innovations, each with an ID, sector, and provider.'}]}], ['FintechDiscovery.fetch_innovation_details', {'name': 'FintechDiscovery.fetch_innovation_details', 'description': 'This function retrieves detailed information about a specific fintech innovation given its ID.', 'required_parameters': [{'name': 'innovationId', 'type': 'NUMBER', 'description': 'The ID of the fintech innovation.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the innovation, including its unique features, benefits, and terms.'}]}], ['FintechDiscovery.trend_analysis', {'name': 'FintechDiscovery.trend_analysis', 'description': 'This function analyzes the trends of fintech innovations based on the sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of fintech innovations to analyze trends for.'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'An analysis of the trends in the specified sector of fintech innovations.'}]}], ['FintechDiscovery.market_forecast', {'name': 'FintechDiscovery.market_forecast', 'description': 'This function forecasts the market prospects of fintech innovations based on the sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of fintech innovations to forecast market prospects for.'}], 'optional_parameters': [], 'return_data': [{'name': 'forecast', 'description': 'A forecast of the market prospects for the specified sector of fintech innovations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FintechDiscovery.search_innovations` 并传入 `sector` 和 `region`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FintechDiscovery.search_innovations\",\n    \"args\": \"{'sector': 'fintech', 'region': 'Global'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我计划研究全球范围内的金融科技创新，首先，我需要找到当前热门的金融科技创新产品。然后，获取这些产品的详细信息，包括其独特特点和优势。接着，分析金融科技创新的发展趋势。最后，预测金融科技创新的市场前景。"
            }
        ]
    },
    "512": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CreditRatingSearch.find_rating_standards",
                "CreditRatingSearch.get_rating_agencies",
                "CreditRatingSearch.fetch_company_rating",
                "CreditRatingSearch.analyze_impact_on_financing"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CreditRatingSearch.find_rating_standards",
                "args": "{\"category\": \"financial\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CreditRatingSearch.get_rating_agencies",
                "args": "{\"country\": \"China\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CreditRatingSearch.fetch_company_rating",
                "args": "{\"companyId\": 98765, \"agency\": \"ChinaRating\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CreditRatingSearch.analyze_impact_on_financing",
                "args": "{\"rating\": \"AA+\", \"industry\": \"manufacturing\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CreditRatingSearch.find_rating_standards', {'name': 'CreditRatingSearch.find_rating_standards', 'description': 'This function searches for credit rating standards based on the category.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'The category of credit rating standards, e.g., financial, corporate.'}], 'optional_parameters': [], 'return_data': [{'name': 'standards', 'description': 'A list of up to three rating standards for the specified category.'}]}], ['CreditRatingSearch.get_rating_agencies', {'name': 'CreditRatingSearch.get_rating_agencies', 'description': 'This function retrieves a list of major credit rating agencies based on the country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country where the rating agencies are based.'}], 'optional_parameters': [], 'return_data': [{'name': 'agencies', 'description': 'A list of up to five major credit rating agencies in the specified country.'}]}], ['CreditRatingSearch.fetch_company_rating', {'name': 'CreditRatingSearch.fetch_company_rating', 'description': 'This function fetches the credit rating report for a specific company from a given rating agency.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the company.'}, {'name': 'agency', 'type': 'STRING', 'description': 'The name of the rating agency.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The credit rating report for the specified company from the given agency.'}]}], ['CreditRatingSearch.analyze_impact_on_financing', {'name': 'CreditRatingSearch.analyze_impact_on_financing', 'description': 'This function analyzes the impact of a credit rating on a company’s financing options.', 'required_parameters': [{'name': 'rating', 'type': 'STRING', 'description': 'The credit rating of the company.'}, {'name': 'industry', 'type': 'STRING', 'description': 'The industry the company operates in.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of how the credit rating affects the company’s financing options in the specified industry.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CreditRatingSearch.find_rating_standards` 并传入 `category`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CreditRatingSearch.find_rating_standards\",\n    \"args\": \"{'category': 'financial'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融信用评级的标准，获取中国主要信用评级机构的名单，查询ID为98765的制造企业在中国评级机构ChinaRating的信用评级报告，最后分析AA+评级对制造企业融资的影响。"
            }
        ]
    },
    "514": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LeaseSearch.find_leases",
                "LeaseSearch.get_lease_details",
                "LeaseSearch.compare_leases",
                "LegalSearch.find_laws",
                "MarketAnalysis.analyze_competition"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LeaseSearch.find_leases",
                "args": "{\"type\": \"financial\", \"location\": \"New York\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "LegalSearch.find_laws",
                "args": "{\"topic\": \"financial_lease\", \"location\": \"New York\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketAnalysis.analyze_competition",
                "args": "{\"industry\": \"financial_lease\", \"location\": \"New York\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LeaseSearch.get_lease_details",
                "args": "{\"leaseId\": 12345}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "LeaseSearch.get_lease_details",
                "args": "{\"leaseId\": 67890}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "LeaseSearch.compare_leases",
                "args": "{\"leaseIds\": [12345, 67890]}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LeaseSearch.find_leases', {'name': 'LeaseSearch.find_leases', 'description': 'This function searches for lease agreements based on type and location.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of lease agreement, e.g., financial, real_estate.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the lease will be applied.'}], 'optional_parameters': [], 'return_data': [{'name': 'leases', 'description': 'A list of up to three matching leases, each with an ID, type, and terms.'}]}], ['LeaseSearch.get_lease_details', {'name': 'LeaseSearch.get_lease_details', 'description': 'This function retrieves detailed information about a specific lease agreement given its ID.', 'required_parameters': [{'name': 'leaseId', 'type': 'NUMBER', 'description': 'The ID of the lease agreement.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the lease, including terms, conditions, and costs.'}]}], ['LeaseSearch.compare_leases', {'name': 'LeaseSearch.compare_leases', 'description': 'This function compares multiple lease agreements based on their IDs.', 'required_parameters': [{'name': 'leaseIds', 'type': 'ARRAY', 'description': 'An array of lease IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected leases, highlighting differences in terms and costs.'}]}], ['LegalSearch.find_laws', {'name': 'LegalSearch.find_laws', 'description': 'This function searches for laws and regulations based on topic and location.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the law or regulation, e.g., financial_lease, real_estate.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the law applies.'}], 'optional_parameters': [], 'return_data': [{'name': 'laws', 'description': 'A list of laws and regulations related to the topic and location.'}]}], ['MarketAnalysis.analyze_competition', {'name': 'MarketAnalysis.analyze_competition', 'description': 'This function analyzes the competitive landscape of a specific industry in a given location.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to analyze, e.g., financial_lease, technology.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the industry operates.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the competitive landscape, including major players, market share, and trends.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `LeaseSearch.find_leases` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"LeaseSearch.find_leases\",\n    \"args\": \"{'type': 'financial', 'location': 'New York'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我对金融租赁感兴趣，首先，我需要了解在纽约的金融租赁业务模式和适用范围。然后，获取金融租赁的相关法律法规。接着，分析纽约金融租赁市场的竞争格局。最后，我需要获取两项金融租赁业务的详细信息，并进行比较。"
            }
        ]
    },
    "516": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AssetSecuritizationSearch.find_cases",
                "AssetSecuritizationSearch.get_case_details",
                "AssetSecuritizationSearch.analyze_risks",
                "AssetSecuritizationSearch.get_process"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AssetSecuritizationSearch.find_cases",
                "args": "{\"sector\": \"mortgage\", \"region\": \"North America\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AssetSecuritizationSearch.get_case_details",
                "args": "{\"caseId\": 1001}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AssetSecuritizationSearch.analyze_risks",
                "args": "{\"caseId\": 1001}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AssetSecuritizationSearch.get_process",
                "args": "{\"caseId\": 1001}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AssetSecuritizationSearch.find_cases', {'name': 'AssetSecuritizationSearch.find_cases', 'description': 'This function searches for successful cases of asset securitization based on sector and region.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of the asset securitization, e.g., mortgage, auto loans, credit cards.'}, {'name': 'region', 'type': 'STRING', 'description': 'The region where the securitization took place.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of up to three successful cases, each with an ID, sector, and region.'}]}], ['AssetSecuritizationSearch.get_case_details', {'name': 'AssetSecuritizationSearch.get_case_details', 'description': 'This function retrieves detailed information about a specific case of asset securitization given its ID.', 'required_parameters': [{'name': 'caseId', 'type': 'NUMBER', 'description': 'The ID of the asset securitization case.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the case, including the assets involved, the structure, and the outcome.'}]}], ['AssetSecuritizationSearch.analyze_risks', {'name': 'AssetSecuritizationSearch.analyze_risks', 'description': 'This function analyzes the risks associated with a specific case of asset securitization given its ID.', 'required_parameters': [{'name': 'caseId', 'type': 'NUMBER', 'description': 'The ID of the asset securitization case.'}], 'optional_parameters': [], 'return_data': [{'name': 'risks', 'description': 'An analysis of the risks involved in the case, including market risks, credit risks, and operational risks.'}]}], ['AssetSecuritizationSearch.get_process', {'name': 'AssetSecuritizationSearch.get_process', 'description': 'This function provides the detailed process of a specific case of asset securitization given its ID.', 'required_parameters': [{'name': 'caseId', 'type': 'NUMBER', 'description': 'The ID of the asset securitization case.'}], 'optional_parameters': [], 'return_data': [{'name': 'process', 'description': 'A step-by-step process of how the asset securitization was implemented, including the key steps and milestones.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `AssetSecuritizationSearch.find_cases` 并传入 `sector` 和 `region`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"AssetSecuritizationSearch.find_cases\",\n    \"args\": \"{'sector': 'mortgage', 'region': 'North America'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究金融资产证券化，首先，我需要找到在北美地区成功的抵押贷款资产证券化案例。然后，我需要获取其中一个案例的详细信息。接着，分析这个案例中的关键步骤和风险点。最后，我需要了解这个案例的实施流程。"
            }
        ]
    },
    "518": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialConsulting.find_services",
                "FinancialConsulting.get_service_details",
                "FinancialConsulting.check_service_reviews",
                "FinancialConsulting.compare_services"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialConsulting.find_services",
                "args": "{\"type\": \"investment\", \"location\": \"California\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialConsulting.get_service_details",
                "args": "{\"serviceId\": 54321}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialConsulting.get_service_details",
                "args": "{\"serviceId\": 98765}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialConsulting.check_service_reviews",
                "args": "{\"serviceIds\": [54321, 98765]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinancialConsulting.compare_services",
                "args": "{\"serviceIds\": [54321, 98765]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialConsulting.find_services', {'name': 'FinancialConsulting.find_services', 'description': 'This function searches for financial consulting services based on type and location.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of financial consulting service, e.g., investment, retirement planning.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the service is provided.'}], 'optional_parameters': [], 'return_data': [{'name': 'services', 'description': 'A list of up to three matching services, each with an ID, type, and provider.'}]}], ['FinancialConsulting.get_service_details', {'name': 'FinancialConsulting.get_service_details', 'description': 'This function retrieves detailed information about a specific financial consulting service given its ID.', 'required_parameters': [{'name': 'serviceId', 'type': 'NUMBER', 'description': 'The ID of the financial consulting service.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the service, including scope, fees, and terms.'}]}], ['FinancialConsulting.check_service_reviews', {'name': 'FinancialConsulting.check_service_reviews', 'description': 'This function checks reviews for multiple financial consulting services based on their IDs.', 'required_parameters': [{'name': 'serviceIds', 'type': 'ARRAY', 'description': 'An array of service IDs to check reviews for.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'A collection of reviews for the selected services.'}]}], ['FinancialConsulting.compare_services', {'name': 'FinancialConsulting.compare_services', 'description': 'This function compares multiple financial consulting services based on their IDs.', 'required_parameters': [{'name': 'serviceIds', 'type': 'ARRAY', 'description': 'An array of service IDs to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'A comparison of the selected services, highlighting differences in scope, fees, and terms.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialConsulting.find_services` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialConsulting.find_services\",\n    \"args\": \"{'type': 'investment', 'location': 'California'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在寻找位于加州的投资咨询服务，并需要获取其中不超过三项服务的详细信息，检查这些服务的评价，最后对它们进行比较。"
            }
        ]
    },
    "0": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolicyAnalysis.fetch_latest_policies",
                "PolicyAnalysis.analyze_innovation_impact",
                "PolicyAnalysis.get_monthly_innovation_data",
                "PolicyAnalysis.assess_market_development",
                "PolicyAnalysis.suggest_policy_improvements"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolicyAnalysis.fetch_latest_policies",
                "args": "{\"sector\": \"insurance\", \"year\": 2024}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PolicyAnalysis.analyze_innovation_impact",
                "args": "{\"policyIds\": [101, 102]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PolicyAnalysis.get_monthly_innovation_data",
                "args": "{\"year\": 2024}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PolicyAnalysis.assess_market_development",
                "args": "{\"policyIds\": [101, 102]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "PolicyAnalysis.suggest_policy_improvements",
                "args": "{\"analysisResults\": \"[data from previous steps]\"}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolicyAnalysis.fetch_latest_policies', {'name': 'PolicyAnalysis.fetch_latest_policies', 'description': 'This function fetches the latest policy documents for a specified sector and year.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which policies are being fetched, e.g., insurance.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the policies to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of the latest policy documents.'}]}], ['PolicyAnalysis.analyze_innovation_impact', {'name': 'PolicyAnalysis.analyze_innovation_impact', 'description': 'This function analyzes the impact of specific policies on product innovation in the insurance sector.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'impactAnalysis', 'description': 'An analysis of how the policies have influenced product innovation.'}]}], ['PolicyAnalysis.get_monthly_innovation_data', {'name': 'PolicyAnalysis.get_monthly_innovation_data', 'description': 'This function retrieves monthly data on product innovation in the insurance sector for a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'monthlyData', 'description': 'Monthly counts of product innovations.'}]}], ['PolicyAnalysis.assess_market_development', {'name': 'PolicyAnalysis.assess_market_development', 'description': 'This function assesses the impact of specific policies on the development of the insurance market.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to assess.'}], 'optional_parameters': [], 'return_data': [{'name': 'marketAssessment', 'description': 'An assessment of the market development influenced by the policies.'}]}], ['PolicyAnalysis.suggest_policy_improvements', {'name': 'PolicyAnalysis.suggest_policy_improvements', 'description': 'This function suggests improvements to the regulatory policies based on the analysis results.', 'required_parameters': [{'name': 'analysisResults', 'type': 'STRING', 'description': 'The results from the previous analysis steps.'}], 'optional_parameters': [], 'return_data': [{'name': 'policySuggestions', 'description': 'Suggested improvements for the regulatory policies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `PolicyAnalysis.fetch_latest_policies` 并传入 `sector` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"PolicyAnalysis.fetch_latest_policies\",\n    \"args\": \"{'sector': 'insurance', 'year': 2024'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析政府对保险行业的监管政策。首先，获取最新的关于保险行业监管的政策文件。然后，分析这些政策对保险产品创新的影响，并获取2024年保险产品创新数量的月度数据。接着，评估政策对保险市场发展的推动作用。最后，提供一些关于如何进一步优化保险行业监管政策的建议。"
            }
        ]
    },
    "1": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SecuritiesRegulation.get_latest_policies",
                "SecuritiesRegulation.analyze_policy_impact",
                "SecuritiesRegulation.get_market_volatility",
                "SecuritiesRegulation.evaluate_investor_protection",
                "SecuritiesRegulation.optimize_regulatory_policies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SecuritiesRegulation.get_latest_policies",
                "args": "{\"region\": \"USA\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SecuritiesRegulation.analyze_policy_impact",
                "args": "{\"policyIds\": [1, 2, 3]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SecuritiesRegulation.get_market_volatility",
                "args": "{\"year\": 2024}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SecuritiesRegulation.evaluate_investor_protection",
                "args": "{\"policyIds\": [1, 2, 3]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "SecuritiesRegulation.optimize_regulatory_policies",
                "args": "{\"policyIds\": [1, 2, 3]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SecuritiesRegulation.get_latest_policies', {'name': 'SecuritiesRegulation.get_latest_policies', 'description': 'This function retrieves the latest regulatory policies for securities markets based on the region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region for which the policies are to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of the latest policies with their IDs and descriptions.'}]}], ['SecuritiesRegulation.analyze_policy_impact', {'name': 'SecuritiesRegulation.analyze_policy_impact', 'description': 'This function analyzes the impact of specific regulatory policies on market volatility.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis report detailing the impact of the policies on market volatility.'}]}], ['SecuritiesRegulation.get_market_volatility', {'name': 'SecuritiesRegulation.get_market_volatility', 'description': 'This function retrieves monthly market volatility data for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which the market volatility data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'volatilityData', 'description': 'Monthly volatility data for the specified year.'}]}], ['SecuritiesRegulation.evaluate_investor_protection', {'name': 'SecuritiesRegulation.evaluate_investor_protection', 'description': 'This function evaluates the effectiveness of regulatory policies in protecting investors.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to evaluate.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation report on the effectiveness of the policies in protecting investors.'}]}], ['SecuritiesRegulation.optimize_regulatory_policies', {'name': 'SecuritiesRegulation.optimize_regulatory_policies', 'description': 'This function provides recommendations for optimizing regulatory policies based on current evaluations.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to optimize.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Recommendations for optimizing the regulatory policies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `SecuritiesRegulation.get_latest_policies` 并传入 `region`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"SecuritiesRegulation.get_latest_policies\",\n    \"args\": \"{'region': 'USA'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要研究政府对证券市场的监管政策。首先，获取最新的关于证券市场监管的政策文件。然后，分析这些政策对股市波动的影响，并获取2024年股市波动率的月度数据。接着，评估政策对投资者保护的作用。最后，提供一些关于如何优化证券市场监管政策的建议。"
            }
        ]
    },
    "2": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FintechRegulation.get_latest_policies",
                "FintechRegulation.analyze_policy_impact",
                "FintechRegulation.get_quarterly_innovation_data",
                "FintechRegulation.evaluate_policy_effectiveness",
                "FintechRegulation.suggest_policy_improvements"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FintechRegulation.get_latest_policies",
                "args": "{\"year\": 2024}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FintechRegulation.analyze_policy_impact",
                "args": "{\"policyIds\": [1, 2, 3]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FintechRegulation.get_quarterly_innovation_data",
                "args": "{\"year\": 2024, \"quarter\": 1}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FintechRegulation.evaluate_policy_effectiveness",
                "args": "{\"policyIds\": [1, 2, 3], \"data\": \"2024_Q1_data\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FintechRegulation.suggest_policy_improvements",
                "args": "{\"evaluationResults\": \"evaluation_results\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FintechRegulation.get_latest_policies', {'name': 'FintechRegulation.get_latest_policies', 'description': 'This function retrieves the latest financial technology regulatory policies for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which to retrieve the latest policies.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of the latest policies, each with an ID and detailed information.'}]}], ['FintechRegulation.analyze_policy_impact', {'name': 'FintechRegulation.analyze_policy_impact', 'description': 'This function analyzes the impact of specified financial technology regulatory policies.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the impact of the selected policies on fintech innovation.'}]}], ['FintechRegulation.get_quarterly_innovation_data', {'name': 'FintechRegulation.get_quarterly_innovation_data', 'description': 'This function retrieves quarterly data on financial technology innovation projects for a specified year and quarter.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which to retrieve the data.'}, {'name': 'quarter', 'type': 'NUMBER', 'description': 'The quarter for which to retrieve the data.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Quarterly data on fintech innovation projects.'}]}], ['FintechRegulation.evaluate_policy_effectiveness', {'name': 'FintechRegulation.evaluate_policy_effectiveness', 'description': 'This function evaluates the effectiveness of financial technology regulatory policies based on provided data.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to evaluate.'}, {'name': 'data', 'type': 'STRING', 'description': 'The data used for evaluation.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of the effectiveness of the selected policies.'}]}], ['FintechRegulation.suggest_policy_improvements', {'name': 'FintechRegulation.suggest_policy_improvements', 'description': 'This function suggests improvements for financial technology regulatory policies based on evaluation results.', 'required_parameters': [{'name': 'evaluationResults', 'type': 'STRING', 'description': 'The results of the policy evaluation.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Suggestions for improving the regulatory policies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FintechRegulation.get_latest_policies` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FintechRegulation.get_latest_policies\",\n    \"args\": \"{'year': 2024}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析政府对金融科技的监管政策。首先，获取最新的关于金融科技监管的政策文件。然后，分析这些政策对金融科技创新的影响，并获取2024年金融科技创新项目的季度数据。接着，评估政策对金融科技发展的推动作用。最后，提供一些关于如何进一步优化金融科技监管政策的建议。"
            }
        ]
    },
    "3": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialRegulation.get_latest_policies",
                "FinancialRegulation.analyze_policy_impact",
                "FinancialRegulation.get_monthly_data",
                "FinancialRegulation.evaluate_consumer_protection",
                "FinancialRegulation.optimize_regulations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialRegulation.get_latest_policies",
                "args": "{\"sector\": \"consumer_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialRegulation.analyze_policy_impact",
                "args": "{\"policyIds\": [123, 456]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialRegulation.get_monthly_data",
                "args": "{\"year\": 2024, \"month\": \"January\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialRegulation.evaluate_consumer_protection",
                "args": "{\"policyIds\": [123, 456]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinancialRegulation.optimize_regulations",
                "args": "{\"policyIds\": [123, 456]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialRegulation.get_latest_policies', {'name': 'FinancialRegulation.get_latest_policies', 'description': 'This function retrieves the latest policy documents related to a specific financial sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of finance, e.g., consumer_finance, banking.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of the latest policy documents with IDs and titles.'}]}], ['FinancialRegulation.analyze_policy_impact', {'name': 'FinancialRegulation.analyze_policy_impact', 'description': 'This function analyzes the impact of specific policies on the financial market.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'An analysis of how the policies affect the market.'}]}], ['FinancialRegulation.get_monthly_data', {'name': 'FinancialRegulation.get_monthly_data', 'description': 'This function retrieves monthly data for a specific year and month.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year of the data.'}, {'name': 'month', 'type': 'STRING', 'description': 'The month of the data.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'The monthly data requested.'}]}], ['FinancialRegulation.evaluate_consumer_protection', {'name': 'FinancialRegulation.evaluate_consumer_protection', 'description': 'This function evaluates the effectiveness of policies in protecting consumer rights.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to evaluate.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of consumer protection effectiveness.'}]}], ['FinancialRegulation.optimize_regulations', {'name': 'FinancialRegulation.optimize_regulations', 'description': 'This function provides recommendations for optimizing financial regulations.', 'required_parameters': [{'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to optimize.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Recommendations for improving regulations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialRegulation.get_latest_policies` 并传入 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialRegulation.get_latest_policies\",\n    \"args\": \"{'sector': 'consumer_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要研究政府对消费金融的监管政策。首先，获取最新的关于消费金融监管的政策文件。然后，分析这些政策对消费信贷市场的影响，并获取2024年消费信贷发放量的月度数据。接着，评估政策对消费者权益保护的作用。最后，提供一些关于如何优化消费金融监管政策的建议。"
            }
        ]
    },
    "4": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BlockchainFinance.get_latest_articles",
                "BlockchainFinance.get_investment_report",
                "BlockchainFinance.get_bitcoin_transactions",
                "BlockchainFinance.get_investment_institutions",
                "BlockchainFinance.analyze_investment_trends"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BlockchainFinance.get_latest_articles",
                "args": "{\"topic\": \"blockchain in fintech\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BlockchainFinance.get_investment_report",
                "args": "{\"year\": 2024, \"quarter\": 1}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BlockchainFinance.get_bitcoin_transactions",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BlockchainFinance.get_investment_institutions",
                "args": "{\"projectName\": \"Ethereum\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "BlockchainFinance.analyze_investment_trends",
                "args": "{\"institutionData\": \"Ethereum\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BlockchainFinance.get_latest_articles', {'name': 'BlockchainFinance.get_latest_articles', 'description': 'This function retrieves the latest articles on a specific topic related to blockchain in fintech.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., blockchain in fintech.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of the latest articles on the specified topic.'}]}], ['BlockchainFinance.get_investment_report', {'name': 'BlockchainFinance.get_investment_report', 'description': 'This function retrieves the investment report for a specific quarter and year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year of the report.'}, {'name': 'quarter', 'type': 'NUMBER', 'description': 'The quarter of the report (1, 2, 3, or 4).'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The investment report for the specified quarter and year.'}]}], ['BlockchainFinance.get_bitcoin_transactions', {'name': 'BlockchainFinance.get_bitcoin_transactions', 'description': 'This function retrieves the current real-time Bitcoin transaction data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'transactions', 'description': 'Real-time Bitcoin transaction data.'}]}], ['BlockchainFinance.get_investment_institutions', {'name': 'BlockchainFinance.get_investment_institutions', 'description': 'This function retrieves information about investment institutions related to a specific blockchain project.', 'required_parameters': [{'name': 'projectName', 'type': 'STRING', 'description': 'The name of the blockchain project.'}], 'optional_parameters': [], 'return_data': [{'name': 'institutions', 'description': 'A list of investment institutions related to the project.'}]}], ['BlockchainFinance.analyze_investment_trends', {'name': 'BlockchainFinance.analyze_investment_trends', 'description': 'This function analyzes investment trends based on provided institution data.', 'required_parameters': [{'name': 'institutionData', 'type': 'STRING', 'description': 'The data related to investment institutions.'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'An analysis of investment trends based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BlockchainFinance.get_latest_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BlockchainFinance.get_latest_articles\",\n    \"args\": \"{'topic': 'blockchain in fintech', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解区块链技术在金融领域的应用。首先，获取5篇最新的关于区块链在金融科技中的应用案例文章。然后，获取2024年第一季度全球区块链技术投资报告。接着，获取当前比特币的实时交易数据。最后，通过区块链项目名称获取其相关的投资机构信息，并获取一些投资趋势分析。"
            }
        ]
    },
    "5": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchPaperSearch.find_papers",
                "ReportRetrieval.get_report",
                "FinancialData.get_real_time_data",
                "AIProjectDetails.get_details",
                "TechDevelopment.get_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchPaperSearch.find_papers",
                "args": "{\"topic\": \"AI in banking\", \"year\": 2024}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ReportRetrieval.get_report",
                "args": "{\"bankName\": \"ICBC\", \"date\": \"2024-09-01\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialData.get_real_time_data",
                "args": "{\"bankName\": \"ICBC\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AIProjectDetails.get_details",
                "args": "{\"bankName\": \"ICBC\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TechDevelopment.get_suggestions",
                "args": "{\"bankName\": \"ICBC\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchPaperSearch.find_papers', {'name': 'ResearchPaperSearch.find_papers', 'description': 'This function searches for research papers based on topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research paper, e.g., AI in banking.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of publication.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to three matching research papers, each with a title, authors, and abstract.'}]}], ['ReportRetrieval.get_report', {'name': 'ReportRetrieval.get_report', 'description': 'This function retrieves a specific report given the bank name and date.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the report in YYYY-MM-DD format.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The detailed report content.'}]}], ['FinancialData.get_real_time_data', {'name': 'FinancialData.get_real_time_data', 'description': 'This function retrieves real-time financial data for a specific bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'financialData', 'description': 'Real-time financial data including stock prices, revenue, and profit.'}]}], ['AIProjectDetails.get_details', {'name': 'AIProjectDetails.get_details', 'description': 'This function retrieves detailed information about AI projects of a specific bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'projectDetails', 'description': 'Detailed information about the AI projects, including objectives, technologies used, and outcomes.'}]}], ['TechDevelopment.get_suggestions', {'name': 'TechDevelopment.get_suggestions', 'description': 'This function provides technical development suggestions for AI projects of a specific bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Technical development suggestions for improving AI projects.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchPaperSearch.find_papers` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchPaperSearch.find_papers\",\n    \"args\": \"{'topic': 'AI in banking', 'year': 2024}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估人工智能在银行业的影响。首先，获取3篇关于人工智能在银行业应用的最新研究论文。然后，获取2024年9月1日中国工商银行的人工智能技术应用报告。接着，获取中国工商银行当前的实时财务数据。最后，通过银行名称获取其人工智能项目的详细信息，并获取一些技术发展建议。"
            }
        ]
    },
    "6": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.fetch_reports",
                "MarketAnalysis.get_market_share",
                "MarketAnalysis.get_user_activity",
                "MarketAnalysis.get_competitors",
                "MarketAnalysis.get_strategy_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.fetch_reports",
                "args": "{\"topic\": \"mobile_payment_competition\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketAnalysis.get_market_share",
                "args": "{\"platforms\": [\"Alipay\", \"WeChat Pay\"], \"quarter\": \"Q2 2024\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketAnalysis.get_user_activity",
                "args": "{\"platforms\": [\"Alipay\", \"WeChat Pay\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketAnalysis.get_competitors",
                "args": "{\"platforms\": [\"Alipay\", \"WeChat Pay\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketAnalysis.get_strategy_suggestions",
                "args": "{\"platforms\": [\"Alipay\", \"WeChat Pay\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.fetch_reports', {'name': 'MarketAnalysis.fetch_reports', 'description': 'This function fetches the latest market analysis reports on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the reports, e.g., mobile_payment_competition.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of reports to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of reports matching the topic.'}]}], ['MarketAnalysis.get_market_share', {'name': 'MarketAnalysis.get_market_share', 'description': 'This function retrieves market share data for specified platforms in a given quarter.', 'required_parameters': [{'name': 'platforms', 'type': 'ARRAY', 'description': 'An array of platform names.'}, {'name': 'quarter', 'type': 'STRING', 'description': 'The quarter for which data is requested, e.g., Q2 2024.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_share', 'description': 'Market share data for the specified platforms.'}]}], ['MarketAnalysis.get_user_activity', {'name': 'MarketAnalysis.get_user_activity', 'description': 'This function retrieves real-time user activity data for specified platforms.', 'required_parameters': [{'name': 'platforms', 'type': 'ARRAY', 'description': 'An array of platform names.'}], 'optional_parameters': [], 'return_data': [{'name': 'user_activity', 'description': 'Real-time user activity data for the specified platforms.'}]}], ['MarketAnalysis.get_competitors', {'name': 'MarketAnalysis.get_competitors', 'description': 'This function retrieves information about the main competitors of specified platforms.', 'required_parameters': [{'name': 'platforms', 'type': 'ARRAY', 'description': 'An array of platform names.'}], 'optional_parameters': [], 'return_data': [{'name': 'competitors', 'description': 'Information about the main competitors of the specified platforms.'}]}], ['MarketAnalysis.get_strategy_suggestions', {'name': 'MarketAnalysis.get_strategy_suggestions', 'description': 'This function provides market strategy suggestions for specified platforms.', 'required_parameters': [{'name': 'platforms', 'type': 'ARRAY', 'description': 'An array of platform names.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_suggestions', 'description': 'Market strategy suggestions for the specified platforms.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.fetch_reports` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.fetch_reports\",\n    \"args\": \"{'topic': 'mobile_payment_competition', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析移动支付市场的竞争格局。首先，获取5篇关于移动支付市场竞争的最新分析报告。然后，获取2024年第二季度支付宝和微信支付的市场份额数据。接着，获取支付宝和微信支付的实时用户活跃数据。最后，通过支付平台名称获取其主要竞争对手的信息，并获取一些市场策略建议。"
            }
        ]
    },
    "7": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchArticleSearch.find_articles",
                "ReportRetrieval.get_report",
                "BankDataAccess.get_real_time_data",
                "PartnerInfo.get_partners",
                "Consultancy.get_transformation_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchArticleSearch.find_articles",
                "args": "{\"topic\": \"financial technology impact on banking\", \"date\": \"2024-01-01\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ReportRetrieval.get_report",
                "args": "{\"bankName\": \"China Construction Bank\", \"date\": \"2024-10-01\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BankDataAccess.get_real_time_data",
                "args": "{\"bankName\": \"China Construction Bank\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PartnerInfo.get_partners",
                "args": "{\"bankName\": \"China Construction Bank\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Consultancy.get_transformation_advice",
                "args": "{\"bankName\": \"China Construction Bank\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchArticleSearch.find_articles', {'name': 'ResearchArticleSearch.find_articles', 'description': 'This function searches for research articles based on a specific topic and date.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles, e.g., financial technology impact on banking.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date from which to search for the latest articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching research articles, each with a title, author, and publication date.'}]}], ['ReportRetrieval.get_report', {'name': 'ReportRetrieval.get_report', 'description': 'This function retrieves a specific report based on the bank name and date.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date of the report.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The detailed report including financial technology applications and impact analysis.'}]}], ['BankDataAccess.get_real_time_data', {'name': 'BankDataAccess.get_real_time_data', 'description': 'This function retrieves real-time business data for a specific bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time business data including transactions, balances, and volumes.'}]}], ['PartnerInfo.get_partners', {'name': 'PartnerInfo.get_partners', 'description': 'This function retrieves information about financial technology partners for a specific bank.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'partners', 'description': 'A list of financial technology partners, including names and partnership details.'}]}], ['Consultancy.get_transformation_advice', {'name': 'Consultancy.get_transformation_advice', 'description': 'This function provides business transformation advice for a specific bank based on current financial technology trends.', 'required_parameters': [{'name': 'bankName', 'type': 'STRING', 'description': 'The name of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Strategic advice and recommendations for business transformation.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchArticleSearch.find_articles` 并传入 `topic` 和 `date`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchArticleSearch.find_articles\",\n    \"args\": \"{'topic': 'financial technology impact on banking', 'date': '2024-01-01'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要研究金融科技对传统银行业务的冲击。首先，获取3篇关于金融科技对银行业影响的最新研究文章。然后，获取2024年10月1日中国建设银行的金融科技应用情况报告。接着，获取中国建设银行当前的实时业务数据。最后，通过银行名称获取其金融科技合作伙伴的信息，并获取一些业务转型建议。"
            }
        ]
    },
    "8": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoAnalysis.fetch_articles",
                "CryptoAnalysis.get_market_report",
                "CryptoAnalysis.get_real_time_price",
                "CryptoAnalysis.get_exchange_info",
                "CryptoAnalysis.get_investment_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoAnalysis.fetch_articles",
                "args": "{\"topic\": \"digital_currency_trends\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoAnalysis.get_market_report",
                "args": "{\"year\": 2024, \"quarter\": 3}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoAnalysis.get_real_time_price",
                "args": "{\"currency\": \"Ethereum\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoAnalysis.get_exchange_info",
                "args": "{\"currency\": \"Ethereum\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CryptoAnalysis.get_investment_strategies",
                "args": "{\"currency\": \"Ethereum\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoAnalysis.fetch_articles', {'name': 'CryptoAnalysis.fetch_articles', 'description': 'This function fetches the latest analysis articles on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., digital_currency_trends.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles with titles, authors, and summaries.'}]}], ['CryptoAnalysis.get_market_report', {'name': 'CryptoAnalysis.get_market_report', 'description': 'This function retrieves the market report for a specified quarter and year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year of the report.'}, {'name': 'quarter', 'type': 'NUMBER', 'description': 'The quarter of the report.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The market report with key statistics and trends.'}]}], ['CryptoAnalysis.get_real_time_price', {'name': 'CryptoAnalysis.get_real_time_price', 'description': 'This function retrieves the real-time price of a specified cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': 'The current price of the cryptocurrency.'}]}], ['CryptoAnalysis.get_exchange_info', {'name': 'CryptoAnalysis.get_exchange_info', 'description': 'This function retrieves information about the main exchanges for a specified cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'exchanges', 'description': 'A list of exchanges where the cryptocurrency is traded.'}]}], ['CryptoAnalysis.get_investment_strategies', {'name': 'CryptoAnalysis.get_investment_strategies', 'description': 'This function provides investment strategy advice for a specified cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of recommended investment strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoAnalysis.fetch_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoAnalysis.fetch_articles\",\n    \"args\": \"{'topic': 'digital_currency_trends', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解数字货币的发展趋势。首先，获取5篇关于数字货币发展趋势的最新分析文章。然后，获取2024年第三季度全球数字货币市场报告。接着，获取以太坊的实时价格数据。最后，通过数字货币名称获取其主要交易所的信息，并获取一些投资策略建议。"
            }
        ]
    },
    "9": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.get_report",
                "InsuranceSearch.find_popular_products",
                "InsuranceSearch.get_sales_data",
                "InsuranceSearch.analyze_user_feedback",
                "InsuranceSearch.provide_buying_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.get_report",
                "args": "{\"year\": 2023, \"type\": \"health\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceSearch.find_popular_products",
                "args": "{\"region\": \"USA\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceSearch.get_sales_data",
                "args": "{\"productIds\": [101, 102]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceSearch.analyze_user_feedback",
                "args": "{\"productIds\": [101, 102]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InsuranceSearch.provide_buying_advice",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.get_report', {'name': 'MarketAnalysis.get_report', 'description': 'This function retrieves market analysis reports for a specified year and type of insurance.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year of the report.'}, {'name': 'type', 'type': 'STRING', 'description': 'The type of insurance, e.g., health, auto, home.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The market analysis report for the specified year and type.'}]}], ['InsuranceSearch.find_popular_products', {'name': 'InsuranceSearch.find_popular_products', 'description': 'This function finds the most popular insurance products in a specified region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region where the products are popular.'}], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of the most popular insurance products in the region.'}]}], ['InsuranceSearch.get_sales_data', {'name': 'InsuranceSearch.get_sales_data', 'description': 'This function retrieves sales data for specified insurance products.', 'required_parameters': [{'name': 'productIds', 'type': 'ARRAY', 'description': 'An array of product IDs to retrieve sales data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'salesData', 'description': 'Sales data for the specified products.'}]}], ['InsuranceSearch.analyze_user_feedback', {'name': 'InsuranceSearch.analyze_user_feedback', 'description': 'This function analyzes user feedback and satisfaction for specified insurance products.', 'required_parameters': [{'name': 'productIds', 'type': 'ARRAY', 'description': 'An array of product IDs to analyze feedback for.'}], 'optional_parameters': [], 'return_data': [{'name': 'feedbackAnalysis', 'description': 'Analysis of user feedback and satisfaction for the specified products.'}]}], ['InsuranceSearch.provide_buying_advice', {'name': 'InsuranceSearch.provide_buying_advice', 'description': 'This function provides advice on purchasing insurance based on market trends and user feedback.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Advice on purchasing insurance.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.get_report` 并传入 `year` 和 `type`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.get_report\",\n    \"args\": \"{'year': 2023, 'type': 'health'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解健康保险产品的市场趋势。首先，获取最近一年内关于健康保险的市场分析报告。然后，查询当前市场上最受欢迎的健康保险产品及其销售数据。接着，分析这些产品的用户评价和满意度。最后，提供一些购买健康保险的建议。"
            }
        ]
    },
    "12": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceClaim.get_claim_standards",
                "InsuranceClaim.get_recent_claims",
                "InsuranceClaim.analyze_claims",
                "InsuranceClaim.provide_avoidance_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceClaim.get_claim_standards",
                "args": "{\"insuranceType\": \"auto\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceClaim.get_recent_claims",
                "args": "{\"year\": 2022}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceClaim.analyze_claims",
                "args": "{\"claimIds\": [101, 102, 103]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceClaim.provide_avoidance_tips",
                "args": "{}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceClaim.get_claim_standards', {'name': 'InsuranceClaim.get_claim_standards', 'description': 'This function retrieves the claim standards and process details for a specified insurance type.', 'required_parameters': [{'name': 'insuranceType', 'type': 'STRING', 'description': 'The type of insurance, e.g., auto, health, home.'}], 'optional_parameters': [], 'return_data': [{'name': 'standards', 'description': 'Details of the claim standards and process for the specified insurance type.'}]}], ['InsuranceClaim.get_recent_claims', {'name': 'InsuranceClaim.get_recent_claims', 'description': 'This function retrieves recent claim cases within a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which recent claim cases are to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'claims', 'description': 'A list of recent claim cases with details.'}]}], ['InsuranceClaim.analyze_claims', {'name': 'InsuranceClaim.analyze_claims', 'description': 'This function analyzes specified claim cases to identify common issues and solutions.', 'required_parameters': [{'name': 'claimIds', 'type': 'ARRAY', 'description': 'An array of claim IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected claim cases, highlighting common issues and solutions.'}]}], ['InsuranceClaim.provide_avoidance_tips', {'name': 'InsuranceClaim.provide_avoidance_tips', 'description': 'This function provides tips to avoid claim disputes.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'Tips to avoid common claim disputes.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InsuranceClaim.get_claim_standards` 并传入 `insuranceType`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InsuranceClaim.get_claim_standards\",\n    \"args\": \"{'insuranceType': 'auto'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解车辆保险的理赔流程。首先，获取车辆保险的理赔标准和流程说明。然后，查询最近一年内车辆保险的理赔案例。接着，分析理赔案例中的常见问题和解决方案。最后，提供一些避免理赔纠纷的建议。"
            }
        ]
    },
    "19": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.get_report",
                "MarketAnalysis.popular_products",
                "MarketAnalysis.user_feedback",
                "MarketAnalysis.purchase_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.get_report",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketAnalysis.popular_products",
                "args": "{}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketAnalysis.user_feedback",
                "args": "{\"productIds\": [101, 102]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketAnalysis.purchase_recommendation",
                "args": "{\"feedbackData\": [{\"productId\": 101, \"satisfaction\": 90}, {\"productId\": 102, \"satisfaction\": 85}]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.get_report', {'name': 'MarketAnalysis.get_report', 'description': 'This function retrieves the latest market analysis report for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which the report is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The market analysis report for the specified year.'}]}], ['MarketAnalysis.popular_products', {'name': 'MarketAnalysis.popular_products', 'description': 'This function retrieves the current most popular commercial insurance products.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of the most popular commercial insurance products, including their IDs and sales data.'}]}], ['MarketAnalysis.user_feedback', {'name': 'MarketAnalysis.user_feedback', 'description': 'This function analyzes user feedback and satisfaction for specified products.', 'required_parameters': [{'name': 'productIds', 'type': 'ARRAY', 'description': 'An array of product IDs to analyze feedback for.'}], 'optional_parameters': [], 'return_data': [{'name': 'feedback', 'description': 'Detailed user feedback and satisfaction scores for the specified products.'}]}], ['MarketAnalysis.purchase_recommendation', {'name': 'MarketAnalysis.purchase_recommendation', 'description': 'This function provides recommendations for purchasing commercial insurance based on analyzed feedback data.', 'required_parameters': [{'name': 'feedbackData', 'type': 'ARRAY', 'description': 'An array of feedback data, including product IDs and satisfaction scores.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Purchase recommendations based on the analyzed feedback data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.get_report` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.get_report\",\n    \"args\": \"{'year': 2023}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解商业保险的市场趋势。首先，获取最近一年内关于商业保险的市场分析报告。然后，查询当前市场上最受欢迎的商业保险产品及其销售数据。接着，分析这些产品的用户评价和满意度。最后，提供一些购买商业保险的建议。"
            }
        ]
    },
    "25": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ECBPolicy.get_latest_statement",
                "BondMarket.analyze_impact",
                "InflationData.get_rates",
                "StockMarket.investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ECBPolicy.get_latest_statement",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondMarket.analyze_impact",
                "args": "{\"policyStatement\": \"latest\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InflationData.get_rates",
                "args": "{\"country\": \"Germany\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InflationData.get_rates",
                "args": "{\"country\": \"France\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "StockMarket.investment_advice",
                "args": "{\"region\": \"Eurozone\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ECBPolicy.get_latest_statement', {'name': 'ECBPolicy.get_latest_statement', 'description': 'This function retrieves the latest monetary policy statement from the European Central Bank.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'statement', 'description': 'The latest monetary policy statement.'}]}], ['BondMarket.analyze_impact', {'name': 'BondMarket.analyze_impact', 'description': 'This function analyzes the impact of a given policy statement on the bond markets of major Eurozone countries.', 'required_parameters': [{'name': 'policyStatement', 'type': 'STRING', 'description': 'The policy statement to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'impactAnalysis', 'description': 'An analysis of the impact on bond markets.'}]}], ['InflationData.get_rates', {'name': 'InflationData.get_rates', 'description': 'This function retrieves the inflation rates for a specified Eurozone country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The name of the Eurozone country.'}], 'optional_parameters': [], 'return_data': [{'name': 'inflationRate', 'description': 'The inflation rate for the specified country.'}]}], ['StockMarket.investment_advice', {'name': 'StockMarket.investment_advice', 'description': 'This function provides investment advice for the stock markets in a specified region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region for which to provide investment advice.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified region.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ECBPolicy.get_latest_statement`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ECBPolicy.get_latest_statement\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估欧洲央行货币政策对欧元区国家的影响。首先，获取欧洲央行最新的货币政策声明。然后，分析这些政策对欧元区主要国家的债券市场的影响。接着，获取这些国家的通货膨胀率数据。最后，提供一些关于如何投资欧元区股票市场的建议。"
            }
        ]
    },
    "26": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankPolicy.get_latest_rate_adjustment",
                "StockMarket.analyze_rate_impact",
                "CompanyData.fetch_financials",
                "InvestmentAdvice.recommend_tech_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankPolicy.get_latest_rate_adjustment",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.analyze_rate_impact",
                "args": "{\"rate_adjustment\": \"latest\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CompanyData.fetch_financials",
                "args": "{\"sector\": \"technology\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.recommend_tech_stocks",
                "args": "{\"financial_data\": \"latest\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankPolicy.get_latest_rate_adjustment', {'name': 'BankPolicy.get_latest_rate_adjustment', 'description': 'This function retrieves the latest rate adjustment announcement from the People's Bank of China.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rate_adjustment', 'description': 'The latest rate adjustment details.'}]}], ['StockMarket.analyze_rate_impact', {'name': 'StockMarket.analyze_rate_impact', 'description': 'This function analyzes the impact of rate adjustments on the A-share market.', 'required_parameters': [{'name': 'rate_adjustment', 'type': 'STRING', 'description': 'The latest rate adjustment details.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'An analysis of the impact on the A-share market.'}]}], ['CompanyData.fetch_financials', {'name': 'CompanyData.fetch_financials', 'description': 'This function fetches financial data of major listed companies in China.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of the companies, e.g., technology, manufacturing.'}], 'optional_parameters': [], 'return_data': [{'name': 'financial_data', 'description': 'Financial data of the companies.'}]}], ['InvestmentAdvice.recommend_tech_stocks', {'name': 'InvestmentAdvice.recommend_tech_stocks', 'description': 'This function provides investment advice on Chinese tech stocks.', 'required_parameters': [{'name': 'financial_data', 'type': 'STRING', 'description': 'The latest financial data of tech companies.'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_advice', 'description': 'Recommendations on investing in Chinese tech stocks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankPolicy.get_latest_rate_adjustment` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankPolicy.get_latest_rate_adjustment\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国人民银行的利率政策对中国股市的影响。首先，获取中国人民银行最新的利率调整公告。然后，分析这些调整对A股市场的影响。接着，获取中国主要上市公司的财务数据。最后，提供一些关于如何投资中国科技股的建议。"
            }
        ]
    },
    "27": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankOfEngland.get_latest_policy_decision",
                "RealEstateMarket.analyze_price_impact",
                "Statistics.get_unemployment_rate",
                "InvestmentAdvice.recommend_bonds"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankOfEngland.get_latest_policy_decision",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateMarket.analyze_price_impact",
                "args": "{\"policyDecision\": \"latest\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Statistics.get_unemployment_rate",
                "args": "{\"country\": \"UK\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.recommend_bonds",
                "args": "{\"type\": \"UK\", \"riskLevel\": \"medium\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankOfEngland.get_latest_policy_decision', {'name': 'BankOfEngland.get_latest_policy_decision', 'description': 'This function retrieves the latest monetary policy decision from the Bank of England.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'decision', 'description': 'The latest policy decision including interest rates and quantitative easing measures.'}]}], ['RealEstateMarket.analyze_price_impact', {'name': 'RealEstateMarket.analyze_price_impact', 'description': 'This function analyzes the impact of a given policy decision on the UK housing market prices.', 'required_parameters': [{'name': 'policyDecision', 'type': 'STRING', 'description': 'The policy decision to analyze, typically the latest.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'An analysis of how the policy decision affects housing prices.'}]}], ['Statistics.get_unemployment_rate', {'name': 'Statistics.get_unemployment_rate', 'description': 'This function retrieves the current unemployment rate for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which to retrieve the unemployment rate.'}], 'optional_parameters': [], 'return_data': [{'name': 'rate', 'description': 'The current unemployment rate.'}]}], ['InvestmentAdvice.recommend_bonds', {'name': 'InvestmentAdvice.recommend_bonds', 'description': 'This function provides investment advice on bonds, specifying the type and risk level.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of bonds, e.g., UK, US.'}, {'name': 'riskLevel', 'type': 'STRING', 'description': 'The desired risk level for the investment, e.g., low, medium, high.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment recommendations based on the specified type and risk level.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankOfEngland.get_latest_policy_decision` 并传入空参数，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankOfEngland.get_latest_policy_decision\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解英国央行货币政策对英国房地产市场的影响。首先，获取英国央行最新的货币政策决议。然后，分析这些决议对英国房价的影响。接着，获取英国的失业率数据。最后，提供一些关于如何投资英国债券的建议。"
            }
        ]
    },
    "28": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RBA.get_monetary_policy_statement",
                "RBA.analyze_policy_impact",
                "TradeData.get_trade_data",
                "InvestmentAdvice.recommend_mining_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RBA.get_monetary_policy_statement",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RBA.analyze_policy_impact",
                "args": "{\"policyStatementId\": 0, \"impactArea\": \"exchange_rate\"}"
            },
            {
                "id": 2,
                "prev": [],
                "name": "TradeData.get_trade_data",
                "args": "{\"country\": \"Australia\"}"
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "InvestmentAdvice.recommend_mining_stocks",
                "args": "{\"economicDataId\": [0, 1]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RBA.get_monetary_policy_statement', {'name': 'RBA.get_monetary_policy_statement', 'description': 'This function retrieves the latest monetary policy statement from the Reserve Bank of Australia.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'statement', 'description': 'The latest monetary policy statement.'}]}], ['RBA.analyze_policy_impact', {'name': 'RBA.analyze_policy_impact', 'description': 'This function analyzes the impact of a given monetary policy statement on a specified area, such as exchange rate.', 'required_parameters': [{'name': 'policyStatementId', 'type': 'NUMBER', 'description': 'The ID of the policy statement.'}, {'name': 'impactArea', 'type': 'STRING', 'description': 'The area of impact, e.g., exchange_rate, inflation.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the impact of the policy on the specified area.'}]}], ['TradeData.get_trade_data', {'name': 'TradeData.get_trade_data', 'description': 'This function retrieves trade data for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which trade data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'tradeData', 'description': 'Trade data including exports, imports, and trade balance.'}]}], ['InvestmentAdvice.recommend_mining_stocks', {'name': 'InvestmentAdvice.recommend_mining_stocks', 'description': 'This function provides investment advice on mining stocks based on economic data.', 'required_parameters': [{'name': 'economicDataId', 'type': 'ARRAY', 'description': 'An array of IDs representing economic data to consider.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment recommendations for mining stocks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RBA.get_monetary_policy_statement` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RBA.get_monetary_policy_statement\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估澳大利亚储备银行的货币政策对澳大利亚经济的影响。首先，获取澳大利亚储备银行最新的货币政策声明。然后，分析这些政策对澳元汇率的影响。接着，获取澳大利亚的贸易数据。最后，提供一些关于如何投资澳大利亚矿产股的建议。"
            }
        ]
    },
    "29": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankPolicy.get_latest_report",
                "CurrencyAnalysis.analyze_exchange_rate",
                "EconomicData.get_employment_data",
                "InvestmentAdvice.recommend_energy_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankPolicy.get_latest_report",
                "args": "{\"country\": \"Canada\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CurrencyAnalysis.analyze_exchange_rate",
                "args": "{\"reportId\": 123, \"currency\": \"CAD\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomicData.get_employment_data",
                "args": "{\"country\": \"Canada\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.recommend_energy_stocks",
                "args": "{\"sector\": \"energy\", \"country\": \"Canada\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankPolicy.get_latest_report', {'name': 'BankPolicy.get_latest_report', 'description': 'This function retrieves the latest monetary policy report for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which the report is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The latest monetary policy report.'}]}], ['CurrencyAnalysis.analyze_exchange_rate', {'name': 'CurrencyAnalysis.analyze_exchange_rate', 'description': 'This function analyzes the impact of a monetary policy report on the exchange rate of a specified currency.', 'required_parameters': [{'name': 'reportId', 'type': 'NUMBER', 'description': 'The ID of the report to analyze.'}, {'name': 'currency', 'type': 'STRING', 'description': 'The currency to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'The analysis of the impact on the exchange rate.'}]}], ['EconomicData.get_employment_data', {'name': 'EconomicData.get_employment_data', 'description': 'This function retrieves the latest employment data for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which the data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'employmentData', 'description': 'The latest employment data.'}]}], ['InvestmentAdvice.recommend_energy_stocks', {'name': 'InvestmentAdvice.recommend_energy_stocks', 'description': 'This function provides investment advice for energy stocks in a specified country.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which advice is requested.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country for which the advice is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment recommendations for the specified sector and country.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankPolicy.get_latest_report` 并传入 `country`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankPolicy.get_latest_report\",\n    \"args\": \"{'country': 'Canada'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解加拿大银行的货币政策对加拿大经济的影响。首先，获取加拿大银行最新的货币政策报告。然后，分析这些政策对加元汇率的影响。接着，获取加拿大的就业数据。最后，提供一些关于如何投资加拿大能源股的建议。"
            }
        ]
    },
    "30": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EconomicData.get_policy_statement",
                "EconomicData.analyze_currency_impact",
                "EconomicData.get_gdp_growth",
                "InvestmentAdvice.recommend_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EconomicData.get_policy_statement",
                "args": "{\"institution\": \"Reserve Bank of India\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomicData.analyze_currency_impact",
                "args": "{\"policyStatementId\": 123}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomicData.get_gdp_growth",
                "args": "{\"country\": \"India\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.recommend_stocks",
                "args": "{\"sector\": \"IT\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EconomicData.get_policy_statement', {'name': 'EconomicData.get_policy_statement', 'description': 'This function retrieves the latest policy statement from a specified financial institution.', 'required_parameters': [{'name': 'institution', 'type': 'STRING', 'description': 'The name of the financial institution, e.g., Reserve Bank of India.'}], 'optional_parameters': [], 'return_data': [{'name': 'statement', 'description': 'The latest policy statement from the institution.'}]}], ['EconomicData.analyze_currency_impact', {'name': 'EconomicData.analyze_currency_impact', 'description': 'This function analyzes the impact of a policy statement on the currency exchange rate.', 'required_parameters': [{'name': 'policyStatementId', 'type': 'NUMBER', 'description': 'The ID of the policy statement.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'An analysis of the impact on the currency exchange rate.'}]}], ['EconomicData.get_gdp_growth', {'name': 'EconomicData.get_gdp_growth', 'description': 'This function retrieves the GDP growth rate for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The name of the country.'}], 'optional_parameters': [], 'return_data': [{'name': 'growthRate', 'description': 'The GDP growth rate of the country.'}]}], ['InvestmentAdvice.recommend_stocks', {'name': 'InvestmentAdvice.recommend_stocks', 'description': 'This function provides investment advice for stocks in a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest, e.g., IT, healthcare.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment advice and recommendations for stocks in the sector.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `EconomicData.get_policy_statement` 并传入 `institution`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"EconomicData.get_policy_statement\",\n    \"args\": \"{'institution': 'Reserve Bank of India'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析印度储备银行的货币政策对印度股市的影响。首先，获取印度储备银行最新的货币政策声明。然后，分析这些政策对印度卢比汇率的影响。接着，获取印度的GDP增长率数据。最后，提供一些关于如何投资印度IT股的建议。"
            }
        ]
    },
    "31": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CentralBankSearch.get_policy_report",
                "CurrencyExchange.analyze_currency_impact",
                "EconomicData.get_inflation_rate",
                "InvestmentAdvice.recommend_agriculture_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CentralBankSearch.get_policy_report",
                "args": "{\"country\": \"Brazil\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CurrencyExchange.analyze_currency_impact",
                "args": "{\"currency\": \"BRL\", \"policyReportId\": 123}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomicData.get_inflation_rate",
                "args": "{\"country\": \"Brazil\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.recommend_agriculture_stocks",
                "args": "{\"sector\": \"agriculture\", \"country\": \"Brazil\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CentralBankSearch.get_policy_report', {'name': 'CentralBankSearch.get_policy_report', 'description': 'This function retrieves the latest policy report from a specified central bank.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country whose central bank policy report is to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The latest policy report from the central bank.'}]}], ['CurrencyExchange.analyze_currency_impact', {'name': 'CurrencyExchange.analyze_currency_impact', 'description': 'This function analyzes the impact of central bank policies on a specified currency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The currency code.'}, {'name': 'policyReportId', 'type': 'NUMBER', 'description': 'The ID of the policy report.'}], 'optional_parameters': [], 'return_data': [{'name': 'impactAnalysis', 'description': 'An analysis of the impact of the policies on the currency.'}]}], ['EconomicData.get_inflation_rate', {'name': 'EconomicData.get_inflation_rate', 'description': 'This function retrieves the inflation rate for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country whose inflation rate is to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'inflationRate', 'description': 'The latest inflation rate for the country.'}]}], ['InvestmentAdvice.recommend_agriculture_stocks', {'name': 'InvestmentAdvice.recommend_agriculture_stocks', 'description': 'This function provides investment advice for agriculture stocks in a specified country.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of investment, e.g., agriculture.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country where the investment is to be made.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment recommendations for the specified sector and country.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CentralBankSearch.get_policy_report` 并传入 `country`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CentralBankSearch.get_policy_report\",\n    \"args\": \"{'country': 'Brazil'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解巴西中央银行的货币政策对巴西经济的影响。首先，获取巴西中央银行最新的货币政策报告。然后，分析这些政策对巴西雷亚尔汇率的影响。接着，获取巴西的通胀率数据。最后，提供一些关于如何投资巴西农业股的建议。"
            }
        ]
    },
    "32": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CentralBankSearch.get_policy_statement",
                "CurrencyAnalysis.analyze_exchange_rate",
                "EconomicData.get_export_data",
                "InvestmentAdvice.suggest_energy_stocks"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CentralBankSearch.get_policy_statement",
                "args": "{\"country\": \"Russia\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CurrencyAnalysis.analyze_exchange_rate",
                "args": "{\"currency\": \"RUB\", \"policyStatementId\": 0}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomicData.get_export_data",
                "args": "{\"country\": \"Russia\", \"commodity\": \"oil\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.suggest_energy_stocks",
                "args": "{\"sector\": \"energy\", \"country\": \"Russia\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CentralBankSearch.get_policy_statement', {'name': 'CentralBankSearch.get_policy_statement', 'description': 'This function retrieves the latest monetary policy statement from a central bank given the country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country whose central bank policy statement is to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'policyStatement', 'description': 'The latest monetary policy statement.'}]}], ['CurrencyAnalysis.analyze_exchange_rate', {'name': 'CurrencyAnalysis.analyze_exchange_rate', 'description': 'This function analyzes the impact of a monetary policy statement on the exchange rate of a currency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The currency code.'}, {'name': 'policyStatementId', 'type': 'NUMBER', 'description': 'The ID of the policy statement to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the impact on the exchange rate.'}]}], ['EconomicData.get_export_data', {'name': 'EconomicData.get_export_data', 'description': 'This function retrieves export data for a specific commodity from a country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country of export.'}, {'name': 'commodity', 'type': 'STRING', 'description': 'The commodity exported.'}], 'optional_parameters': [], 'return_data': [{'name': 'exportData', 'description': 'Data on the commodity exports.'}]}], ['InvestmentAdvice.suggest_energy_stocks', {'name': 'InvestmentAdvice.suggest_energy_stocks', 'description': 'This function provides investment advice on energy stocks in a specific country.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of investment, e.g., energy.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country for investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice on selected stocks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CentralBankSearch.get_policy_statement` 并传入 `country`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CentralBankSearch.get_policy_statement\",\n    \"args\": \"{'country': 'Russia'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估俄罗斯中央银行的货币政策对俄罗斯经济的影响。首先，获取俄罗斯中央银行最新的货币政策声明。然后，分析这些政策对卢布汇率的影响。接着，获取俄罗斯的石油出口数据。最后，提供一些关于如何投资俄罗斯能源股的建议。"
            }
        ]
    },
    "33": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.fetch_reports",
                "StockData.get_historical_data",
                "StockData.get_realtime_data",
                "StockData.get_stock_code",
                "RiskAssessment.get_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.fetch_reports",
                "args": "{\"market\": \"real estate\", \"country\": \"China\", \"period\": \"last three months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockData.get_historical_data",
                "args": "{\"company\": \"Vanke\", \"date\": \"2024-07-01\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockData.get_realtime_data",
                "args": "{\"company\": \"Vanke\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockData.get_stock_code",
                "args": "{\"company\": \"Vanke\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RiskAssessment.get_advice",
                "args": "{\"company\": \"Vanke\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.fetch_reports', {'name': 'MarketAnalysis.fetch_reports', 'description': 'This function fetches market analysis reports based on market type, country, and period.', 'required_parameters': [{'name': 'market', 'type': 'STRING', 'description': 'The type of market, e.g., real estate, stocks.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country where the market is located.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which reports are needed, e.g., last three months.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five matching reports.'}]}], ['StockData.get_historical_data', {'name': 'StockData.get_historical_data', 'description': 'This function retrieves historical stock data for a specific company on a given date.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date for which historical data is needed.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including opening, closing, high, and low prices.'}]}], ['StockData.get_realtime_data', {'name': 'StockData.get_realtime_data', 'description': 'This function retrieves real-time stock data for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market cap.'}]}], ['StockData.get_stock_code', {'name': 'StockData.get_stock_code', 'description': 'This function retrieves the stock code for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['RiskAssessment.get_advice', {'name': 'RiskAssessment.get_advice', 'description': 'This function provides risk assessment advice for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Risk assessment advice including potential risks and mitigation strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.fetch_reports` 并传入 `market`, `country`, 和 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.fetch_reports\",\n    \"args\": \"{'market': 'real estate', 'country': 'China', 'period': 'last three months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估中国房地产市场的风险。首先，获取最近三个月内关于中国房地产市场的5篇分析报告。然后，获取2024年7月1日万科集团的股票历史数据。接着，获取万科集团当前的实时股票市场数据。最后，通过公司名称获取万科集团的股票代码，并获取一些风险评估建议。"
            }
        ]
    },
    "34": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchArticleSearch.find_articles",
                "StockMarketData.get_historical_data",
                "StockMarketData.get_realtime_data",
                "StockMarketData.get_stock_code",
                "IndustryAnalysis.get_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchArticleSearch.find_articles",
                "args": "{\"industry\": \"新能源\", \"period\": \"半年内\", \"country\": \"中国\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarketData.get_historical_data",
                "args": "{\"date\": \"2024-06-15\", \"company\": \"比亚迪\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_realtime_data",
                "args": "{\"company\": \"比亚迪\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarketData.get_stock_code",
                "args": "{\"company\": \"比亚迪\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "IndustryAnalysis.get_suggestions",
                "args": "{\"company\": \"比亚迪\", \"industry\": \"新能源\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchArticleSearch.find_articles', {'name': 'ResearchArticleSearch.find_articles', 'description': 'This function searches for research articles based on industry, period, and country.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to search for, e.g., 新能源.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the articles, e.g., 半年内.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country where the industry is located.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with a title, author, and publication date.'}]}], ['StockMarketData.get_historical_data', {'name': 'StockMarketData.get_historical_data', 'description': 'This function retrieves historical stock data for a specific date and company.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve historical data.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including opening price, closing price, and volume.'}]}], ['StockMarketData.get_realtime_data', {'name': 'StockMarketData.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market cap.'}]}], ['StockMarketData.get_stock_code', {'name': 'StockMarketData.get_stock_code', 'description': 'This function retrieves the stock code for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['IndustryAnalysis.get_suggestions', {'name': 'IndustryAnalysis.get_suggestions', 'description': 'This function provides industry analysis suggestions for a specific company and industry.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'industry', 'type': 'STRING', 'description': 'The industry to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Analysis suggestions based on the company and industry.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchArticleSearch.find_articles` 并传入 `industry`, `period`, 和 `country`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchArticleSearch.find_articles\",\n    \"args\": \"{'industry': '新能源', 'period': '半年内', 'country': '中国'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国新能源行业的发展趋势。首先，获取最近半年内关于中国新能源行业的5篇研究文章。然后，获取2024年6月15日比亚迪的股票历史数据。接着，获取比亚迪当前的实时股票市场数据。最后，通过公司名称获取比亚迪的股票代码，并获取一些行业分析建议。"
            }
        ]
    },
    "35": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TechInvestment.get_reports",
                "StockMarket.get_historical_data",
                "StockMarket.get_realtime_data",
                "StockMarket.get_stock_code",
                "InvestmentAdvisor.get_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TechInvestment.get_reports",
                "args": "{\"industry\": \"technology\", \"period\": \"last_year\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.get_historical_data",
                "args": "{\"date\": \"2024-05-20\", \"company\": \"Tencent\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarket.get_realtime_data",
                "args": "{\"company\": \"Tencent\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarket.get_stock_code",
                "args": "{\"company\": \"Tencent\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentAdvisor.get_strategies",
                "args": "{\"company\": \"Tencent\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TechInvestment.get_reports', {'name': 'TechInvestment.get_reports', 'description': 'This function retrieves investment analysis reports for a specified industry over a given period.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry sector, e.g., technology, healthcare.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the reports, e.g., last_year, last_quarter.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five investment analysis reports.'}]}], ['StockMarket.get_historical_data', {'name': 'StockMarket.get_historical_data', 'description': 'This function retrieves historical stock data for a specified date and company.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve historical data.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including opening price, closing price, high, low, and volume.'}]}], ['StockMarket.get_realtime_data', {'name': 'StockMarket.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market cap.'}]}], ['StockMarket.get_stock_code', {'name': 'StockMarket.get_stock_code', 'description': 'This function retrieves the stock code for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['InvestmentAdvisor.get_strategies', {'name': 'InvestmentAdvisor.get_strategies', 'description': 'This function provides investment strategy advice for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of recommended investment strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `TechInvestment.get_reports` 并传入 `industry` 和 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"TechInvestment.get_reports\",\n    \"args\": \"{'industry': 'technology', 'period': 'last_year'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解中国科技行业的投资机会。首先，获取最近一年内关于中国科技行业的5篇投资分析报告。然后，获取2024年5月20日腾讯的股票历史数据。接着，获取腾讯当前的实时股票市场数据。最后，通过公司名称获取腾讯的股票代码，并获取一些投资策略建议。"
            }
        ]
    },
    "37": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialPolicyAnalysis.get_recent_reports",
                "StockMarketData.get_historical_data",
                "StockMarketData.get_real_time_data",
                "StockMarketData.get_stock_code",
                "FinancialPolicyAnalysis.get_analysis_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialPolicyAnalysis.get_recent_reports",
                "args": "{\"industry\": \"finance\", \"duration\": \"6 months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarketData.get_historical_data",
                "args": "{\"date\": \"2024-03-05\", \"company\": \"ICBC\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketData.get_real_time_data",
                "args": "{\"company\": \"ICBC\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarketData.get_stock_code",
                "args": "{\"company\": \"ICBC\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinancialPolicyAnalysis.get_analysis_suggestions",
                "args": "{\"company\": \"ICBC\", \"reports\": [0]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialPolicyAnalysis.get_recent_reports', {'name': 'FinancialPolicyAnalysis.get_recent_reports', 'description': 'This function retrieves recent policy analysis reports for a specified industry within a given duration.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to analyze, e.g., finance, technology.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which reports are needed, e.g., 6 months, 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five recent policy analysis reports.'}]}], ['StockMarketData.get_historical_data', {'name': 'StockMarketData.get_historical_data', 'description': 'This function retrieves historical stock data for a specified date and company.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which historical data is needed.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data for the specified date and company.'}]}], ['StockMarketData.get_real_time_data', {'name': 'StockMarketData.get_real_time_data', 'description': 'This function retrieves real-time stock market data for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock market data for the specified company.'}]}], ['StockMarketData.get_stock_code', {'name': 'StockMarketData.get_stock_code', 'description': 'This function retrieves the stock code for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code for the specified company.'}]}], ['FinancialPolicyAnalysis.get_analysis_suggestions', {'name': 'FinancialPolicyAnalysis.get_analysis_suggestions', 'description': 'This function provides analysis suggestions based on policy reports and company data.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'reports', 'type': 'ARRAY', 'description': 'An array of report IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Analysis suggestions based on the provided reports and company data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialPolicyAnalysis.get_recent_reports` 并传入 `industry` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialPolicyAnalysis.get_recent_reports\",\n    \"args\": \"{'industry': 'finance', 'duration': '6 months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国金融行业的监管政策影响。首先，获取最近半年内关于中国金融行业的5篇政策分析报告。然后，获取2024年3月5日中国工商银行的股票历史数据。接着，获取中国工商银行当前的实时股票市场数据。最后，通过公司名称获取中国工商银行的股票代码，并获取一些政策影响分析建议。"
            }
        ]
    },
    "38": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MedicalResearch.find_articles",
                "StockMarket.get_historical_data",
                "StockMarket.get_realtime_data",
                "StockMarket.get_stock_code",
                "InnovationAnalysis.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MedicalResearch.find_articles",
                "args": "{\"topic\": \"innovation in Chinese healthcare\", \"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.get_historical_data",
                "args": "{\"date\": \"2024-02-20\", \"company\": \"Hengrui Medicine\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarket.get_realtime_data",
                "args": "{\"company\": \"Hengrui Medicine\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarket.get_stock_code",
                "args": "{\"company\": \"Hengrui Medicine\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InnovationAnalysis.provide_suggestions",
                "args": "{\"company\": \"Hengrui Medicine\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MedicalResearch.find_articles', {'name': 'MedicalResearch.find_articles', 'description': 'This function searches for medical research articles based on topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles, e.g., innovation in Chinese healthcare.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of publication.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching research articles, each with a title, author, and abstract.'}]}], ['StockMarket.get_historical_data', {'name': 'StockMarket.get_historical_data', 'description': 'This function retrieves historical stock data for a specific date and company.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve historical data.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including opening price, closing price, and volume.'}]}], ['StockMarket.get_realtime_data', {'name': 'StockMarket.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market cap.'}]}], ['StockMarket.get_stock_code', {'name': 'StockMarket.get_stock_code', 'description': 'This function retrieves the stock code for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['InnovationAnalysis.provide_suggestions', {'name': 'InnovationAnalysis.provide_suggestions', 'description': 'This function provides analysis and suggestions on innovation trends for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Innovation trend analysis and suggestions for the company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MedicalResearch.find_articles` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MedicalResearch.find_articles\",\n    \"args\": \"{'topic': 'innovation in Chinese healthcare', 'year': 2023}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解中国医疗行业的创新趋势。首先，获取最近一年内关于中国医疗行业的5篇创新研究文章。然后，获取2024年2月20日恒瑞医药的股票历史数据。接着，获取恒瑞医药当前的实时股票市场数据。最后，通过公司名称获取恒瑞医药的股票代码，并获取一些创新趋势分析建议。"
            }
        ]
    },
    "39": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.fetch_reports",
                "StockData.get_historical_data",
                "StockData.get_realtime_data",
                "StockData.get_stock_code",
                "MarketOpportunity.evaluate"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.fetch_reports",
                "args": "{\"industry\": \"education\", \"duration\": \"3 months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockData.get_historical_data",
                "args": "{\"company\": \"New Oriental\", \"date\": \"2024-01-15\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockData.get_realtime_data",
                "args": "{\"company\": \"New Oriental\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockData.get_stock_code",
                "args": "{\"company\": \"New Oriental\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketOpportunity.evaluate",
                "args": "{\"stockCode\": \"EDU\", \"analysisReports\": [0]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.fetch_reports', {'name': 'MarketAnalysis.fetch_reports', 'description': 'This function fetches market analysis reports for a specified industry within a given duration.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry for which reports are needed, e.g., education, technology.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration for which reports are needed, e.g., 3 months, 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of market analysis reports.'}]}], ['StockData.get_historical_data', {'name': 'StockData.get_historical_data', 'description': 'This function retrieves historical stock data for a specified company on a given date.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'date', 'type': 'STRING', 'description': 'The specific date for historical data retrieval.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data for the specified date.'}]}], ['StockData.get_realtime_data', {'name': 'StockData.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock market data.'}]}], ['StockData.get_stock_code', {'name': 'StockData.get_stock_code', 'description': 'This function retrieves the stock code for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'stockCode', 'description': 'The stock code of the company.'}]}], ['MarketOpportunity.evaluate', {'name': 'MarketOpportunity.evaluate', 'description': 'This function evaluates market opportunities based on stock code and analysis reports.', 'required_parameters': [{'name': 'stockCode', 'type': 'STRING', 'description': 'The stock code of the company.'}, {'name': 'analysisReports', 'type': 'ARRAY', 'description': 'An array of report IDs for analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of market opportunities based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.fetch_reports` 并传入 `industry` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.fetch_reports\",\n    \"args\": \"{'industry': 'education', 'duration': '3 months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估中国教育行业的市场机会。首先，获取最近三个月内关于中国教育行业的5篇市场分析报告。然后，获取2024年1月15日新东方的股票历史数据。接着，获取新东方当前的实时股票市场数据。最后，通过公司名称获取新东方的股票代码，并获取一些市场机会评估建议。"
            }
        ]
    },
    "40": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EnvironmentalReportSearch.find_reports",
                "StockMarket.get_historical_data",
                "StockMarket.get_realtime_data",
                "StockMarket.get_stock_code",
                "SustainabilityStrategy.get_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EnvironmentalReportSearch.find_reports",
                "args": "{\"industry\": \"environmental\", \"duration\": \"6 months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.get_historical_data",
                "args": "{\"company\": \"中国节能环保集团\", \"date\": \"2023-12-10\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarket.get_realtime_data",
                "args": "{\"company\": \"中国节能环保集团\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarket.get_stock_code",
                "args": "{\"company\": \"中国节能环保集团\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "SustainabilityStrategy.get_suggestions",
                "args": "{\"company\": \"中国节能环保集团\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EnvironmentalReportSearch.find_reports', {'name': 'EnvironmentalReportSearch.find_reports', 'description': 'This function searches for environmental sustainability reports based on industry and duration.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The industry to search for, e.g., environmental.'}, {'name': 'duration', 'type': 'STRING', 'description': 'The duration of the reports, e.g., 6 months.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five matching reports, each with a title, date, and summary.'}]}], ['StockMarket.get_historical_data', {'name': 'StockMarket.get_historical_data', 'description': 'This function retrieves historical stock data for a specific company on a given date.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'date', 'type': 'STRING', 'description': 'The specific date for the historical data.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including open, close, high, low, and volume.'}]}], ['StockMarket.get_realtime_data', {'name': 'StockMarket.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market cap.'}]}], ['StockMarket.get_stock_code', {'name': 'StockMarket.get_stock_code', 'description': 'This function retrieves the stock code for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['SustainabilityStrategy.get_suggestions', {'name': 'SustainabilityStrategy.get_suggestions', 'description': 'This function provides sustainability strategy suggestions for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'A list of sustainability strategy suggestions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `EnvironmentalReportSearch.find_reports` 并传入 `industry` 和 `duration`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"EnvironmentalReportSearch.find_reports\",\n    \"args\": \"{'industry': 'environmental', 'duration': '6 months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国环保行业的可持续发展策略。首先，获取最近半年内关于中国环保行业的5篇可持续发展报告。然后，获取2023年12月10日中国节能环保集团的股票历史数据。接着，获取中国节能环保集团当前的实时股票市场数据。最后，通过公司名称获取中国节能环保集团的股票代码，并获取一些可持续发展策略建议。"
            }
        ]
    },
    "41": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchPaperSearch.find_papers",
                "StockData.get_historical_data",
                "StockData.get_realtime_data",
                "StockData.get_stock_code",
                "Consultancy.get_efficiency_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchPaperSearch.find_papers",
                "args": "{\"topic\": \"logistics efficiency in China\", \"year\": 2022}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockData.get_historical_data",
                "args": "{\"company\": \"SF Holdings\", \"date\": \"2023-11-25\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockData.get_realtime_data",
                "args": "{\"company\": \"SF Holdings\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockData.get_stock_code",
                "args": "{\"company\": \"SF Holdings\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Consultancy.get_efficiency_tips",
                "args": "{\"company\": \"SF Holdings\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchPaperSearch.find_papers', {'name': 'ResearchPaperSearch.find_papers', 'description': 'This function searches for research papers based on a topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research paper.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of publication.'}], 'optional_parameters': [], 'return_data': [{'name': 'papers', 'description': 'A list of up to five matching research papers, each with a title, author, and abstract.'}]}], ['StockData.get_historical_data', {'name': 'StockData.get_historical_data', 'description': 'This function retrieves historical stock data for a specific company on a given date.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'date', 'type': 'STRING', 'description': 'The specific date in YYYY-MM-DD format.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including open, close, high, low prices, and volume.'}]}], ['StockData.get_realtime_data', {'name': 'StockData.get_realtime_data', 'description': 'This function retrieves real-time stock market data for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time stock data including current price, volume, and market status.'}]}], ['StockData.get_stock_code', {'name': 'StockData.get_stock_code', 'description': 'This function retrieves the stock code for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The stock code of the company.'}]}], ['Consultancy.get_efficiency_tips', {'name': 'Consultancy.get_efficiency_tips', 'description': 'This function provides efficiency improvement tips for a specific company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'A list of efficiency improvement suggestions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchPaperSearch.find_papers` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchPaperSearch.find_papers\",\n    \"args\": \"{'topic': 'logistics efficiency in China', 'year': 2022}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解中国物流行业的效率提升方法。首先，获取最近一年内关于中国物流行业的5篇效率提升研究文章。然后，获取2023年11月25日顺丰控股的股票历史数据。接着，获取顺丰控股当前的实时股票市场数据。最后，通过公司名称获取顺丰控股的股票代码，并获取一些效率提升建议。"
            }
        ]
    },
    "42": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankCompliance.fetch_reports",
                "BankCompliance.analyze_reports",
                "BankCompliance.fetch_branch_compliance",
                "BankCompliance.generate_improvement_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankCompliance.fetch_reports",
                "args": "{\"year\": 2022}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BankCompliance.analyze_reports",
                "args": "{\"reportIds\": [101, 102, 103]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BankCompliance.fetch_branch_compliance",
                "args": "{\"branchIds\": [201, 202, 203]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BankCompliance.generate_improvement_plan",
                "args": "{\"analysisResults\": [{\"riskPoint\": \"AML\", \"recommendation\": \"Enhance AML training\"}, {\"riskPoint\": \"Data Privacy\", \"recommendation\": \"Update privacy policies\"}]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankCompliance.fetch_reports', {'name': 'BankCompliance.fetch_reports', 'description': 'This function fetches compliance reports for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which reports are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of compliance reports for the specified year.'}]}], ['BankCompliance.analyze_reports', {'name': 'BankCompliance.analyze_reports', 'description': 'This function analyzes specified compliance reports to identify key risk points.', 'required_parameters': [{'name': 'reportIds', 'type': 'ARRAY', 'description': 'An array of report IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the specified reports, highlighting key risk points.'}]}], ['BankCompliance.fetch_branch_compliance', {'name': 'BankCompliance.fetch_branch_compliance', 'description': 'This function retrieves compliance status for specified bank branches.', 'required_parameters': [{'name': 'branchIds', 'type': 'ARRAY', 'description': 'An array of branch IDs to check for compliance.'}], 'optional_parameters': [], 'return_data': [{'name': 'complianceStatus', 'description': 'The compliance status of the specified branches.'}]}], ['BankCompliance.generate_improvement_plan', {'name': 'BankCompliance.generate_improvement_plan', 'description': 'This function generates a plan to improve compliance based on analysis results.', 'required_parameters': [{'name': 'analysisResults', 'type': 'ARRAY', 'description': 'An array of analysis results with risk points and recommendations.'}], 'optional_parameters': [], 'return_data': [{'name': 'improvementPlan', 'description': 'A detailed plan to improve compliance processes.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankCompliance.fetch_reports` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankCompliance.fetch_reports\",\n    \"args\": \"{'year': 2022}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家国际银行的合规风险。首先，获取该银行在过去一年内的所有合规报告。然后，分析这些报告中提到的主要风险点。接着，获取该银行在不同国家的分支机构的法律合规情况。最后，提供一份关于如何改进合规流程的建议报告。"
            }
        ]
    },
    "43": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoLawSearch.find_articles",
                "CryptoLawSearch.analyze_cases",
                "CryptoLawSearch.get_country_policies",
                "CryptoLawSearch.risk_assessment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoLawSearch.find_articles",
                "args": "{\"topic\": \"digital_currency\", \"date\": \"2023-01\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoLawSearch.analyze_cases",
                "args": "{\"articleIds\": [1, 2, 3]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoLawSearch.get_country_policies",
                "args": "{\"countries\": [\"USA\", \"EU\", \"China\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoLawSearch.risk_assessment",
                "args": "{\"policyData\": [{\"country\": \"USA\", \"policy\": \"regulation\"}, {\"country\": \"EU\", \"policy\": \"ban\"}, {\"country\": \"China\", \"policy\": \"strict_regulation\"}]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoLawSearch.find_articles', {'name': 'CryptoLawSearch.find_articles', 'description': 'This function searches for legal articles and cases related to digital currency based on topic and date.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the legal articles, e.g., digital_currency.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date range or specific date of the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with an ID, title, and source.'}]}], ['CryptoLawSearch.analyze_cases', {'name': 'CryptoLawSearch.analyze_cases', 'description': 'This function analyzes legal cases and articles based on their IDs.', 'required_parameters': [{'name': 'articleIds', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected articles, highlighting key legal issues.'}]}], ['CryptoLawSearch.get_country_policies', {'name': 'CryptoLawSearch.get_country_policies', 'description': 'This function retrieves legal policies and attitudes towards digital currency from different countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country codes to retrieve policies for.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of policies for the selected countries, including legal stance and regulations.'}]}], ['CryptoLawSearch.risk_assessment', {'name': 'CryptoLawSearch.risk_assessment', 'description': 'This function provides a risk assessment report based on collected policy data.', 'required_parameters': [{'name': 'policyData', 'type': 'ARRAY', 'description': 'An array of policy data, each including country and policy details.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A comprehensive risk assessment report, detailing legal risks and recommendations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoLawSearch.find_articles` 并传入 `topic` 和 `date`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoLawSearch.find_articles\",\n    \"args\": \"{'topic': 'digital_currency', 'date': '2023-01'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解数字货币的法律框架。首先，获取关于数字货币的最新法律文章和案例。然后，分析这些文章和案例中提到的主要法律问题。接着，获取不同国家对数字货币的法律态度和政策。最后，提供一份关于数字货币法律风险的评估报告。"
            }
        ]
    },
    "44": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialMonitor.get_market_activities",
                "FinancialMonitor.analyze_compliance",
                "FinancialMonitor.get_regulatory_assessment",
                "FinancialMonitor.generate_improvement_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialMonitor.get_market_activities",
                "args": "{\"institutionId\": \"ABC123\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialMonitor.analyze_compliance",
                "args": "{\"activities\": [{\"id\": \"act1\", \"type\": \"trading\", \"details\": \"...\"}, {\"id\": \"act2\", \"type\": \"investment\", \"details\": \"...\"}]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialMonitor.get_regulatory_assessment",
                "args": "{\"institutionId\": \"ABC123\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialMonitor.generate_improvement_report",
                "args": "{\"complianceIssues\": [{\"id\": \"issue1\", \"description\": \"...\"}], \"assessment\": {\"id\": \"ass1\", \"details\": \"...\"}}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialMonitor.get_market_activities', {'name': 'FinancialMonitor.get_market_activities', 'description': 'This function retrieves recent market activities of a specified financial institution.', 'required_parameters': [{'name': 'institutionId', 'type': 'STRING', 'description': 'The ID of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'activities', 'description': 'A list of recent market activities, each with an ID, type, and details.'}]}], ['FinancialMonitor.analyze_compliance', {'name': 'FinancialMonitor.analyze_compliance', 'description': 'This function analyzes the compliance of given market activities.', 'required_parameters': [{'name': 'activities', 'type': 'ARRAY', 'description': 'An array of market activities to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'complianceIssues', 'description': 'A list of potential compliance issues found in the activities.'}]}], ['FinancialMonitor.get_regulatory_assessment', {'name': 'FinancialMonitor.get_regulatory_assessment', 'description': 'This function retrieves the latest regulatory assessment report for a specified financial institution.', 'required_parameters': [{'name': 'institutionId', 'type': 'STRING', 'description': 'The ID of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'assessment', 'description': 'The latest regulatory assessment report.'}]}], ['FinancialMonitor.generate_improvement_report', {'name': 'FinancialMonitor.generate_improvement_report', 'description': 'This function generates a report with recommendations for improving market behavior based on identified compliance issues and regulatory assessment.', 'required_parameters': [{'name': 'complianceIssues', 'type': 'ARRAY', 'description': 'An array of identified compliance issues.'}, {'name': 'assessment', 'type': 'OBJECT', 'description': 'The latest regulatory assessment report.'}], 'optional_parameters': [], 'return_data': [{'name': 'improvementReport', 'description': 'A report with recommendations for improving market behavior.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialMonitor.get_market_activities` 并传入 `institutionId`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialMonitor.get_market_activities\",\n    \"args\": \"{'institutionId': 'ABC123'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要监控一家金融机构的市场行为是否合规。首先，获取该机构最近的市场活动记录。然后，分析这些活动中是否存在潜在的合规问题。接着，获取监管机构对该机构的最新评估报告。最后，提供一份关于如何改进市场行为的建议报告。"
            }
        ]
    },
    "45": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InvestmentRisk.get_risk_report",
                "InvestmentRisk.analyze_risk_points",
                "InvestmentRisk.get_portfolio_data",
                "InvestmentRisk.optimize_risk_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InvestmentRisk.get_risk_report",
                "args": "{\"companyId\": 789}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestmentRisk.analyze_risk_points",
                "args": "{\"reportId\": 456}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentRisk.get_portfolio_data",
                "args": "{\"companyId\": 789}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentRisk.optimize_risk_strategy",
                "args": "{\"dataId\": 101}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InvestmentRisk.get_risk_report', {'name': 'InvestmentRisk.get_risk_report', 'description': 'This function retrieves the latest risk management report for a specified investment company.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the investment company.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The latest risk management report for the company.'}]}], ['InvestmentRisk.analyze_risk_points', {'name': 'InvestmentRisk.analyze_risk_points', 'description': 'This function analyzes the main risk points and strategies mentioned in a risk management report.', 'required_parameters': [{'name': 'reportId', 'type': 'NUMBER', 'description': 'The ID of the risk management report.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the main risk points and strategies.'}]}], ['InvestmentRisk.get_portfolio_data', {'name': 'InvestmentRisk.get_portfolio_data', 'description': 'This function retrieves the investment portfolio data for a specified company.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the investment company.'}], 'optional_parameters': [], 'return_data': [{'name': 'portfolio', 'description': 'The investment portfolio data for the company.'}]}], ['InvestmentRisk.optimize_risk_strategy', {'name': 'InvestmentRisk.optimize_risk_strategy', 'description': 'This function provides recommendations for optimizing the risk management strategy based on the analysis and portfolio data.', 'required_parameters': [{'name': 'dataId', 'type': 'NUMBER', 'description': 'The ID of the data used for optimization.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Recommendations for optimizing the risk management strategy.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InvestmentRisk.get_risk_report` 并传入 `companyId`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InvestmentRisk.get_risk_report\",\n    \"args\": \"{'companyId': 789}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家投资公司的风险管理策略。首先，获取该公司最近的风险管理报告。然后，分析报告中提到的主要风险点和应对策略。接着，获取该公司的投资组合数据。最后，提供一份关于如何优化风险管理策略的建议报告。"
            }
        ]
    },
    "46": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LegalResearch.find_articles",
                "LegalResearch.analyze_articles",
                "LegalResearch.get_country_policies",
                "LegalResearch.compile_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LegalResearch.find_articles",
                "args": "{\"topic\": \"fintech\", \"date\": \"2023\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "LegalResearch.analyze_articles",
                "args": "{\"articleIds\": [101, 102, 103]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "LegalResearch.get_country_policies",
                "args": "{\"countries\": [\"USA\", \"EU\", \"China\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LegalResearch.compile_report",
                "args": "{\"analysisId\": 200, \"policyIds\": [301, 302, 303]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LegalResearch.find_articles', {'name': 'LegalResearch.find_articles', 'description': 'This function searches for legal articles on a specific topic and date.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., fintech, healthcare.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date range or year of the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with an ID and title.'}]}], ['LegalResearch.analyze_articles', {'name': 'LegalResearch.analyze_articles', 'description': 'This function analyzes legal articles based on their IDs.', 'required_parameters': [{'name': 'articleIds', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected articles, highlighting key legal issues.'}]}], ['LegalResearch.get_country_policies', {'name': 'LegalResearch.get_country_policies', 'description': 'This function retrieves legal policies and attitudes towards a topic in different countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country codes to retrieve policies for.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of policies and attitudes, each with a country code and summary.'}]}], ['LegalResearch.compile_report', {'name': 'LegalResearch.compile_report', 'description': 'This function compiles a report based on an analysis ID and policy IDs.', 'required_parameters': [{'name': 'analysisId', 'type': 'NUMBER', 'description': 'The ID of the analysis to include in the report.'}, {'name': 'policyIds', 'type': 'ARRAY', 'description': 'An array of policy IDs to include in the report.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A comprehensive report on the legal challenges, including analysis and country policies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `LegalResearch.find_articles` 并传入 `topic` 和 `date`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"LegalResearch.find_articles\",\n    \"args\": \"{'topic': 'fintech', 'date': '2023'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融科技的法律合规挑战。首先，获取关于金融科技的最新法律文章和案例。然后，分析这些文章和案例中提到的主要法律问题。接着，获取不同国家对金融科技的法律态度和政策。最后，提供一份关于金融科技法律合规挑战的评估报告。"
            }
        ]
    },
    "47": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ComplianceReport.get_reports",
                "ComplianceReport.analyze_reports",
                "InsuranceData.get_products",
                "ComplianceImprovement.suggest_improvements"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ComplianceReport.get_reports",
                "args": "{\"year\": 2022}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ComplianceReport.analyze_reports",
                "args": "{\"reportIds\": [101, 102, 103]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceData.get_products",
                "args": "{\"companyId\": 456}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ComplianceImprovement.suggest_improvements",
                "args": "{\"analysisData\": {\"riskPoints\": [\"data_security\", \"regulatory_compliance\"], \"productData\": [\"health_insurance\", \"life_insurance\"]}}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ComplianceReport.get_reports', {'name': 'ComplianceReport.get_reports', 'description': 'This function retrieves compliance reports for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which reports are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of compliance reports for the specified year.'}]}], ['ComplianceReport.analyze_reports', {'name': 'ComplianceReport.analyze_reports', 'description': 'This function analyzes compliance reports based on their IDs.', 'required_parameters': [{'name': 'reportIds', 'type': 'ARRAY', 'description': 'An array of report IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected reports, highlighting major risk points.'}]}], ['InsuranceData.get_products', {'name': 'InsuranceData.get_products', 'description': 'This function retrieves insurance product data for a specific company.', 'required_parameters': [{'name': 'companyId', 'type': 'NUMBER', 'description': 'The ID of the insurance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of insurance products offered by the company.'}]}], ['ComplianceImprovement.suggest_improvements', {'name': 'ComplianceImprovement.suggest_improvements', 'description': 'This function suggests improvements for compliance processes based on analysis data.', 'required_parameters': [{'name': 'analysisData', 'type': 'OBJECT', 'description': 'An object containing risk points and product data.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Suggestions for improving compliance processes.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ComplianceReport.get_reports` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ComplianceReport.get_reports\",\n    \"args\": \"{'year': 2022}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家保险公司的合规风险。首先，获取该公司在过去一年内的所有合规报告。然后，分析这些报告中提到的主要风险点。接着，获取该公司的保险产品数据。最后，提供一份关于如何改进合规流程的建议报告。"
            }
        ]
    },
    "48": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LegalResearch.find_articles",
                "LegalResearch.analyze_cases",
                "LegalResearch.get_country_policies",
                "LegalResearch.risk_assessment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LegalResearch.find_articles",
                "args": "{\"topic\": \"financial derivatives\", \"date\": \"latest\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "LegalResearch.analyze_cases",
                "args": "{\"articleIds\": [1, 2, 3]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "LegalResearch.get_country_policies",
                "args": "{\"countries\": [\"USA\", \"EU\", \"China\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LegalResearch.risk_assessment",
                "args": "{\"data\": {\"articles\": [1, 2, 3], \"policies\": [\"USA\", \"EU\", \"China\"]}}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LegalResearch.find_articles', {'name': 'LegalResearch.find_articles', 'description': 'This function searches for legal articles based on topic and date.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the legal article, e.g., financial derivatives.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date or date range of the articles, e.g., latest, 2023.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching articles, each with an ID and title.'}]}], ['LegalResearch.analyze_cases', {'name': 'LegalResearch.analyze_cases', 'description': 'This function analyzes legal cases based on article IDs.', 'required_parameters': [{'name': 'articleIds', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the selected articles, highlighting main legal issues.'}]}], ['LegalResearch.get_country_policies', {'name': 'LegalResearch.get_country_policies', 'description': 'This function retrieves legal policies and attitudes of different countries towards a specific topic.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country codes to retrieve policies for.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of policies and attitudes for the selected countries.'}]}], ['LegalResearch.risk_assessment', {'name': 'LegalResearch.risk_assessment', 'description': 'This function provides a risk assessment report based on collected data.', 'required_parameters': [{'name': 'data', 'type': 'OBJECT', 'description': 'An object containing article IDs and country policies.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed risk assessment report.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `LegalResearch.find_articles` 并传入 `topic` 和 `date`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"LegalResearch.find_articles\",\n    \"args\": \"{'topic': 'financial derivatives', 'date': 'latest'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融衍生品的法律框架。首先，获取关于金融衍生品的最新法律文章和案例。然后，分析这些文章和案例中提到的主要法律问题。接着，获取不同国家对金融衍生品的法律态度和政策。最后，提供一份关于金融衍生品法律风险的评估报告。"
            }
        ]
    },
    "49": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AMLCompliance.get_latest_report",
                "AMLCompliance.analyze_risk_points",
                "AMLCompliance.get_regulatory_assessment",
                "AMLCompliance.suggest_improvements"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AMLCompliance.get_latest_report",
                "args": "{\"institution_id\": \"12345\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AMLCompliance.analyze_risk_points",
                "args": "{\"report_id\": \"54321\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AMLCompliance.get_regulatory_assessment",
                "args": "{\"institution_id\": \"12345\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AMLCompliance.suggest_improvements",
                "args": "{\"analysis_id\": \"98765\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AMLCompliance.get_latest_report', {'name': 'AMLCompliance.get_latest_report', 'description': 'This function retrieves the latest anti-money laundering report for a specified financial institution.', 'required_parameters': [{'name': 'institution_id', 'type': 'STRING', 'description': 'The ID of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The latest AML report, including details on compliance and identified risks.'}]}], ['AMLCompliance.analyze_risk_points', {'name': 'AMLCompliance.analyze_risk_points', 'description': 'This function analyzes the main risk points mentioned in a given AML report.', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': 'The ID of the AML report.'}], 'optional_parameters': [], 'return_data': [{'name': 'risk_points', 'description': 'A list of identified risk points and their descriptions.'}]}], ['AMLCompliance.get_regulatory_assessment', {'name': 'AMLCompliance.get_regulatory_assessment', 'description': 'This function retrieves the latest regulatory assessment report for a specified financial institution.', 'required_parameters': [{'name': 'institution_id', 'type': 'STRING', 'description': 'The ID of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'assessment', 'description': 'The latest regulatory assessment, including compliance ratings and recommendations.'}]}], ['AMLCompliance.suggest_improvements', {'name': 'AMLCompliance.suggest_improvements', 'description': 'This function provides suggestions for improving the AML compliance process based on an analysis.', 'required_parameters': [{'name': 'analysis_id', 'type': 'STRING', 'description': 'The ID of the analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'improvements', 'description': 'A list of suggested improvements for the AML compliance process.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `AMLCompliance.get_latest_report` 并传入 `institution_id`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"AMLCompliance.get_latest_report\",\n    \"args\": \"{'institution_id': '12345'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要监控一家金融机构的反洗钱合规情况。首先，获取该机构最近的反洗钱报告。然后，分析报告中提到的主要风险点。接着，获取监管机构对该机构的最新评估报告。最后，提供一份关于如何改进反洗钱流程的建议报告。"
            }
        ]
    },
    "50": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankRiskAssessment.get_credit_risk_report",
                "BankRiskAssessment.analyze_risk_points",
                "BankRiskAssessment.get_loan_data",
                "BankRiskAssessment.optimize_risk_management"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankRiskAssessment.get_credit_risk_report",
                "args": "{\"bankId\": \"BANK123\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BankRiskAssessment.analyze_risk_points",
                "args": "{\"reportId\": \"REPORT456\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BankRiskAssessment.get_loan_data",
                "args": "{\"bankId\": \"BANK123\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BankRiskAssessment.optimize_risk_management",
                "args": "{\"analysisId\": \"ANALYSIS789\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankRiskAssessment.get_credit_risk_report', {'name': 'BankRiskAssessment.get_credit_risk_report', 'description': 'This function retrieves the latest credit risk report for a specified bank.', 'required_parameters': [{'name': 'bankId', 'type': 'STRING', 'description': 'The ID of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The latest credit risk report for the bank.'}]}], ['BankRiskAssessment.analyze_risk_points', {'name': 'BankRiskAssessment.analyze_risk_points', 'description': 'This function analyzes the main risk points and strategies mentioned in a credit risk report.', 'required_parameters': [{'name': 'reportId', 'type': 'STRING', 'description': 'The ID of the credit risk report.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis of the main risk points and strategies.'}]}], ['BankRiskAssessment.get_loan_data', {'name': 'BankRiskAssessment.get_loan_data', 'description': 'This function retrieves loan data for a specified bank.', 'required_parameters': [{'name': 'bankId', 'type': 'STRING', 'description': 'The ID of the bank.'}], 'optional_parameters': [], 'return_data': [{'name': 'loanData', 'description': 'Loan data for the bank.'}]}], ['BankRiskAssessment.optimize_risk_management', {'name': 'BankRiskAssessment.optimize_risk_management', 'description': 'This function provides recommendations for optimizing credit risk management strategies.', 'required_parameters': [{'name': 'analysisId', 'type': 'STRING', 'description': 'The ID of the risk analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Recommendations for optimizing risk management strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BankRiskAssessment.get_credit_risk_report` 并传入 `bankId`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BankRiskAssessment.get_credit_risk_report\",\n    \"args\": \"{'bankId': 'BANK123'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估一家银行的信用风险管理。首先，获取该银行最近的信用风险报告。然后，分析报告中提到的主要风险点和应对策略。接着，获取该银行的贷款数据。最后，提供一份关于如何优化信用风险管理策略的建议报告。"
            }
        ]
    },
    "51": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialRegulation.get_latest_articles",
                "FinancialRegulation.analyze_articles",
                "FinancialRegulation.get_country_policies",
                "FinancialRegulation.generate_trend_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialRegulation.get_latest_articles",
                "args": "{\"topic\": \"financial_regulation\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialRegulation.analyze_articles",
                "args": "{\"articleIds\": [101, 102, 103]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialRegulation.get_country_policies",
                "args": "{\"countries\": [\"USA\", \"EU\", \"China\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialRegulation.generate_trend_report",
                "args": "{\"analysisData\": {\"articles\": [101, 102, 103], \"policies\": [\"USA\", \"EU\", \"China\"]}}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialRegulation.get_latest_articles', {'name': 'FinancialRegulation.get_latest_articles', 'description': 'This function retrieves the latest articles and cases on financial regulation.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., financial_regulation.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three latest articles and cases on the specified topic.'}]}], ['FinancialRegulation.analyze_articles', {'name': 'FinancialRegulation.analyze_articles', 'description': 'This function analyzes the main regulatory issues mentioned in the articles and cases.', 'required_parameters': [{'name': 'articleIds', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'A summary of the main regulatory issues found in the articles.'}]}], ['FinancialRegulation.get_country_policies', {'name': 'FinancialRegulation.get_country_policies', 'description': 'This function retrieves regulatory policies and regulations from different countries.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country codes to retrieve policies from.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'A list of regulatory policies and regulations from the specified countries.'}]}], ['FinancialRegulation.generate_trend_report', {'name': 'FinancialRegulation.generate_trend_report', 'description': 'This function generates a report on the trends in financial regulation based on the analysis and policies.', 'required_parameters': [{'name': 'analysisData', 'type': 'OBJECT', 'description': 'An object containing the analysis results and country policies.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A comprehensive report on the trends in financial regulation.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialRegulation.get_latest_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialRegulation.get_latest_articles\",\n    \"args\": \"{'topic': 'financial_regulation'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融监管的最新动态。首先，获取关于金融监管的最新文章和案例。然后，分析这些文章和案例中提到的主要监管问题。接着，获取不同国家的监管政策和法规。最后，提供一份关于金融监管趋势的评估报告。"
            }
        ]
    },
    "52": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoNews.fetch_news",
                "CryptoPrice.get_historical_data",
                "CryptoPrice.get_current_price",
                "CryptoAnalysis.predict_trend"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoNews.fetch_news",
                "args": "{\"currency\": \"Bitcoin\", \"period\": \"week\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoNews.fetch_news",
                "args": "{\"currency\": \"Ethereum\", \"period\": \"week\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoPrice.get_historical_data",
                "args": "{\"currency\": \"Bitcoin\", \"period\": \"month\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoPrice.get_historical_data",
                "args": "{\"currency\": \"Ethereum\", \"period\": \"month\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CryptoPrice.get_current_price",
                "args": "{\"currency\": \"Bitcoin\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "CryptoPrice.get_current_price",
                "args": "{\"currency\": \"Ethereum\"}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "CryptoAnalysis.predict_trend",
                "args": "{\"currency\": \"Bitcoin\", \"period\": \"week\"}"
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "CryptoAnalysis.predict_trend",
                "args": "{\"currency\": \"Ethereum\", \"period\": \"week\"}"
            },
            {
                "id": 8,
                "prev": [
                    7
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoNews.fetch_news', {'name': 'CryptoNews.fetch_news', 'description': 'This function fetches news articles about a specific cryptocurrency for a given period.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin, Ethereum.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the news, e.g., week, month.'}], 'optional_parameters': [], 'return_data': [{'name': 'news', 'description': 'A list of news articles related to the specified cryptocurrency.'}]}], ['CryptoPrice.get_historical_data', {'name': 'CryptoPrice.get_historical_data', 'description': 'This function retrieves historical price data for a specific cryptocurrency over a specified period.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin, Ethereum.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the data, e.g., week, month.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Historical price data for the specified cryptocurrency.'}]}], ['CryptoPrice.get_current_price', {'name': 'CryptoPrice.get_current_price', 'description': 'This function retrieves the current market price of a specific cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin, Ethereum.'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': 'The current market price of the specified cryptocurrency.'}]}], ['CryptoAnalysis.predict_trend', {'name': 'CryptoAnalysis.predict_trend', 'description': 'This function analyzes historical data to predict future market trends for a specific cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin, Ethereum.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the prediction, e.g., week, month.'}], 'optional_parameters': [], 'return_data': [{'name': 'trend', 'description': 'Predicted market trend for the specified cryptocurrency.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoNews.fetch_news` 并传入 `currency` 和 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoNews.fetch_news\",\n    \"args\": \"{'currency': 'Bitcoin', 'period': 'week'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解加密货币市场的最新动态。首先，获取最近一周内关于比特币和以太坊的5篇新闻报道。然后，获取比特币和以太坊在过去一个月的价格历史数据。接着，获取这两种加密货币的当前市场价格。最后，分析这些数据以预测未来一周的市场趋势。"
            }
        ]
    },
    "53": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_financial_statements",
                "FinancialData.get_fund_returns",
                "FinancialData.get_market_cap_and_price",
                "FinancialData.analyze_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_financial_statements",
                "args": "{\"company_id\": \"ABC123\", \"years\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialData.get_fund_returns",
                "args": "{\"company_id\": \"ABC123\", \"years\": 5}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialData.get_market_cap_and_price",
                "args": "{\"company_id\": \"ABC123\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialData.analyze_investment",
                "args": "{\"company_id\": \"ABC123\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialData.get_financial_statements', {'name': 'FinancialData.get_financial_statements', 'description': 'This function retrieves financial statements of a company for a specified number of years.', 'required_parameters': [{'name': 'company_id', 'type': 'STRING', 'description': 'The ID of the company.'}, {'name': 'years', 'type': 'NUMBER', 'description': 'The number of years of financial statements to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'statements', 'description': 'A list of financial statements for the specified years.'}]}], ['FinancialData.get_fund_returns', {'name': 'FinancialData.get_fund_returns', 'description': 'This function retrieves the return rates of funds managed by a company for a specified number of years.', 'required_parameters': [{'name': 'company_id', 'type': 'STRING', 'description': 'The ID of the company.'}, {'name': 'years', 'type': 'NUMBER', 'description': 'The number of years of fund returns to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'A list of fund return rates for the specified years.'}]}], ['FinancialData.get_market_cap_and_price', {'name': 'FinancialData.get_market_cap_and_price', 'description': 'This function retrieves the current market capitalization and stock price of a company.', 'required_parameters': [{'name': 'company_id', 'type': 'STRING', 'description': 'The ID of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_cap', 'description': 'The current market capitalization of the company.'}, {'name': 'stock_price', 'description': 'The current stock price of the company.'}]}], ['FinancialData.analyze_investment', {'name': 'FinancialData.analyze_investment', 'description': 'This function analyzes the investment potential of a company based on its financial data.', 'required_parameters': [{'name': 'company_id', 'type': 'STRING', 'description': 'The ID of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis report suggesting the investment potential of the company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialData.get_financial_statements` 并传入 `company_id` 和 `years`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialData.get_financial_statements\",\n    \"args\": \"{'company_id': 'ABC123', 'years': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估某家投资公司的表现。首先，获取该公司过去三年的财务报表。然后，获取该公司管理的基金在过去五年的收益率数据。接着，获取该公司当前的市值和股价。最后，通过这些数据给出投资该公司的建议。"
            }
        ]
    },
    "54": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketAnalysis.fetch_reports",
                "MarketAnalysis.get_economic_data",
                "MarketAnalysis.get_stock_index_history",
                "MarketAnalysis.evaluate_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketAnalysis.fetch_reports",
                "args": "{\"period\": \"last_three_months\", \"market\": \"emerging\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketAnalysis.get_economic_data",
                "args": "{\"countries\": [\"Brazil\", \"India\"], \"data_types\": [\"GDP_growth\", \"inflation_rate\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketAnalysis.get_stock_index_history",
                "args": "{\"indices\": [\"Bovespa\", \"Sensex\"], \"period\": \"last_five_years\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketAnalysis.evaluate_investment",
                "args": "{\"data\": [\"reports\", \"economic_data\", \"stock_index_history\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketAnalysis.fetch_reports', {'name': 'MarketAnalysis.fetch_reports', 'description': 'This function fetches market analysis reports based on the specified period and market type.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for the reports, e.g., last_three_months.'}, {'name': 'market', 'type': 'STRING', 'description': 'The type of market, e.g., emerging, developed.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five matching market analysis reports.'}]}], ['MarketAnalysis.get_economic_data', {'name': 'MarketAnalysis.get_economic_data', 'description': 'This function retrieves economic data for specified countries and data types.', 'required_parameters': [{'name': 'countries', 'type': 'ARRAY', 'description': 'An array of country names.'}, {'name': 'data_types', 'type': 'ARRAY', 'description': 'An array of data types, e.g., GDP_growth, inflation_rate.'}], 'optional_parameters': [], 'return_data': [{'name': 'economic_data', 'description': 'Detailed economic data for the specified countries and data types.'}]}], ['MarketAnalysis.get_stock_index_history', {'name': 'MarketAnalysis.get_stock_index_history', 'description': 'This function retrieves historical performance data for specified stock indices.', 'required_parameters': [{'name': 'indices', 'type': 'ARRAY', 'description': 'An array of stock index names.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the historical data, e.g., last_five_years.'}], 'optional_parameters': [], 'return_data': [{'name': 'stock_index_history', 'description': 'Historical performance data for the specified stock indices.'}]}], ['MarketAnalysis.evaluate_investment', {'name': 'MarketAnalysis.evaluate_investment', 'description': 'This function evaluates investment opportunities based on provided data.', 'required_parameters': [{'name': 'data', 'type': 'ARRAY', 'description': 'An array of data types used for evaluation, e.g., reports, economic_data, stock_index_history.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of investment risks and returns based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketAnalysis.fetch_reports` 并传入 `period` 和 `market`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketAnalysis.fetch_reports\",\n    \"args\": \"{'period': 'last_three_months', 'market': 'emerging'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析新兴市场的投资机会。首先，获取最近三个月内关于新兴市场的5篇分析报告。然后，获取几个主要新兴市场国家的GDP增长率和通货膨胀率数据。接着，获取这些国家主要股票指数的历史表现。最后，通过这些数据评估投资新兴市场的风险和回报。"
            }
        ]
    },
    "55": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceGuide.get_latest_guide",
                "FinanceGuide.get_savings_rates",
                "FinanceGuide.get_historical_returns",
                "FinanceGuide.create_personal_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceGuide.get_latest_guide",
                "args": "{}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceGuide.get_savings_rates",
                "args": "{}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceGuide.get_historical_returns",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceGuide.create_personal_plan",
                "args": "{}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceGuide.get_latest_guide', {'name': 'FinanceGuide.get_latest_guide', 'description': 'This function retrieves the latest personal finance guide and advice.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'guide', 'description': 'The latest personal finance guide and advice.'}]}], ['FinanceGuide.get_savings_rates', {'name': 'FinanceGuide.get_savings_rates', 'description': 'This function retrieves average savings rates and investment portfolios for different age groups.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'Average savings rates and investment portfolios for different age groups.'}]}], ['FinanceGuide.get_historical_returns', {'name': 'FinanceGuide.get_historical_returns', 'description': 'This function retrieves historical return rates for common investment tools like stocks, bonds, and funds.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'Historical return rates for common investment tools.'}]}], ['FinanceGuide.create_personal_plan', {'name': 'FinanceGuide.create_personal_plan', 'description': 'This function creates a personal finance plan based on the provided data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'plan', 'description': 'A personal finance plan tailored to the user.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceGuide.get_latest_guide`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceGuide.get_latest_guide\",\n    \"args\": \"{}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解个人理财的最佳实践。首先，获取最新的个人理财指南和建议。然后，获取不同年龄段人群的平均储蓄率和投资组合数据。接着，获取几种常见投资工具（如股票、债券、基金）的历史回报率。最后，根据这些数据制定一个适合我的个人理财计划。"
            }
        ]
    },
    "56": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateAnalysis.get_research_reports",
                "RealEstateAnalysis.get_price_indices",
                "RealEstateAnalysis.get_rental_yields",
                "RealEstateAnalysis.get_population_data",
                "RealEstateAnalysis.get_economic_data",
                "RealEstateAnalysis.evaluate_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateAnalysis.get_research_reports",
                "args": "{\"period\": \"last_year\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateAnalysis.get_price_indices",
                "args": "{\"cities\": [\"New York\", \"Los Angeles\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateAnalysis.get_rental_yields",
                "args": "{\"cities\": [\"New York\", \"Los Angeles\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateAnalysis.get_population_data",
                "args": "{\"cities\": [\"New York\", \"Los Angeles\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RealEstateAnalysis.get_economic_data",
                "args": "{\"cities\": [\"New York\", \"Los Angeles\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "RealEstateAnalysis.evaluate_investment",
                "args": "{\"data\": [\"price_indices\", \"rental_yields\", \"population_data\", \"economic_data\"]}"
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateAnalysis.get_research_reports', {'name': 'RealEstateAnalysis.get_research_reports', 'description': 'This function retrieves research reports on the real estate market for a specified period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for which reports are needed, e.g., last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five research reports.'}]}], ['RealEstateAnalysis.get_price_indices', {'name': 'RealEstateAnalysis.get_price_indices', 'description': 'This function retrieves housing price indices for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'indices', 'description': 'Price indices for the specified cities.'}]}], ['RealEstateAnalysis.get_rental_yields', {'name': 'RealEstateAnalysis.get_rental_yields', 'description': 'This function retrieves rental yield data for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'yields', 'description': 'Rental yields for the specified cities.'}]}], ['RealEstateAnalysis.get_population_data', {'name': 'RealEstateAnalysis.get_population_data', 'description': 'This function retrieves population growth data for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'population_data', 'description': 'Population growth data for the specified cities.'}]}], ['RealEstateAnalysis.get_economic_data', {'name': 'RealEstateAnalysis.get_economic_data', 'description': 'This function retrieves economic development data for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'economic_data', 'description': 'Economic development data for the specified cities.'}]}], ['RealEstateAnalysis.evaluate_investment', {'name': 'RealEstateAnalysis.evaluate_investment', 'description': 'This function evaluates the feasibility of real estate investment based on provided data.', 'required_parameters': [{'name': 'data', 'type': 'ARRAY', 'description': 'An array of data types to consider for evaluation.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of the investment feasibility.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateAnalysis.get_research_reports` 并传入 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateAnalysis.get_research_reports\",\n    \"args\": \"{'period': 'last_year'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析房地产市场的投资潜力。首先，获取最近一年内关于房地产市场的5篇研究报告。然后，获取几个主要城市的房价指数和租金收益率数据。接着，获取这些城市的人口增长和经济发展数据。最后，通过这些数据评估房地产投资的可行性。"
            }
        ]
    },
    "57": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ForexAnalysis.fetch_articles",
                "ForexAnalysis.get_historical_data",
                "ForexAnalysis.get_current_rates",
                "ForexAnalysis.predict_future_rates"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ForexAnalysis.fetch_articles",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\", \"AUD/USD\", \"USD/CAD\"]}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ForexAnalysis.get_historical_data",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\", \"AUD/USD\", \"USD/CAD\"], \"period\": \"last_month\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ForexAnalysis.get_current_rates",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\", \"AUD/USD\", \"USD/CAD\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ForexAnalysis.predict_future_rates",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"GBP/USD\", \"USD/JPY\", \"AUD/USD\", \"USD/CAD\"], \"period\": \"next_week\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ForexAnalysis.fetch_articles', {'name': 'ForexAnalysis.fetch_articles', 'description': 'This function fetches analysis articles for specified currency pairs.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs to fetch articles for.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five analysis articles for the specified currency pairs.'}]}], ['ForexAnalysis.get_historical_data', {'name': 'ForexAnalysis.get_historical_data', 'description': 'This function retrieves historical exchange rate data for specified currency pairs over a specified period.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs to retrieve data for.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which to retrieve historical data, e.g., last_month, last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': 'Historical exchange rate data for the specified currency pairs and period.'}]}], ['ForexAnalysis.get_current_rates', {'name': 'ForexAnalysis.get_current_rates', 'description': 'This function retrieves the current real-time exchange rates for specified currency pairs.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs to retrieve current rates for.'}], 'optional_parameters': [], 'return_data': [{'name': 'current_rates', 'description': 'Current real-time exchange rates for the specified currency pairs.'}]}], ['ForexAnalysis.predict_future_rates', {'name': 'ForexAnalysis.predict_future_rates', 'description': 'This function predicts future exchange rate trends for specified currency pairs over a specified period.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs to predict rates for.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which to predict future rates, e.g., next_week, next_month.'}], 'optional_parameters': [], 'return_data': [{'name': 'predictions', 'description': 'Predicted future exchange rate trends for the specified currency pairs and period.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ForexAnalysis.fetch_articles` 并传入 `currency_pairs`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ForexAnalysis.fetch_articles\",\n    \"args\": \"{'currency_pairs': ['EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CAD']}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解外汇市场的波动情况。首先，获取最近一周内关于主要货币对的5篇分析文章。然后，获取这些货币对在过去一个月的汇率历史数据。接着，获取这些货币对的当前实时汇率。最后，通过这些数据预测未来一周的汇率走势。"
            }
        ]
    },
    "58": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GreenEnergyAnalysis.fetch_reports",
                "GreenEnergyAnalysis.get_company_data",
                "GreenEnergyAnalysis.get_stock_performance",
                "GreenEnergyAnalysis.evaluate_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GreenEnergyAnalysis.fetch_reports",
                "args": "{\"period\": \"last_year\", \"topic\": \"green_energy\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GreenEnergyAnalysis.get_company_data",
                "args": "{\"companyNames\": [\"SolarTech\", \"WindPower Inc\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GreenEnergyAnalysis.get_stock_performance",
                "args": "{\"companyNames\": [\"SolarTech\", \"WindPower Inc\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GreenEnergyAnalysis.evaluate_investment",
                "args": "{\"data\": {\"reports\": [\"report1\", \"report2\"], \"financialData\": [\"data1\", \"data2\"], \"stockPerformance\": [\"performance1\", \"performance2\"]}}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GreenEnergyAnalysis.fetch_reports', {'name': 'GreenEnergyAnalysis.fetch_reports', 'description': 'This function fetches industry reports on green energy for a specified period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for the reports, e.g., last_year, last_quarter.'}, {'name': 'topic', 'type': 'STRING', 'description': 'The topic of the reports, e.g., green_energy, renewable_resources.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of up to five relevant industry reports.'}]}], ['GreenEnergyAnalysis.get_company_data', {'name': 'GreenEnergyAnalysis.get_company_data', 'description': 'This function retrieves financial data and market share for specified green energy companies.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Detailed financial and market share data for each company.'}]}], ['GreenEnergyAnalysis.get_stock_performance', {'name': 'GreenEnergyAnalysis.get_stock_performance', 'description': 'This function retrieves historical stock performance for specified green energy companies.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance', 'description': 'Historical stock performance data for each company.'}]}], ['GreenEnergyAnalysis.evaluate_investment', {'name': 'GreenEnergyAnalysis.evaluate_investment', 'description': 'This function evaluates the investment potential of the green energy industry based on provided data.', 'required_parameters': [{'name': 'data', 'type': 'OBJECT', 'description': 'An object containing reports, financial data, and stock performance.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of the investment potential based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `GreenEnergyAnalysis.fetch_reports` 并传入 `period` 和 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"GreenEnergyAnalysis.fetch_reports\",\n    \"args\": \"{'period': 'last_year', 'topic': 'green_energy'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析绿色能源行业的投资机会。首先，获取最近一年内关于绿色能源的5篇行业报告。然后，获取几个主要绿色能源公司的财务数据和市场份额。接着，获取这些公司的股票历史表现。最后，通过这些数据评估绿色能源行业的投资潜力。"
            }
        ]
    },
    "59": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FintechResearch.get_articles",
                "FintechResearch.get_company_products",
                "FintechResearch.get_market_valuation",
                "FintechResearch.predict_future_trends"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FintechResearch.get_articles",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FintechResearch.get_company_products",
                "args": "{\"companyNames\": [\"Stripe\", \"Square\", \"Adyen\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FintechResearch.get_market_valuation",
                "args": "{\"companyNames\": [\"Stripe\", \"Square\", \"Adyen\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FintechResearch.predict_future_trends",
                "args": "{\"data\": [{\"company\": \"Stripe\", \"valuation\": 95, \"userGrowth\": 20}, {\"company\": \"Square\", \"valuation\": 120, \"userGrowth\": 15}, {\"company\": \"Adyen\", \"valuation\": 70, \"userGrowth\": 10}]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FintechResearch.get_articles', {'name': 'FintechResearch.get_articles', 'description': 'This function retrieves research articles about fintech published in a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which articles are to be retrieved.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five research articles, each with a title, author, and summary.'}]}], ['FintechResearch.get_company_products', {'name': 'FintechResearch.get_company_products', 'description': 'This function retrieves information about the innovative products and services offered by specified fintech companies.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'Details about the products and services, including features and launch dates.'}]}], ['FintechResearch.get_market_valuation', {'name': 'FintechResearch.get_market_valuation', 'description': 'This function retrieves the market valuation and user growth data for specified fintech companies.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'valuationData', 'description': 'Data including market valuation and user growth rates.'}]}], ['FintechResearch.predict_future_trends', {'name': 'FintechResearch.predict_future_trends', 'description': 'This function predicts future trends in fintech based on provided data.', 'required_parameters': [{'name': 'data', 'type': 'ARRAY', 'description': 'An array of objects containing company names, valuations, and user growth rates.'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'Predictions about future developments in fintech.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FintechResearch.get_articles` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FintechResearch.get_articles\",\n    \"args\": \"{'year': 2023'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融科技的发展趋势。首先，获取最近一年内关于金融科技的5篇研究文章。然后，获取几个主要金融科技公司的创新产品和服务数据。接着，获取这些公司的市场估值和用户增长数据。最后，通过这些数据预测金融科技的未来发展方向。"
            }
        ]
    },
    "60": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceAnalysis.get_reports",
                "InsuranceAnalysis.get_company_financials",
                "InsuranceAnalysis.get_stock_history",
                "InsuranceAnalysis.evaluate_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceAnalysis.get_reports",
                "args": "{\"period\": \"last_year\", \"industry\": \"insurance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceAnalysis.get_company_financials",
                "args": "{\"companyNames\": [\"AIG\", \"Prudential\", \"MetLife\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceAnalysis.get_stock_history",
                "args": "{\"companyNames\": [\"AIG\", \"Prudential\", \"MetLife\"], \"period\": \"last_year\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceAnalysis.evaluate_investment",
                "args": "{\"data\": [\"reports\", \"financials\", \"stock_history\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceAnalysis.get_reports', {'name': 'InsuranceAnalysis.get_reports', 'description': 'This function retrieves analysis reports for a specified industry over a given period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for the reports, e.g., last_year, last_quarter.'}, {'name': 'industry', 'type': 'STRING', 'description': 'The industry to analyze, e.g., insurance, technology.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of analysis reports containing insights and data.'}]}], ['InsuranceAnalysis.get_company_financials', {'name': 'InsuranceAnalysis.get_company_financials', 'description': 'This function retrieves the financial health and market share of specified insurance companies.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names to retrieve financial data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'financials', 'description': 'Detailed financial data including health metrics and market share.'}]}], ['InsuranceAnalysis.get_stock_history', {'name': 'InsuranceAnalysis.get_stock_history', 'description': 'This function retrieves the historical stock performance of specified companies over a given period.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names to retrieve stock history for.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the stock history, e.g., last_year, last_quarter.'}], 'optional_parameters': [], 'return_data': [{'name': 'stock_history', 'description': 'Historical stock performance data including prices and volumes.'}]}], ['InsuranceAnalysis.evaluate_investment', {'name': 'InsuranceAnalysis.evaluate_investment', 'description': 'This function evaluates the investment attractiveness of an industry based on provided data.', 'required_parameters': [{'name': 'data', 'type': 'ARRAY', 'description': 'An array of data types to evaluate, e.g., reports, financials, stock_history.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation', 'description': 'An evaluation of the investment attractiveness based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InsuranceAnalysis.get_reports` 并传入 `period` 和 `industry`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InsuranceAnalysis.get_reports\",\n    \"args\": \"{'period': 'last_year', 'industry': 'insurance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析保险行业的投资价值。首先，获取最近一年内关于保险行业的5篇分析报告。然后，获取几个主要保险公司的财务健康状况和市场份额。接着，获取这些公司的股票历史表现。最后，通过这些数据评估保险行业的投资吸引力。"
            }
        ]
    },
    "61": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoldResearch.fetch_articles",
                "GoldResearch.get_price_history",
                "GoldResearch.get_current_price",
                "GoldResearch.analyze_reliability"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoldResearch.fetch_articles",
                "args": "{\"period\": \"last_year\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GoldResearch.get_price_history",
                "args": "{\"period\": \"last_year\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GoldResearch.get_current_price",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GoldResearch.analyze_reliability",
                "args": "{\"articles\": [1, 2, 3, 4, 5], \"price_history\": [1, 2], \"current_price\": 3}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoldResearch.fetch_articles', {'name': 'GoldResearch.fetch_articles', 'description': 'This function fetches research articles about the gold market for a specified period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for which articles are needed, e.g., last_year, last_month.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five research articles.'}]}], ['GoldResearch.get_price_history', {'name': 'GoldResearch.get_price_history', 'description': 'This function retrieves the price history of gold for a specified period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for which price history is needed, e.g., last_year, last_month.'}], 'optional_parameters': [], 'return_data': [{'name': 'price_history', 'description': 'A list of historical prices.'}]}], ['GoldResearch.get_current_price', {'name': 'GoldResearch.get_current_price', 'description': 'This function retrieves the current market price of gold.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'current_price', 'description': 'The current market price of gold.'}]}], ['GoldResearch.analyze_reliability', {'name': 'GoldResearch.analyze_reliability', 'description': 'This function analyzes the reliability of gold as a safe-haven asset based on provided data.', 'required_parameters': [{'name': 'articles', 'type': 'ARRAY', 'description': 'An array of article IDs to analyze.'}, {'name': 'price_history', 'type': 'ARRAY', 'description': 'An array of historical price IDs.'}, {'name': 'current_price', 'type': 'NUMBER', 'description': 'The current price of gold.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'An analysis report on the reliability of gold as a safe-haven asset.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `GoldResearch.fetch_articles` 并传入 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"GoldResearch.fetch_articles\",\n    \"args\": \"{'period': 'last_year'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解黄金作为避险资产的表现。首先，获取最近一年内关于黄金市场的5篇研究文章。然后，获取黄金在过去一年的价格历史数据。接着，获取黄金的当前市场价格。最后，通过这些数据分析黄金作为避险资产的可靠性。"
            }
        ]
    },
    "62": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoNews.fetch_articles",
                "CryptoData.get_historical_data",
                "CryptoData.get_real_time_price",
                "CryptoData.get_crypto_code",
                "CryptoInvest.get_investment_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoNews.fetch_articles",
                "args": "{\"topic\": \"cryptocurrency sentiment analysis\", \"limit\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoData.get_historical_data",
                "args": "{\"date\": \"2024-07-01\", \"crypto\": \"Bitcoin\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoData.get_real_time_price",
                "args": "{\"crypto\": \"Bitcoin\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoData.get_crypto_code",
                "args": "{\"crypto\": \"Bitcoin\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CryptoInvest.get_investment_strategies",
                "args": "{\"crypto\": \"Bitcoin\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoNews.fetch_articles', {'name': 'CryptoNews.fetch_articles', 'description': 'This function fetches the latest news articles on a specified topic related to cryptocurrency.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the news articles, e.g., cryptocurrency sentiment analysis.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of news articles with title, summary, and source.'}]}], ['CryptoData.get_historical_data', {'name': 'CryptoData.get_historical_data', 'description': 'This function retrieves historical trading data for a specified cryptocurrency on a given date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve historical data.'}, {'name': 'crypto', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical trading data including open, high, low, close prices and volume.'}]}], ['CryptoData.get_real_time_price', {'name': 'CryptoData.get_real_time_price', 'description': 'This function retrieves the current market price of a specified cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': 'The current market price of the cryptocurrency.'}]}], ['CryptoData.get_crypto_code', {'name': 'CryptoData.get_crypto_code', 'description': 'This function retrieves the trading code of a specified cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The trading code of the cryptocurrency.'}]}], ['CryptoInvest.get_investment_strategies', {'name': 'CryptoInvest.get_investment_strategies', 'description': 'This function provides investment strategy recommendations for a specified cryptocurrency.', 'required_parameters': [{'name': 'crypto', 'type': 'STRING', 'description': 'The name of the cryptocurrency.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of investment strategies with details on risk level and expected return.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoNews.fetch_articles` 并传入 `topic` 和 `limit`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoNews.fetch_articles\",\n    \"args\": \"{'topic': 'cryptocurrency sentiment analysis', 'limit': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究加密货币市场的情绪影响。首先，从最新的区块链新闻中获取5篇关于加密货币情绪分析的文章。然后，获取2024年7月1日比特币的历史交易数据。接着，获取比特币当前的实时市场价格。最后，通过加密货币名称获取比特币的代码，并获取一些投资策略建议。"
            }
        ]
    },
    "63": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EconomicAnalysis.fetch_articles",
                "HistoricalData.get_exchange_rates",
                "RealTimeData.get_current_rate",
                "CurrencyCode.get_code",
                "TradingAdvice.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EconomicAnalysis.fetch_articles",
                "args": "{\"topic\": \"forex_psychology\", \"limit\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "HistoricalData.get_exchange_rates",
                "args": "{\"currency_pair\": \"USD/EUR\", \"date\": \"2024-09-01\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealTimeData.get_current_rate",
                "args": "{\"currency_pair\": \"USD/EUR\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CurrencyCode.get_code",
                "args": "{\"currency_pair\": \"USD/EUR\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TradingAdvice.get_recommendations",
                "args": "{\"currency_code\": \"USDEUR\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EconomicAnalysis.fetch_articles', {'name': 'EconomicAnalysis.fetch_articles', 'description': 'This function fetches articles related to a specific economic topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., forex_psychology.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['HistoricalData.get_exchange_rates', {'name': 'HistoricalData.get_exchange_rates', 'description': 'This function retrieves historical exchange rates for a specific currency pair on a given date.', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair, e.g., USD/EUR.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve the historical data.'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'Historical exchange rates for the specified date.'}]}], ['RealTimeData.get_current_rate', {'name': 'RealTimeData.get_current_rate', 'description': 'This function retrieves the current exchange rate for a specific currency pair.', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair, e.g., USD/EUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'rate', 'description': 'The current exchange rate for the specified currency pair.'}]}], ['CurrencyCode.get_code', {'name': 'CurrencyCode.get_code', 'description': 'This function retrieves the code for a specific currency pair.', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair, e.g., USD/EUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The code for the specified currency pair.'}]}], ['TradingAdvice.get_recommendations', {'name': 'TradingAdvice.get_recommendations', 'description': 'This function provides trading recommendations based on a specific currency code.', 'required_parameters': [{'name': 'currency_code', 'type': 'STRING', 'description': 'The currency code, e.g., USDEUR.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Trading recommendations for the specified currency code.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `EconomicAnalysis.fetch_articles` 并传入 `topic` 和 `limit`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"EconomicAnalysis.fetch_articles\",\n    \"args\": \"{'topic': 'forex_psychology', 'limit': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析外汇市场的波动与心理因素的关系。首先，从最新的经济评论中获取3篇关于外汇市场心理分析的文章。然后，获取2024年9月1日美元对欧元的外汇历史数据。接着，获取美元对欧元的实时汇率。最后，通过货币对名称获取美元对欧元的代码，并获取一些交易建议。"
            }
        ]
    },
    "64": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceResearch.fetch_articles",
                "FinanceResearch.get_historical_prices",
                "FinanceResearch.get_real_time_price",
                "FinanceResearch.get_commodity_code",
                "FinanceResearch.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceResearch.fetch_articles",
                "args": "{\"topic\": \"gold market psychology\", \"source\": \"latest financial magazine\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceResearch.get_historical_prices",
                "args": "{\"date\": \"2024-06-01\", \"commodity\": \"gold\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceResearch.get_real_time_price",
                "args": "{\"commodity\": \"gold\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceResearch.get_commodity_code",
                "args": "{\"commodity\": \"gold\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinanceResearch.get_investment_advice",
                "args": "{\"commodityCode\": \"XAU\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceResearch.fetch_articles', {'name': 'FinanceResearch.fetch_articles', 'description': 'This function fetches articles related to a specific topic from a specified source.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., gold market psychology.'}, {'name': 'source', 'type': 'STRING', 'description': 'The source of the articles, e.g., latest financial magazine.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to four relevant articles.'}]}], ['FinanceResearch.get_historical_prices', {'name': 'FinanceResearch.get_historical_prices', 'description': 'This function retrieves historical price data for a specified commodity on a given date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve the historical prices, in YYYY-MM-DD format.'}, {'name': 'commodity', 'type': 'STRING', 'description': 'The name of the commodity, e.g., gold.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Historical price data for the specified commodity on the given date.'}]}], ['FinanceResearch.get_real_time_price', {'name': 'FinanceResearch.get_real_time_price', 'description': 'This function retrieves the current real-time market price for a specified commodity.', 'required_parameters': [{'name': 'commodity', 'type': 'STRING', 'description': 'The name of the commodity, e.g., gold.'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': 'The current real-time market price for the specified commodity.'}]}], ['FinanceResearch.get_commodity_code', {'name': 'FinanceResearch.get_commodity_code', 'description': 'This function retrieves the commodity code for a specified commodity.', 'required_parameters': [{'name': 'commodity', 'type': 'STRING', 'description': 'The name of the commodity, e.g., gold.'}], 'optional_parameters': [], 'return_data': [{'name': 'code', 'description': 'The commodity code for the specified commodity.'}]}], ['FinanceResearch.get_investment_advice', {'name': 'FinanceResearch.get_investment_advice', 'description': 'This function provides investment advice based on a specified commodity code.', 'required_parameters': [{'name': 'commodityCode', 'type': 'STRING', 'description': 'The commodity code for which to provide investment advice, e.g., XAU.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice based on the specified commodity code.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceResearch.fetch_articles` 并传入 `topic` 和 `source`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceResearch.fetch_articles\",\n    \"args\": \"{'topic': 'gold market psychology', 'source': 'latest financial magazine'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探讨黄金市场的投资心理。首先，从最新的财经杂志中获取4篇关于黄金市场心理影响的文章。然后，获取2024年6月1日黄金的历史价格数据。接着，获取黄金当前的实时市场价格。最后，通过商品名称获取黄金的代码，并获取一些投资建议。"
            }
        ]
    },
    "65": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondMarketAnalysis.fetch_research_articles",
                "BondMarketAnalysis.get_historical_yield",
                "BondMarketAnalysis.get_real_time_yield",
                "BondMarketAnalysis.get_bond_code",
                "BondMarketAnalysis.get_investment_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondMarketAnalysis.fetch_research_articles",
                "args": "{\"topic\": \"bond market sentiment\", \"limit\": 3}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondMarketAnalysis.get_historical_yield",
                "args": "{\"date\": \"2024-05-01\", \"bond_type\": \"US 10-year Treasury\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BondMarketAnalysis.get_real_time_yield",
                "args": "{\"bond_type\": \"US 10-year Treasury\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BondMarketAnalysis.get_bond_code",
                "args": "{\"bond_name\": \"US 10-year Treasury\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "BondMarketAnalysis.get_investment_strategies",
                "args": "{\"bond_code\": \"US10YT\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondMarketAnalysis.fetch_research_articles', {'name': 'BondMarketAnalysis.fetch_research_articles', 'description': 'This function fetches research articles on a specific topic, with a limit on the number of articles.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles, e.g., bond market sentiment.'}, {'name': 'limit', 'type': 'NUMBER', 'description': 'The maximum number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of research articles matching the topic.'}]}], ['BondMarketAnalysis.get_historical_yield', {'name': 'BondMarketAnalysis.get_historical_yield', 'description': 'This function retrieves historical yield data for a specific date and bond type.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to fetch historical yield data.'}, {'name': 'bond_type', 'type': 'STRING', 'description': 'The type of bond, e.g., US 10-year Treasury.'}], 'optional_parameters': [], 'return_data': [{'name': 'yield_data', 'description': 'Historical yield data for the specified date and bond type.'}]}], ['BondMarketAnalysis.get_real_time_yield', {'name': 'BondMarketAnalysis.get_real_time_yield', 'description': 'This function retrieves real-time yield data for a specific bond type.', 'required_parameters': [{'name': 'bond_type', 'type': 'STRING', 'description': 'The type of bond, e.g., US 10-year Treasury.'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_yield', 'description': 'Real-time yield data for the specified bond type.'}]}], ['BondMarketAnalysis.get_bond_code', {'name': 'BondMarketAnalysis.get_bond_code', 'description': 'This function retrieves the code for a specific bond name.', 'required_parameters': [{'name': 'bond_name', 'type': 'STRING', 'description': 'The name of the bond, e.g., US 10-year Treasury.'}], 'optional_parameters': [], 'return_data': [{'name': 'bond_code', 'description': 'The code for the specified bond name.'}]}], ['BondMarketAnalysis.get_investment_strategies', {'name': 'BondMarketAnalysis.get_investment_strategies', 'description': 'This function retrieves investment strategies for a specific bond code.', 'required_parameters': [{'name': 'bond_code', 'type': 'STRING', 'description': 'The code of the bond for which to fetch investment strategies.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Investment strategies for the specified bond code.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BondMarketAnalysis.fetch_research_articles` 并传入 `topic` 和 `limit`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BondMarketAnalysis.fetch_research_articles\",\n    \"args\": \"{'topic': 'bond market sentiment', 'limit': 3}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析债券市场的情绪波动。首先，从最新的金融研究报告中获取3篇关于债券市场情绪分析的文章。然后，获取2024年5月1日美国十年期国债的历史收益率数据。接着，获取美国十年期国债的实时收益率。最后，通过债券名称获取美国十年期国债的代码，并获取一些投资策略建议。"
            }
        ]
    },
    "66": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateAnalysis.fetch_articles",
                "RealEstateAnalysis.get_historical_prices",
                "RealEstateAnalysis.get_real_time_prices",
                "RealEstateAnalysis.get_region_codes",
                "RealEstateAnalysis.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateAnalysis.fetch_articles",
                "args": "{\"topic\": \"market_psychology\", \"count\": 4}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateAnalysis.get_historical_prices",
                "args": "{\"city\": \"New York\", \"date\": \"2024-04-01\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateAnalysis.get_real_time_prices",
                "args": "{\"city\": \"New York\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateAnalysis.get_region_codes",
                "args": "{\"city\": \"New York\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RealEstateAnalysis.get_investment_advice",
                "args": "{\"region_codes\": [\"NYC1\", \"NYC2\"]}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateAnalysis.fetch_articles', {'name': 'RealEstateAnalysis.fetch_articles', 'description': 'This function fetches articles related to a specific topic in the real estate market.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., market_psychology, trends.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['RealEstateAnalysis.get_historical_prices', {'name': 'RealEstateAnalysis.get_historical_prices', 'description': 'This function retrieves historical real estate prices for a specified city and date.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'The city for which prices are requested.'}, {'name': 'date', 'type': 'STRING', 'description': 'The date for which historical prices are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Historical prices for the specified city and date.'}]}], ['RealEstateAnalysis.get_real_time_prices', {'name': 'RealEstateAnalysis.get_real_time_prices', 'description': 'This function retrieves real-time real estate prices for a specified city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'The city for which real-time prices are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Real-time prices for the specified city.'}]}], ['RealEstateAnalysis.get_region_codes', {'name': 'RealEstateAnalysis.get_region_codes', 'description': 'This function retrieves region codes for a specified city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'The city for which region codes are requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'codes', 'description': 'Region codes for the specified city.'}]}], ['RealEstateAnalysis.get_investment_advice', {'name': 'RealEstateAnalysis.get_investment_advice', 'description': 'This function provides investment advice based on specified region codes.', 'required_parameters': [{'name': 'region_codes', 'type': 'ARRAY', 'description': 'An array of region codes for which investment advice is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified regions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateAnalysis.fetch_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateAnalysis.fetch_articles\",\n    \"args\": \"{'topic': 'market_psychology', 'count': 4}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究房地产市场的投资心理。首先，从最新的房地产分析文章中获取4篇关于房地产市场心理影响的文章。然后，获取2024年4月1日纽约市房地产的历史价格数据。接着，获取纽约市房地产的实时市场价格。最后，通过地区名称获取纽约市房地产的代码，并获取一些投资建议。"
            }
        ]
    },
    "67": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ConsumerFinance.get_market_analysis",
                "ConsumerFinance.get_interest_rates",
                "ConsumerFinance.get_market_share",
                "ConsumerFinance.get_company_details",
                "ConsumerFinance.get_market_strategy_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ConsumerFinance.get_market_analysis",
                "args": "{\"year\": \"2022\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ConsumerFinance.get_interest_rates",
                "args": "{\"date\": \"2023-12-15\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ConsumerFinance.get_market_share",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ConsumerFinance.get_company_details",
                "args": "{\"companyName\": \"ABC Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ConsumerFinance.get_market_strategy_suggestions",
                "args": "{\"companyName\": \"ABC Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ConsumerFinance.get_market_analysis', {'name': 'ConsumerFinance.get_market_analysis', 'description': 'This function retrieves market analysis reports for the consumer finance industry for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'STRING', 'description': 'The year for which the market analysis is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'A detailed market analysis report for the specified year.'}]}], ['ConsumerFinance.get_interest_rates', {'name': 'ConsumerFinance.get_interest_rates', 'description': 'This function retrieves interest rates for consumer finance loans on a specific date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which interest rates are requested, in YYYY-MM-DD format.'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'A list of interest rates for various consumer finance loans on the specified date.'}]}], ['ConsumerFinance.get_market_share', {'name': 'ConsumerFinance.get_market_share', 'description': 'This function retrieves real-time market share data for consumer finance loan companies.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'marketShare', 'description': 'Real-time market share data for consumer finance loan companies.'}]}], ['ConsumerFinance.get_company_details', {'name': 'ConsumerFinance.get_company_details', 'description': 'This function retrieves detailed information about a specific consumer finance loan company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the consumer finance loan company.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the specified company, including history, services, and leadership.'}]}], ['ConsumerFinance.get_market_strategy_suggestions', {'name': 'ConsumerFinance.get_market_strategy_suggestions', 'description': 'This function provides market strategy suggestions for a specific consumer finance loan company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the consumer finance loan company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Strategic suggestions for improving market position and performance.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ConsumerFinance.get_market_analysis` 并传入 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ConsumerFinance.get_market_analysis\",\n    \"args\": \"{'year': '2022'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的市场趋势。首先，获取过去一年内关于消费金融行业的市场分析报告。然后，获取2023年12月15日中国消费金融贷款公司的贷款利率数据。接着，获取当前消费金融贷款公司的实时市场占有率数据。最后，通过公司名称获取中国消费金融贷款公司的详细信息，并获取一些市场策略建议。"
            }
        ]
    },
    "68": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchArticleSearch.find_articles",
                "FinancialData.get_loan_default_rate",
                "RiskAssessment.get_report",
                "CompanyStrategy.get_risk_management",
                "RiskControl.get_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchArticleSearch.find_articles",
                "args": "{\"topic\": \"consumer finance risk management\", \"period\": \"last three months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialData.get_loan_default_rate",
                "args": "{\"date\": \"2024-01-10\", \"sector\": \"consumer finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RiskAssessment.get_report",
                "args": "{\"sector\": \"consumer finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CompanyStrategy.get_risk_management",
                "args": "{\"companyName\": \"ABC Consumer Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RiskControl.get_suggestions",
                "args": "{\"companyName\": \"ABC Consumer Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchArticleSearch.find_articles', {'name': 'ResearchArticleSearch.find_articles', 'description': 'This function searches for research articles based on a topic and period.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the articles, e.g., last three months.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with a title, author, and publication date.'}]}], ['FinancialData.get_loan_default_rate', {'name': 'FinancialData.get_loan_default_rate', 'description': 'This function retrieves the loan default rate for a specific date and sector.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which the data is requested.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of finance, e.g., consumer finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'defaultRate', 'description': 'The loan default rate for the specified sector on the given date.'}]}], ['RiskAssessment.get_report', {'name': 'RiskAssessment.get_report', 'description': 'This function retrieves risk assessment reports for a specific sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of finance, e.g., consumer finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed risk assessment report for the specified sector.'}]}], ['CompanyStrategy.get_risk_management', {'name': 'CompanyStrategy.get_risk_management', 'description': 'This function retrieves risk management strategies for a specific company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'The risk management strategy of the company.'}]}], ['RiskControl.get_suggestions', {'name': 'RiskControl.get_suggestions', 'description': 'This function retrieves risk control suggestions for a specific company.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Risk control suggestions for the company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchArticleSearch.find_articles` 并传入 `topic` 和 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchArticleSearch.find_articles\",\n    \"args\": \"{'topic': 'consumer finance risk management', 'period': 'last three months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估中国消费金融贷款公司的风险管理。首先，获取最近三个月内关于消费金融风险管理的研究文章。然后，获取2024年1月10日中国消费金融贷款公司的不良贷款率数据。接着，获取当前消费金融贷款公司的风险评估报告。最后，通过公司名称获取中国消费金融贷款公司的风险管理策略，并获取一些风险控制建议。"
            }
        ]
    },
    "69": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ConsumerFinance.get_satisfaction_reports",
                "ConsumerFinance.get_complaints",
                "ConsumerFinance.get_satisfaction_scores",
                "ConsumerFinance.get_service_strategies",
                "ConsumerFinance.get_improvement_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ConsumerFinance.get_satisfaction_reports",
                "args": "{\"period\": \"last_six_months\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ConsumerFinance.get_complaints",
                "args": "{\"date\": \"2023-11-20\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ConsumerFinance.get_satisfaction_scores",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ConsumerFinance.get_service_strategies",
                "args": "{\"company_name\": \"ABC Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ConsumerFinance.get_improvement_suggestions",
                "args": "{\"company_name\": \"ABC Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ConsumerFinance.get_satisfaction_reports', {'name': 'ConsumerFinance.get_satisfaction_reports', 'description': 'This function retrieves customer satisfaction reports for consumer finance companies over a specified period.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The period for which the reports are requested, e.g., last_six_months.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of satisfaction reports for the specified period.'}]}], ['ConsumerFinance.get_complaints', {'name': 'ConsumerFinance.get_complaints', 'description': 'This function retrieves customer complaint data for consumer finance companies on a specific date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which the complaint data is requested, in YYYY-MM-DD format.'}], 'optional_parameters': [], 'return_data': [{'name': 'complaints', 'description': 'A list of customer complaints for the specified date.'}]}], ['ConsumerFinance.get_satisfaction_scores', {'name': 'ConsumerFinance.get_satisfaction_scores', 'description': 'This function retrieves current customer satisfaction scores for consumer finance companies.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'scores', 'description': 'Current satisfaction scores for the companies.'}]}], ['ConsumerFinance.get_service_strategies', {'name': 'ConsumerFinance.get_service_strategies', 'description': 'This function retrieves customer service strategies for a specific consumer finance company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the consumer finance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Customer service strategies for the specified company.'}]}], ['ConsumerFinance.get_improvement_suggestions', {'name': 'ConsumerFinance.get_improvement_suggestions', 'description': 'This function retrieves suggestions for improving customer satisfaction for a specific consumer finance company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the consumer finance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Suggestions for improving customer satisfaction for the specified company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ConsumerFinance.get_satisfaction_reports` 并传入 `period`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ConsumerFinance.get_satisfaction_reports\",\n    \"args\": \"{'period': 'last_six_months'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析中国消费金融贷款公司的客户满意度。首先，获取过去半年内关于消费金融客户满意度的调查报告。然后，获取2023年11月20日中国消费金融贷款公司的客户投诉数据。接着，获取当前消费金融贷款公司的客户满意度评分。最后，通过公司名称获取中国消费金融贷款公司的客户服务策略，并获取一些提升客户满意度的建议。"
            }
        ]
    },
    "70": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinTechSearch.find_innovations",
                "FinTechSearch.get_investment_data",
                "FinTechSearch.get_tech_applications",
                "FinTechSearch.get_innovation_strategies",
                "FinTechSearch.get_tech_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinTechSearch.find_innovations",
                "args": "{\"time_frame\": \"last_year\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinTechSearch.get_investment_data",
                "args": "{\"date\": \"2024-02-05\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinTechSearch.get_tech_applications",
                "args": "{\"sector\": \"consumer_finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinTechSearch.get_innovation_strategies",
                "args": "{\"company_name\": \"ABC_Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinTechSearch.get_tech_suggestions",
                "args": "{\"sector\": \"consumer_finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinTechSearch.find_innovations', {'name': 'FinTechSearch.find_innovations', 'description': 'This function searches for technological innovations in a specified sector within a given time frame.', 'required_parameters': [{'name': 'time_frame', 'type': 'STRING', 'description': 'The time frame for the search, e.g., last_year, last_quarter.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest, e.g., consumer_finance, banking.'}], 'optional_parameters': [], 'return_data': [{'name': 'innovations', 'description': 'A list of recent technological innovations in the specified sector.'}]}], ['FinTechSearch.get_investment_data', {'name': 'FinTechSearch.get_investment_data', 'description': 'This function retrieves investment data for a specified sector on a given date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to retrieve investment data.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest.'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': 'Detailed investment data including amounts and investors.'}]}], ['FinTechSearch.get_tech_applications', {'name': 'FinTechSearch.get_tech_applications', 'description': 'This function retrieves current technological applications in a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest.'}], 'optional_parameters': [], 'return_data': [{'name': 'applications', 'description': 'A list of current technological applications in the sector.'}]}], ['FinTechSearch.get_innovation_strategies', {'name': 'FinTechSearch.get_innovation_strategies', 'description': 'This function retrieves innovation strategies for a specified company in the sector.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Innovation strategies adopted by the company.'}]}], ['FinTechSearch.get_tech_suggestions', {'name': 'FinTechSearch.get_tech_suggestions', 'description': 'This function provides technological development suggestions for a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Suggestions for technological development in the sector.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinTechSearch.find_innovations` 并传入 `time_frame` 和 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinTechSearch.find_innovations\",\n    \"args\": \"{'time_frame': 'last_year', 'sector': 'consumer_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解中国消费金融贷款公司的技术创新。首先，获取最近一年内关于消费金融技术创新的案例分析。然后，获取2024年2月5日中国消费金融贷款公司的技术投资数据。接着，获取当前消费金融贷款公司的技术应用情况。最后，通过公司名称获取中国消费金融贷款公司的技术创新策略，并获取一些技术发展建议。"
            }
        ]
    },
    "71": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ComplianceCheck.get_regulations",
                "ComplianceCheck.fetch_audit_data",
                "ComplianceCheck.get_compliance_report",
                "ComplianceCheck.get_management_strategy",
                "ComplianceCheck.get_improvement_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ComplianceCheck.get_regulations",
                "args": "{\"period\": \"last_year\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ComplianceCheck.fetch_audit_data",
                "args": "{\"date\": \"2023-10-15\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ComplianceCheck.get_compliance_report",
                "args": "{\"sector\": \"consumer_finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ComplianceCheck.get_management_strategy",
                "args": "{\"company_name\": \"ABC_Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ComplianceCheck.get_improvement_suggestions",
                "args": "{\"company_name\": \"ABC_Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ComplianceCheck.get_regulations', {'name': 'ComplianceCheck.get_regulations', 'description': 'This function retrieves updated regulations for a specified period and sector.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for which regulations are needed, e.g., last_year, current_year.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector for which regulations are needed, e.g., consumer_finance, banking.'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': 'A list of updated regulations relevant to the specified period and sector.'}]}], ['ComplianceCheck.fetch_audit_data', {'name': 'ComplianceCheck.fetch_audit_data', 'description': 'This function fetches audit data for a specific date and sector.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which audit data is needed in YYYY-MM-DD format.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector for which audit data is needed.'}], 'optional_parameters': [], 'return_data': [{'name': 'audit_data', 'description': 'Detailed audit data for the specified date and sector.'}]}], ['ComplianceCheck.get_compliance_report', {'name': 'ComplianceCheck.get_compliance_report', 'description': 'This function retrieves the latest compliance report for a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which the compliance report is needed.'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_report', 'description': 'The latest compliance report for the specified sector.'}]}], ['ComplianceCheck.get_management_strategy', {'name': 'ComplianceCheck.get_management_strategy', 'description': 'This function retrieves the compliance management strategy for a specific company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company for which the management strategy is needed.'}], 'optional_parameters': [], 'return_data': [{'name': 'management_strategy', 'description': 'The compliance management strategy for the specified company.'}]}], ['ComplianceCheck.get_improvement_suggestions', {'name': 'ComplianceCheck.get_improvement_suggestions', 'description': 'This function provides suggestions for improving compliance for a specific company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company for which improvement suggestions are needed.'}], 'optional_parameters': [], 'return_data': [{'name': 'improvement_suggestions', 'description': 'Suggestions for improving compliance for the specified company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ComplianceCheck.get_regulations` 并传入 `period` 和 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ComplianceCheck.get_regulations\",\n    \"args\": \"{'period': 'last_year', 'sector': 'consumer_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估中国消费金融贷款公司的合规性。首先，获取过去一年内关于消费金融合规性的法规更新。然后，获取2023年10月15日中国消费金融贷款公司的合规检查数据。接着，获取当前消费金融贷款公司的合规性评估报告。最后，通过公司名称获取中国消费金融贷款公司的合规管理策略，并获取一些合规改进建议。"
            }
        ]
    },
    "72": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketResearch.fetch_recent_data",
                "MarketingActivity.get_activity_data",
                "MarketingEffectiveness.evaluate",
                "MarketingStrategy.get_by_company",
                "MarketingOptimization.suggest"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.fetch_recent_data",
                "args": "{\"period\": \"half_year\", \"topic\": \"consumer_finance_marketing_strategies\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketingActivity.get_activity_data",
                "args": "{\"date\": \"2024-03-10\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketingEffectiveness.evaluate",
                "args": "{\"sector\": \"consumer_finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketingStrategy.get_by_company",
                "args": "{\"company_name\": \"ABC_Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketingOptimization.suggest",
                "args": "{\"company_name\": \"ABC_Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketResearch.fetch_recent_data', {'name': 'MarketResearch.fetch_recent_data', 'description': 'This function fetches recent market research data based on a specified period and topic.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The period of time for which data is required, e.g., half_year, annual.'}, {'name': 'topic', 'type': 'STRING', 'description': 'The topic of the market research, e.g., consumer_finance_marketing_strategies.'}], 'optional_parameters': [], 'return_data': [{'name': 'research_data', 'description': 'A list of recent market research findings.'}]}], ['MarketingActivity.get_activity_data', {'name': 'MarketingActivity.get_activity_data', 'description': 'This function retrieves marketing activity data for a specific date and sector.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date of the marketing activities.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of the marketing activities, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'activity_data', 'description': 'Detailed data about the marketing activities on the specified date.'}]}], ['MarketingEffectiveness.evaluate', {'name': 'MarketingEffectiveness.evaluate', 'description': 'This function evaluates the effectiveness of marketing strategies in a specified sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'The sector for which marketing effectiveness is to be evaluated.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation_results', 'description': 'Results of the marketing effectiveness evaluation.'}]}], ['MarketingStrategy.get_by_company', {'name': 'MarketingStrategy.get_by_company', 'description': 'This function retrieves marketing strategies by company name.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'Marketing strategies employed by the company.'}]}], ['MarketingOptimization.suggest', {'name': 'MarketingOptimization.suggest', 'description': 'This function suggests marketing optimization strategies for a company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'optimization_suggestions', 'description': 'Suggestions for optimizing marketing strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `MarketResearch.fetch_recent_data` 并传入 `period` 和 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"MarketResearch.fetch_recent_data\",\n    \"args\": \"{'period': 'half_year', 'topic': 'consumer_finance_marketing_strategies'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要分析中国消费金融贷款公司的营销策略。首先，获取最近半年内关于消费金融营销策略的市场研究。然后，获取2024年3月10日中国消费金融贷款公司的营销活动数据。接着，获取当前消费金融贷款公司的营销效果评估。最后，通过公司名称获取中国消费金融贷款公司的营销策略，并获取一些营销优化建议。"
            }
        ]
    },
    "73": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceProductSearch.find_innovations",
                "FinanceProductSearch.get_product_details",
                "FinanceProductSearch.get_market_feedback",
                "FinanceProductSearch.get_innovation_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceProductSearch.find_innovations",
                "args": "{\"time_period\": \"past_year\", \"category\": \"consumer_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceProductSearch.get_product_details",
                "args": "{\"date\": \"2023-09-25\", \"company\": \"ChinaConsumerFinance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceProductSearch.get_market_feedback",
                "args": "{\"product_id\": 54321}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceProductSearch.get_innovation_strategy",
                "args": "{\"company_name\": \"ChinaConsumerFinance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceProductSearch.find_innovations', {'name': 'FinanceProductSearch.find_innovations', 'description': 'This function searches for innovative finance products based on time period and category.', 'required_parameters': [{'name': 'time_period', 'type': 'STRING', 'description': 'The time period to search within, e.g., past_year, last_quarter.'}, {'name': 'category', 'type': 'STRING', 'description': 'The category of finance products, e.g., consumer_finance, corporate_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'innovations', 'description': 'A list of up to three innovative products, each with an ID, name, and provider.'}]}], ['FinanceProductSearch.get_product_details', {'name': 'FinanceProductSearch.get_product_details', 'description': 'This function retrieves detailed information about a specific finance product given its date and company.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date when the product was launched.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company that launched the product.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the product, including features, terms, and conditions.'}]}], ['FinanceProductSearch.get_market_feedback', {'name': 'FinanceProductSearch.get_market_feedback', 'description': 'This function retrieves market feedback about a specific finance product given its ID.', 'required_parameters': [{'name': 'product_id', 'type': 'NUMBER', 'description': 'The ID of the finance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'feedback', 'description': 'Market feedback about the product, including customer reviews and ratings.'}]}], ['FinanceProductSearch.get_innovation_strategy', {'name': 'FinanceProductSearch.get_innovation_strategy', 'description': 'This function retrieves the innovation strategy of a specific finance company given its name.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the finance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'The innovation strategy of the company, including future plans and development suggestions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinanceProductSearch.find_innovations` 并传入 `time_period` 和 `category`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinanceProductSearch.find_innovations\",\n    \"args\": \"{'time_period': 'past_year', 'category': 'consumer_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的产品创新。首先，获取过去一年内关于消费金融产品创新的案例分析。然后，获取2023年9月25日中国消费金融贷款公司的产品推出数据。接着，获取当前消费金融贷款公司的产品市场反馈。最后，通过公司名称获取中国消费金融贷款公司的产品创新策略，并获取一些产品发展建议。"
            }
        ]
    },
    "74": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialAnalysis.get_recent_reports",
                "FinancialAnalysis.get_financial_data",
                "FinancialAnalysis.analyze_financial_metrics",
                "FinancialAnalysis.get_financial_strategy",
                "FinancialAnalysis.get_optimization_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialAnalysis.get_recent_reports",
                "args": "{\"year\": 2023, \"sector\": \"consumer finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialAnalysis.get_financial_data",
                "args": "{\"date\": \"2024-04-05\", \"company\": \"China Consumer Finance Co.\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialAnalysis.analyze_financial_metrics",
                "args": "{\"company\": \"China Consumer Finance Co.\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialAnalysis.get_financial_strategy",
                "args": "{\"company\": \"China Consumer Finance Co.\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinancialAnalysis.get_optimization_suggestions",
                "args": "{\"company\": \"China Consumer Finance Co.\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialAnalysis.get_recent_reports', {'name': 'FinancialAnalysis.get_recent_reports', 'description': 'This function retrieves recent financial analysis reports for a specified sector and year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which reports are needed.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of the financial analysis, e.g., consumer finance, banking.'}], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': 'A list of recent financial analysis reports.'}]}], ['FinancialAnalysis.get_financial_data', {'name': 'FinancialAnalysis.get_financial_data', 'description': 'This function retrieves financial data for a specific company on a given date.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which financial data is needed.'}, {'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'financial_data', 'description': 'Detailed financial data including balance sheet, income statement, and cash flow statement.'}]}], ['FinancialAnalysis.analyze_financial_metrics', {'name': 'FinancialAnalysis.analyze_financial_metrics', 'description': 'This function analyzes financial metrics for a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'metrics_analysis', 'description': 'An analysis of key financial metrics including liquidity, profitability, and solvency.'}]}], ['FinancialAnalysis.get_financial_strategy', {'name': 'FinancialAnalysis.get_financial_strategy', 'description': 'This function retrieves the financial management strategy of a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'financial_strategy', 'description': 'The financial management strategy of the company.'}]}], ['FinancialAnalysis.get_optimization_suggestions', {'name': 'FinancialAnalysis.get_optimization_suggestions', 'description': 'This function provides optimization suggestions for the financial management of a specified company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'optimization_suggestions', 'description': 'Suggestions for financial optimization and improvement.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialAnalysis.get_recent_reports` 并传入 `year` 和 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialAnalysis.get_recent_reports\",\n    \"args\": \"{'year': 2023, 'sector': 'consumer finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估中国消费金融贷款公司的财务健康。首先，获取最近一年内关于消费金融财务分析的报告。然后，获取2024年4月5日中国消费金融贷款公司的财务报表数据。接着，获取当前消费金融贷款公司的财务指标分析。最后，通过公司名称获取中国消费金融贷款公司的财务管理策略，并获取一些财务优化建议。"
            }
        ]
    },
    "75": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "HRManagement.get_best_practices",
                "HRManagement.fetch_data",
                "HRManagement.get_assessment_report",
                "HRManagement.get_strategies",
                "HRManagement.optimize_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "HRManagement.get_best_practices",
                "args": "{\"period\": \"last_six_months\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "HRManagement.fetch_data",
                "args": "{\"date\": \"2023-08-10\", \"company_type\": \"consumer_finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "HRManagement.get_assessment_report",
                "args": "{\"company_type\": \"consumer_finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "HRManagement.get_strategies",
                "args": "{\"company_name\": \"ABC Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "HRManagement.optimize_suggestions",
                "args": "{\"company_name\": \"ABC Finance\"}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['HRManagement.get_best_practices', {'name': 'HRManagement.get_best_practices', 'description': 'This function retrieves the best HR management practices for a specified period and sector.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'The time period for which to retrieve practices, e.g., last_six_months.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'practices', 'description': 'A list of best practices relevant to the specified period and sector.'}]}], ['HRManagement.fetch_data', {'name': 'HRManagement.fetch_data', 'description': 'This function fetches HR data for a specific date and company type.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The date for which to fetch data, in YYYY-MM-DD format.'}, {'name': 'company_type', 'type': 'STRING', 'description': 'The type of company, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'HR data for the specified date and company type.'}]}], ['HRManagement.get_assessment_report', {'name': 'HRManagement.get_assessment_report', 'description': 'This function retrieves the HR assessment report for a specified company type.', 'required_parameters': [{'name': 'company_type', 'type': 'STRING', 'description': 'The type of company, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The HR assessment report for the specified company type.'}]}], ['HRManagement.get_strategies', {'name': 'HRManagement.get_strategies', 'description': 'This function retrieves HR strategies for a specified company name.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'HR strategies for the specified company.'}]}], ['HRManagement.optimize_suggestions', {'name': 'HRManagement.optimize_suggestions', 'description': 'This function provides optimization suggestions for HR management based on a specified company name.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'Optimization suggestions for HR management.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `HRManagement.get_best_practices` 并传入 `period` 和 `sector`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"HRManagement.get_best_practices\",\n    \"args\": \"{'period': 'last_six_months', 'sector': 'consumer_finance'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析中国消费金融贷款公司的人力资源管理。首先，获取过去半年内关于消费金融人力资源管理的最佳实践。然后，获取2023年8月10日中国消费金融贷款公司的人力资源数据。接着，获取当前消费金融贷款公司的人力资源评估报告。最后，通过公司名称获取中国消费金融贷款公司的人力资源策略，并获取一些人力资源优化建议。"
            }
        ]
    },
    "76": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialResearch.find_case_studies",
                "FinancialResearch.get_activity_data",
                "FinancialResearch.get_assessment_report",
                "FinancialResearch.get_strategy_and_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialResearch.find_case_studies",
                "args": "{\"topic\": \"consumer_finance_social_responsibility\", \"time_frame\": \"last_year\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialResearch.get_activity_data",
                "args": "{\"date\": \"2024-05-20\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialResearch.get_assessment_report",
                "args": "{\"current_date\": \"2024-05-21\", \"sector\": \"consumer_finance\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialResearch.get_strategy_and_suggestions",
                "args": "{\"company_name\": \"ABC Consumer Finance\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialResearch.find_case_studies', {'name': 'FinancialResearch.find_case_studies', 'description': 'This function searches for case studies based on a specific topic and time frame.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the case study, e.g., consumer_finance_social_responsibility.'}, {'name': 'time_frame', 'type': 'STRING', 'description': 'The time frame for the case studies, e.g., last_year.'}], 'optional_parameters': [], 'return_data': [{'name': 'case_studies', 'description': 'A list of relevant case studies.'}]}], ['FinancialResearch.get_activity_data', {'name': 'FinancialResearch.get_activity_data', 'description': 'This function retrieves activity data for a specific date and sector.', 'required_parameters': [{'name': 'date', 'type': 'STRING', 'description': 'The specific date for the activity data.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'activity_data', 'description': 'Detailed activity data for the specified date and sector.'}]}], ['FinancialResearch.get_assessment_report', {'name': 'FinancialResearch.get_assessment_report', 'description': 'This function retrieves the latest assessment report for a specific sector.', 'required_parameters': [{'name': 'current_date', 'type': 'STRING', 'description': 'The current date for which the report is valid.'}, {'name': 'sector', 'type': 'STRING', 'description': 'The sector of interest, e.g., consumer_finance.'}], 'optional_parameters': [], 'return_data': [{'name': 'assessment_report', 'description': 'The latest assessment report for the specified sector.'}]}], ['FinancialResearch.get_strategy_and_suggestions', {'name': 'FinancialResearch.get_strategy_and_suggestions', 'description': 'This function retrieves the social responsibility strategy and suggestions for a specific company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_and_suggestions', 'description': 'The social responsibility strategy and suggestions for the specified company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FinancialResearch.find_case_studies` 并传入 `topic` 和 `time_frame`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FinancialResearch.find_case_studies\",\n    \"args\": \"{'topic': 'consumer_finance_social_responsibility', 'time_frame': 'last_year'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解中国消费金融贷款公司的社会责任。首先，获取最近一年内关于消费金融社会责任的案例研究。然后，获取2024年5月20日中国消费金融贷款公司的社会责任活动数据。接着，获取当前消费金融贷款公司的社会责任评估报告。最后，通过公司名称获取中国消费金融贷款公司的社会责任策略，并获取一些社会责任建议。"
            }
        ]
    },
    "77": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InvestmentStrategy.fetch_articles",
                "GoldPrice.get_historical_data",
                "GoldPrice.get_real_time_data",
                "InvestmentAdvisor.get_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InvestmentStrategy.fetch_articles",
                "args": "{\"topic\": \"retirement investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GoldPrice.get_historical_data",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GoldPrice.get_real_time_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvisor.get_advice",
                "args": "{\"portfolio_name\": \"retirement portfolio\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InvestmentStrategy.fetch_articles', {'name': 'InvestmentStrategy.fetch_articles', 'description': 'This function fetches articles on a specific investment topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['GoldPrice.get_historical_data', {'name': 'GoldPrice.get_historical_data', 'description': 'This function retrieves historical gold price data for a specific year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which to fetch the data.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'Historical gold prices for the specified year.'}]}], ['GoldPrice.get_real_time_data', {'name': 'GoldPrice.get_real_time_data', 'description': 'This function retrieves real-time gold market data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'current_price', 'description': 'The current market price of gold.'}]}], ['InvestmentAdvisor.get_advice', {'name': 'InvestmentAdvisor.get_advice', 'description': 'This function provides professional investment advice based on a portfolio name.', 'required_parameters': [{'name': 'portfolio_name', 'type': 'STRING', 'description': 'The name of the investment portfolio.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Professional investment advice for the specified portfolio.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `InvestmentStrategy.fetch_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"InvestmentStrategy.fetch_articles\",\n    \"args\": \"{'topic': 'retirement investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在规划我的退休投资组合。首先，我需要获取最新的关于退休投资策略的5篇文章。然后，获取2023年全年黄金价格的历史数据。接着，获取当前的黄金实时市场数据。最后，通过投资组合名称获取一些专业的退休投资建议。"
            }
        ]
    },
    "78": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PensionResearch.find_articles",
                "PensionResearch.get_historical_data",
                "PensionResearch.get_real_time_data",
                "PensionResearch.get_country_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PensionResearch.find_articles",
                "args": "{\"topic\": \"global retirement pension systems\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PensionResearch.get_historical_data",
                "args": "{\"country\": \"USA\", \"time_period\": \"Q1 2024\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PensionResearch.get_real_time_data",
                "args": "{\"country\": \"USA\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PensionResearch.get_country_advice",
                "args": "{\"country\": \"USA\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PensionResearch.find_articles', {'name': 'PensionResearch.find_articles', 'description': 'This function searches for research articles on specified pension topics.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles, e.g., global retirement pension systems.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three relevant research articles.'}]}], ['PensionResearch.get_historical_data', {'name': 'PensionResearch.get_historical_data', 'description': 'This function retrieves historical data for a specified country and time period.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which data is requested.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The specific time period for the data, e.g., Q1 2024.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified country and time period.'}]}], ['PensionResearch.get_real_time_data', {'name': 'PensionResearch.get_real_time_data', 'description': 'This function retrieves current real-time data for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which real-time data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_data', 'description': 'Current real-time data for the specified country.'}]}], ['PensionResearch.get_country_advice', {'name': 'PensionResearch.get_country_advice', 'description': 'This function provides advice on pension systems for a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country for which advice is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Advice on the pension system for the specified country.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `PensionResearch.find_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"PensionResearch.find_articles\",\n    \"args\": \"{'topic': 'global retirement pension systems'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "为了确保我的退休生活质量，我需要评估不同国家的退休金制度。首先，获取3篇关于全球退休金制度比较的研究文章。然后，获取2024年第一季度美国社保基金的历史数据。接着，获取美国社保基金的当前实时数据。最后，通过国家名称获取一些关于退休金制度的建议。"
            }
        ]
    },
    "79": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateInvestment.fetch_articles",
                "RealEstateInvestment.get_historical_data",
                "RealEstateInvestment.get_current_market_data",
                "RealEstateInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateInvestment.fetch_articles",
                "args": "{\"topic\": \"retirement real estate investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"cities\": [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateInvestment.get_current_market_data",
                "args": "{\"cities\": [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateInvestment.get_investment_advice",
                "args": "{\"city\": \"New York\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateInvestment.fetch_articles', {'name': 'RealEstateInvestment.fetch_articles', 'description': 'This function fetches the latest articles on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement real estate investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles with title, summary, and source.'}]}], ['RealEstateInvestment.get_historical_data', {'name': 'RealEstateInvestment.get_historical_data', 'description': 'This function retrieves historical housing data for specified cities and a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical housing data including average prices and trends.'}]}], ['RealEstateInvestment.get_current_market_data', {'name': 'RealEstateInvestment.get_current_market_data', 'description': 'This function retrieves current real estate market data for specified cities.', 'required_parameters': [{'name': 'cities', 'type': 'ARRAY', 'description': 'An array of city names.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_data', 'description': 'Current market data including average prices and trends.'}]}], ['RealEstateInvestment.get_investment_advice', {'name': 'RealEstateInvestment.get_investment_advice', 'description': 'This function provides investment advice for a specified city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'The name of the city.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice including potential returns and risks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RealEstateInvestment.fetch_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RealEstateInvestment.fetch_articles\",\n    \"args\": \"{'topic': 'retirement real estate investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我计划通过房地产投资来增加退休收入。首先，我需要获取5篇关于退休房地产投资的最新文章。然后，获取2023年全年美国主要城市房价的历史数据。接着，获取当前的美国房地产实时市场数据。最后，通过城市名称获取一些房地产投资建议。"
            }
        ]
    },
    "80": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchArticles.fetch_articles",
                "InsuranceData.get_historical_data",
                "MarketData.get_real_time_data",
                "InsuranceAdvice.get_purchase_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchArticles.fetch_articles",
                "args": "{\"topic\": \"annuity insurance\", \"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceData.get_historical_data",
                "args": "{\"year\": 2024, \"productType\": \"annuity\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketData.get_real_time_data",
                "args": "{\"productType\": \"annuity\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceAdvice.get_purchase_advice",
                "args": "{\"companyName\": \"Major Insurance Co.\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchArticles.fetch_articles', {'name': 'ResearchArticles.fetch_articles', 'description': 'This function fetches research articles based on a specified topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research articles, e.g., annuity insurance.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the research articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of research articles matching the topic and year.'}]}], ['InsuranceData.get_historical_data', {'name': 'InsuranceData.get_historical_data', 'description': 'This function retrieves historical data for insurance products of a specified type and year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}, {'name': 'productType', 'type': 'STRING', 'description': 'The type of insurance product, e.g., annuity.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified insurance product type and year.'}]}], ['MarketData.get_real_time_data', {'name': 'MarketData.get_real_time_data', 'description': 'This function retrieves real-time market data for a specified type of insurance product.', 'required_parameters': [{'name': 'productType', 'type': 'STRING', 'description': 'The type of insurance product, e.g., annuity.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified insurance product type.'}]}], ['InsuranceAdvice.get_purchase_advice', {'name': 'InsuranceAdvice.get_purchase_advice', 'description': 'This function provides purchase advice for insurance products based on the company name.', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': 'The name of the insurance company.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Purchase advice for the specified insurance company.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ResearchArticles.fetch_articles` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ResearchArticles.fetch_articles\",\n    \"args\": \"{'topic': 'annuity insurance', 'year': 2023}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑购买年金保险作为退休保障。首先，获取3篇关于年金保险的最新研究文章。然后，获取2024年全年主要保险公司年金产品的历史数据。接着，获取当前的年金保险实时市场数据。最后，通过保险公司名称获取一些年金保险购买建议。"
            }
        ]
    },
    "81": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "StockInvestment.get_articles",
                "StockInvestment.get_historical_data",
                "StockInvestment.get_real_time_data",
                "StockInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "StockInvestment.get_articles",
                "args": "{\"topic\": \"retirement stock investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockInvestment.get_historical_data",
                "args": "{\"index\": \"S&P 500\", \"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockInvestment.get_real_time_data",
                "args": "{\"index\": \"S&P 500\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockInvestment.get_investment_advice",
                "args": "{\"index\": \"S&P 500\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['StockInvestment.get_articles', {'name': 'StockInvestment.get_articles', 'description': 'This function retrieves the latest articles on a specified topic related to stock investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest for the articles, e.g., retirement stock investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five relevant articles.'}]}], ['StockInvestment.get_historical_data', {'name': 'StockInvestment.get_historical_data', 'description': 'This function fetches historical data for a specified stock index over a given year.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The name of the stock index, e.g., S&P 500.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified index and year.'}]}], ['StockInvestment.get_real_time_data', {'name': 'StockInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for a specified stock index.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The name of the stock index, e.g., S&P 500.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified index.'}]}], ['StockInvestment.get_investment_advice', {'name': 'StockInvestment.get_investment_advice', 'description': 'This function provides investment advice based on a specified stock index.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The name of the stock index, e.g., S&P 500.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice based on the specified index.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `StockInvestment.get_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"StockInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement stock investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过股票投资来增加退休金。首先，获取5篇关于退休股票投资的最新文章。然后，获取2023年全年标普500指数的历史数据。接着，获取当前的标普500实时市场数据。最后，通过指数名称获取一些股票投资建议。"
            }
        ]
    },
    "82": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondInvestment.search_articles",
                "BondInvestment.get_historical_data",
                "BondInvestment.get_real_time_data",
                "BondInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondInvestment.search_articles",
                "args": "{\"topic\": \"retirement bond investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondInvestment.get_historical_data",
                "args": "{\"year\": 2024, \"country\": \"USA\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BondInvestment.get_real_time_data",
                "args": "{\"country\": \"USA\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BondInvestment.get_investment_advice",
                "args": "{\"bond_type\": \"US Treasury Bonds\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondInvestment.search_articles', {'name': 'BondInvestment.search_articles', 'description': 'This function searches for the latest articles on a specific topic related to bond investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., retirement bond investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three latest articles on the specified topic.'}]}], ['BondInvestment.get_historical_data', {'name': 'BondInvestment.get_historical_data', 'description': 'This function retrieves historical data for bonds over a specified year and country.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}, {'name': 'country', 'type': 'STRING', 'description': 'The country whose bonds are of interest.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified year and country.'}]}], ['BondInvestment.get_real_time_data', {'name': 'BondInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for bonds of a specified country.', 'required_parameters': [{'name': 'country', 'type': 'STRING', 'description': 'The country whose real-time bond data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified country.'}]}], ['BondInvestment.get_investment_advice', {'name': 'BondInvestment.get_investment_advice', 'description': 'This function provides investment advice based on the type of bond.', 'required_parameters': [{'name': 'bond_type', 'type': 'STRING', 'description': 'The type of bond for which advice is sought, e.g., US Treasury Bonds.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified type of bond.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `BondInvestment.search_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"BondInvestment.search_articles\",\n    \"args\": \"{'topic': 'retirement bond investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过债券投资来稳定我的退休收入。首先，获取3篇关于退休债券投资的最新文章。然后，获取2024年全年美国国债的历史数据。接着，获取当前的美国国债实时市场数据。最后，通过债券类型获取一些债券投资建议。"
            }
        ]
    },
    "83": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FundInvestment.get_articles",
                "FundInvestment.get_historical_data",
                "FundInvestment.get_real_time_data",
                "FundInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FundInvestment.get_articles",
                "args": "{\"topic\": \"retirement fund investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FundInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"fund_types\": [\"equity\", \"bond\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FundInvestment.get_real_time_data",
                "args": "{\"fund_names\": [\"Vanguard Total Stock Market Index Fund\", \"Fidelity Total Bond Fund\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FundInvestment.get_investment_advice",
                "args": "{\"fund_names\": [\"Vanguard Total Stock Market Index Fund\", \"Fidelity Total Bond Fund\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FundInvestment.get_articles', {'name': 'FundInvestment.get_articles', 'description': 'This function retrieves the latest articles on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement fund investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles with titles and URLs.'}]}], ['FundInvestment.get_historical_data', {'name': 'FundInvestment.get_historical_data', 'description': 'This function retrieves historical data for specified fund types over a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'fund_types', 'type': 'ARRAY', 'description': 'An array of fund types, e.g., equity, bond.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified fund types.'}]}], ['FundInvestment.get_real_time_data', {'name': 'FundInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for specified funds.', 'required_parameters': [{'name': 'fund_names', 'type': 'ARRAY', 'description': 'An array of fund names.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_data', 'description': 'Real-time market data for the specified funds.'}]}], ['FundInvestment.get_investment_advice', {'name': 'FundInvestment.get_investment_advice', 'description': 'This function provides investment advice based on specified fund names.', 'required_parameters': [{'name': 'fund_names', 'type': 'ARRAY', 'description': 'An array of fund names.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified funds.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `FundInvestment.get_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"FundInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement fund investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过基金投资来增加退休金。首先，获取5篇关于退休基金投资的最新文章。然后，获取2023年全年主要基金的历史数据。接着，获取当前的基金实时市场数据。最后，通过基金名称获取一些基金投资建议。"
            }
        ]
    },
    "84": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RetirementInvestment.fetch_articles",
                "RetirementInvestment.get_historical_data",
                "RetirementInvestment.get_real_time_data",
                "RetirementInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RetirementInvestment.fetch_articles",
                "args": "{\"topic\": \"retirement forex investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetirementInvestment.get_historical_data",
                "args": "{\"year\": 2024, \"currency_pairs\": [\"EUR/USD\", \"USD/JPY\", \"GBP/USD\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RetirementInvestment.get_real_time_data",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"USD/JPY\", \"GBP/USD\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RetirementInvestment.get_investment_advice",
                "args": "{\"currency_pairs\": [\"EUR/USD\", \"USD/JPY\", \"GBP/USD\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RetirementInvestment.fetch_articles', {'name': 'RetirementInvestment.fetch_articles', 'description': 'This function fetches the latest articles on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement forex investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three latest articles on the specified topic.'}]}], ['RetirementInvestment.get_historical_data', {'name': 'RetirementInvestment.get_historical_data', 'description': 'This function retrieves historical data for specified currency pairs for a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}, {'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs.'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': 'Historical data for the specified currency pairs for the given year.'}]}], ['RetirementInvestment.get_real_time_data', {'name': 'RetirementInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for specified currency pairs.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs.'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_data', 'description': 'Real-time market data for the specified currency pairs.'}]}], ['RetirementInvestment.get_investment_advice', {'name': 'RetirementInvestment.get_investment_advice', 'description': 'This function provides investment advice based on specified currency pairs.', 'required_parameters': [{'name': 'currency_pairs', 'type': 'ARRAY', 'description': 'An array of currency pairs.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified currency pairs.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `RetirementInvestment.fetch_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"RetirementInvestment.fetch_articles\",\n    \"args\": \"{'topic': 'retirement forex investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过外汇投资来增加退休收入。首先，获取3篇关于退休外汇投资的最新文章。然后，获取2024年全年主要货币对的历史数据。接着，获取当前的外汇实时市场数据。最后，通过货币对名称获取一些外汇投资建议。"
            }
        ]
    },
    "85": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoInvestment.get_articles",
                "CryptoInvestment.get_historical_data",
                "CryptoInvestment.get_real_time_data",
                "CryptoInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoInvestment.get_articles",
                "args": "{\"topic\": \"retirement_crypto_investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoInvestment.get_historical_data",
                "args": "{\"currency\": \"Bitcoin\", \"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoInvestment.get_real_time_data",
                "args": "{\"currency\": \"Bitcoin\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoInvestment.get_investment_advice",
                "args": "{\"currency\": \"Bitcoin\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoInvestment.get_articles', {'name': 'CryptoInvestment.get_articles', 'description': 'This function retrieves articles on a specific topic related to cryptocurrency investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement_crypto_investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['CryptoInvestment.get_historical_data', {'name': 'CryptoInvestment.get_historical_data', 'description': 'This function retrieves historical data for a specific cryptocurrency over a given year.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified cryptocurrency and year.'}]}], ['CryptoInvestment.get_real_time_data', {'name': 'CryptoInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for a specific cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified cryptocurrency.'}]}], ['CryptoInvestment.get_investment_advice', {'name': 'CryptoInvestment.get_investment_advice', 'description': 'This function provides investment advice for a specific cryptocurrency.', 'required_parameters': [{'name': 'currency', 'type': 'STRING', 'description': 'The name of the cryptocurrency, e.g., Bitcoin.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified cryptocurrency.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CryptoInvestment.get_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CryptoInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement_crypto_investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过加密货币投资来增加退休金。首先，获取5篇关于退休加密货币投资的最新文章。然后，获取2023年全年比特币的历史数据。接着，获取当前的比特币实时市场数据。最后，通过加密货币名称获取一些加密货币投资建议。"
            }
        ]
    },
    "86": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ArtInvestment.search_articles",
                "ArtInvestment.get_historical_data",
                "ArtInvestment.get_real_time_data",
                "ArtInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArtInvestment.search_articles",
                "args": "{\"topic\": \"retirement art investment\", \"year\": 2024}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ArtInvestment.get_historical_data",
                "args": "{\"year\": 2024}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ArtInvestment.get_real_time_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ArtInvestment.get_investment_advice",
                "args": "{\"type\": \"art\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ArtInvestment.search_articles', {'name': 'ArtInvestment.search_articles', 'description': 'This function searches for articles related to a specific topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement art investment.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching articles.'}]}], ['ArtInvestment.get_historical_data', {'name': 'ArtInvestment.get_historical_data', 'description': 'This function retrieves historical data for major artworks for a specific year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the year, including prices and trends.'}]}], ['ArtInvestment.get_real_time_data', {'name': 'ArtInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for artworks.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_data', 'description': 'Real-time market data, including current prices and trends.'}]}], ['ArtInvestment.get_investment_advice', {'name': 'ArtInvestment.get_investment_advice', 'description': 'This function provides investment advice based on the type of artwork.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of artwork, e.g., painting, sculpture.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified type of artwork.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ArtInvestment.search_articles` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ArtInvestment.search_articles\",\n    \"args\": \"{'topic': 'retirement art investment', 'year': 2024}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过艺术品投资来增加退休收入。首先，获取3篇关于退休艺术品投资的最新文章。然后，获取2024年全年主要艺术品的历史数据。接着，获取当前的艺术品实时市场数据。最后，通过艺术品类型获取一些艺术品投资建议。"
            }
        ]
    },
    "87": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PrivateEquityInvestment.get_articles",
                "PrivateEquityInvestment.get_historical_data",
                "PrivateEquityInvestment.get_market_data",
                "PrivateEquityInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PrivateEquityInvestment.get_articles",
                "args": "{\"topic\": \"retirement private equity investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PrivateEquityInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"type\": \"main private equity funds\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PrivateEquityInvestment.get_market_data",
                "args": "{\"type\": \"real-time\", \"category\": \"private equity\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PrivateEquityInvestment.get_investment_advice",
                "args": "{\"fundName\": \"example fund\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PrivateEquityInvestment.get_articles', {'name': 'PrivateEquityInvestment.get_articles', 'description': 'This function retrieves articles on a specific topic, up to a specified count.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement private equity investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['PrivateEquityInvestment.get_historical_data', {'name': 'PrivateEquityInvestment.get_historical_data', 'description': 'This function retrieves historical data for a specified year and type of funds.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which data is requested.'}, {'name': 'type', 'type': 'STRING', 'description': 'The type of funds, e.g., main private equity funds.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified year and type of funds.'}]}], ['PrivateEquityInvestment.get_market_data', {'name': 'PrivateEquityInvestment.get_market_data', 'description': 'This function retrieves real-time market data for a specified category.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of data, e.g., real-time.'}, {'name': 'category', 'type': 'STRING', 'description': 'The category of data, e.g., private equity.'}], 'optional_parameters': [], 'return_data': [{'name': 'marketData', 'description': 'Real-time market data for the specified category.'}]}], ['PrivateEquityInvestment.get_investment_advice', {'name': 'PrivateEquityInvestment.get_investment_advice', 'description': 'This function provides investment advice based on a specified fund name.', 'required_parameters': [{'name': 'fundName', 'type': 'STRING', 'description': 'The name of the fund for which advice is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified fund.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `PrivateEquityInvestment.get_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"PrivateEquityInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement private equity investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过私募股权投资来增加退休金。首先，获取5篇关于退休私募股权投资的最新文章。然后，获取2023年全年主要私募股权基金的历史数据。接着，获取当前的私募股权实时市场数据。最后，通过基金名称获取一些私募股权投资建议。"
            }
        ]
    },
    "88": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CommodityInvestment.search_articles",
                "CommodityInvestment.get_historical_data",
                "CommodityInvestment.get_real_time_data",
                "CommodityInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CommodityInvestment.search_articles",
                "args": "{\"topic\": \"retirement commodity investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CommodityInvestment.get_historical_data",
                "args": "{\"year\": 2024, \"commodity_types\": [\"gold\", \"oil\", \"silver\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CommodityInvestment.get_real_time_data",
                "args": "{\"commodity_types\": [\"gold\", \"oil\", \"silver\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CommodityInvestment.get_investment_advice",
                "args": "{\"commodity_types\": [\"gold\", \"oil\", \"silver\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CommodityInvestment.search_articles', {'name': 'CommodityInvestment.search_articles', 'description': 'This function searches for articles related to a specific topic in commodity investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., retirement commodity investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three relevant articles.'}]}], ['CommodityInvestment.get_historical_data', {'name': 'CommodityInvestment.get_historical_data', 'description': 'This function retrieves historical data for specified commodities over a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'commodity_types', 'type': 'ARRAY', 'description': 'An array of commodity types.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified commodities.'}]}], ['CommodityInvestment.get_real_time_data', {'name': 'CommodityInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for specified commodities.', 'required_parameters': [{'name': 'commodity_types', 'type': 'ARRAY', 'description': 'An array of commodity types.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified commodities.'}]}], ['CommodityInvestment.get_investment_advice', {'name': 'CommodityInvestment.get_investment_advice', 'description': 'This function provides investment advice for specified commodities.', 'required_parameters': [{'name': 'commodity_types', 'type': 'ARRAY', 'description': 'An array of commodity types.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified commodities.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CommodityInvestment.search_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CommodityInvestment.search_articles\",\n    \"args\": \"{'topic': 'retirement commodity investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过大宗商品投资来增加退休收入。首先，获取3篇关于退休大宗商品投资的最新文章。然后，获取2024年全年主要大宗商品的历史数据。接着，获取当前的大宗商品实时市场数据。最后，通过商品类型获取一些大宗商品投资建议。"
            }
        ]
    },
    "89": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "REITsInvestment.get_articles",
                "REITsInvestment.get_historical_data",
                "REITsInvestment.get_real_time_data",
                "REITsInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "REITsInvestment.get_articles",
                "args": "{\"topic\": \"retirement REITs investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "REITsInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"type\": \"main REITs\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "REITsInvestment.get_real_time_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "REITsInvestment.get_investment_advice",
                "args": "{\"REITsNames\": [\"REIT1\", \"REIT2\", \"REIT3\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['REITsInvestment.get_articles', {'name': 'REITsInvestment.get_articles', 'description': 'This function retrieves articles on a specific topic related to REITs investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement REITs investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to retrieve.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['REITsInvestment.get_historical_data', {'name': 'REITsInvestment.get_historical_data', 'description': 'This function retrieves historical data for REITs over a specified period.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}, {'name': 'type', 'type': 'STRING', 'description': 'The type of REITs, e.g., main REITs.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified REITs.'}]}], ['REITsInvestment.get_real_time_data', {'name': 'REITsInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for REITs.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'realTimeData', 'description': 'Real-time market data for REITs.'}]}], ['REITsInvestment.get_investment_advice', {'name': 'REITsInvestment.get_investment_advice', 'description': 'This function provides investment advice for specified REITs.', 'required_parameters': [{'name': 'REITsNames', 'type': 'ARRAY', 'description': 'An array of REITs names for which advice is sought.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified REITs.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `REITsInvestment.get_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"REITsInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement REITs investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过REITs投资来增加退休金。首先，获取5篇关于退休REITs投资的最新文章。然后，获取2023年全年主要REITs的历史数据。接着，获取当前的REITs实时市场数据。最后，通过REITs名称获取一些REITs投资建议。"
            }
        ]
    },
    "91": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PensionPlanSearch.find_plans",
                "PensionPlanSearch.get_plan_details",
                "PensionPlanSearch.get_historical_data",
                "PensionPlanSearch.get_market_data",
                "PensionPlanSearch.get_plan_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PensionPlanSearch.find_plans",
                "args": "{\"type\": \"retirement\", \"location\": \"California\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PensionPlanSearch.get_plan_details",
                "args": "{\"planId\": 54321}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PensionPlanSearch.get_historical_data",
                "args": "{\"planId\": 54321, \"year\": 2023}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PensionPlanSearch.get_market_data",
                "args": "{\"planId\": 54321}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "PensionPlanSearch.get_plan_recommendations",
                "args": "{\"planId\": 54321}"
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PensionPlanSearch.find_plans', {'name': 'PensionPlanSearch.find_plans', 'description': 'This function searches for pension plans based on type and location.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'The type of pension plan, e.g., retirement, corporate.'}, {'name': 'location', 'type': 'STRING', 'description': 'The location where the plan will be applied.'}], 'optional_parameters': [], 'return_data': [{'name': 'plans', 'description': 'A list of up to three matching pension plans, each with an ID, type, and provider.'}]}], ['PensionPlanSearch.get_plan_details', {'name': 'PensionPlanSearch.get_plan_details', 'description': 'This function retrieves detailed information about a specific pension plan given its ID.', 'required_parameters': [{'name': 'planId', 'type': 'NUMBER', 'description': 'The ID of the pension plan.'}], 'optional_parameters': [], 'return_data': [{'name': 'details', 'description': 'Detailed information about the plan, including benefits, contributions, and terms.'}]}], ['PensionPlanSearch.get_historical_data', {'name': 'PensionPlanSearch.get_historical_data', 'description': 'This function retrieves historical data for a specific pension plan for a given year.', 'required_parameters': [{'name': 'planId', 'type': 'NUMBER', 'description': 'The ID of the pension plan.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'historicalData', 'description': 'Historical data for the plan, including performance and contributions.'}]}], ['PensionPlanSearch.get_market_data', {'name': 'PensionPlanSearch.get_market_data', 'description': 'This function retrieves real-time market data for a specific pension plan.', 'required_parameters': [{'name': 'planId', 'type': 'NUMBER', 'description': 'The ID of the pension plan.'}], 'optional_parameters': [], 'return_data': [{'name': 'marketData', 'description': 'Real-time market data for the plan, including current performance and trends.'}]}], ['PensionPlanSearch.get_plan_recommendations', {'name': 'PensionPlanSearch.get_plan_recommendations', 'description': 'This function provides recommendations for a specific pension plan based on its ID.', 'required_parameters': [{'name': 'planId', 'type': 'NUMBER', 'description': 'The ID of the pension plan.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Recommendations for the plan, including potential improvements and alternatives.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `PensionPlanSearch.find_plans` 并传入 `type` 和 `location`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"PensionPlanSearch.find_plans\",\n    \"args\": \"{'type': 'retirement', 'location': 'California'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过养老金计划来增加退休金。首先，获取5篇关于退休养老金计划的最新文章。然后，获取2023年全年主要养老金计划的历史数据。接着，获取当前的养老金计划实时市场数据。最后，通过计划名称获取一些养老金计划建议。"
            }
        ]
    },
    "92": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CharitySearch.find_articles",
                "CharitySearch.get_historical_data",
                "CharitySearch.get_market_data",
                "CharitySearch.get_donation_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CharitySearch.find_articles",
                "args": "{\"topic\": \"retirement charity donation\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CharitySearch.get_historical_data",
                "args": "{\"year\": 2024}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CharitySearch.get_market_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CharitySearch.get_donation_advice",
                "args": "{\"institutionName\": \"Global Charity Fund\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CharitySearch.find_articles', {'name': 'CharitySearch.find_articles', 'description': 'This function searches for articles based on a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement charity donation.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching articles.'}]}], ['CharitySearch.get_historical_data', {'name': 'CharitySearch.get_historical_data', 'description': 'This function retrieves historical data for major charities for a specific year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified year.'}]}], ['CharitySearch.get_market_data', {'name': 'CharitySearch.get_market_data', 'description': 'This function retrieves real-time market data for charities.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'marketData', 'description': 'Real-time market data for charities.'}]}], ['CharitySearch.get_donation_advice', {'name': 'CharitySearch.get_donation_advice', 'description': 'This function provides donation advice based on the name of a charity institution.', 'required_parameters': [{'name': 'institutionName', 'type': 'STRING', 'description': 'The name of the charity institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Donation advice for the specified institution.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `CharitySearch.find_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"CharitySearch.find_articles\",\n    \"args\": \"{'topic': 'retirement charity donation'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过慈善捐赠来规划我的退休生活。首先，获取3篇关于退休慈善捐赠的最新文章。然后，获取2024年全年主要慈善机构的历史数据。接着，获取当前的慈善机构实时市场数据。最后，通过机构名称获取一些慈善捐赠建议。"
            }
        ]
    },
    "93": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EducationInvestment.fetch_articles",
                "EducationInvestment.get_historical_data",
                "EducationInvestment.get_real_time_data",
                "EducationInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EducationInvestment.fetch_articles",
                "args": "{\"topic\": \"retirement education investment\", \"count\": 5}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EducationInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"institutions\": \"all\"}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EducationInvestment.get_real_time_data",
                "args": "{\"institutions\": \"current\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "EducationInvestment.get_investment_advice",
                "args": "{\"institution_names\": [\"Harvard\", \"MIT\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EducationInvestment.fetch_articles', {'name': 'EducationInvestment.fetch_articles', 'description': 'This function fetches articles on a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement education investment.'}, {'name': 'count', 'type': 'NUMBER', 'description': 'The number of articles to fetch.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of articles matching the topic.'}]}], ['EducationInvestment.get_historical_data', {'name': 'EducationInvestment.get_historical_data', 'description': 'This function retrieves historical data for educational institutions for a specific year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'institutions', 'type': 'STRING', 'description': 'The institutions for which data is requested, e.g., all or specific names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified institutions.'}]}], ['EducationInvestment.get_real_time_data', {'name': 'EducationInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for educational institutions.', 'required_parameters': [{'name': 'institutions', 'type': 'STRING', 'description': 'The institutions for which real-time data is requested, e.g., current or specific names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified institutions.'}]}], ['EducationInvestment.get_investment_advice', {'name': 'EducationInvestment.get_investment_advice', 'description': 'This function provides investment advice based on institution names.', 'required_parameters': [{'name': 'institution_names', 'type': 'ARRAY', 'description': 'An array of institution names for which advice is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified institutions.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `EducationInvestment.fetch_articles` 并传入 `topic` 和 `count`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"EducationInvestment.fetch_articles\",\n    \"args\": \"{'topic': 'retirement education investment', 'count': 5}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过教育投资来增加退休金。首先，获取5篇关于退休教育投资的最新文章。然后，获取2023年全年主要教育机构的历史数据。接着，获取当前的教育机构实时市场数据。最后，通过机构名称获取一些教育投资建议。"
            }
        ]
    },
    "94": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ArticleSearch.find_articles",
                "DataRetrieval.get_historical_data",
                "MarketData.get_realtime_data",
                "InvestmentAdvice.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArticleSearch.find_articles",
                "args": "{\"topic\": \"retirement health investment\", \"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataRetrieval.get_historical_data",
                "args": "{\"product_type\": \"health\", \"year\": 2024}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketData.get_realtime_data",
                "args": "{\"product_type\": \"health\"}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.get_recommendations",
                "args": "{\"product_type\": \"health\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ArticleSearch.find_articles', {'name': 'ArticleSearch.find_articles', 'description': 'This function searches for articles based on a specific topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles to search for.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching articles, each with a title, summary, and URL.'}]}], ['DataRetrieval.get_historical_data', {'name': 'DataRetrieval.get_historical_data', 'description': 'This function retrieves historical data for a specific product type and year.', 'required_parameters': [{'name': 'product_type', 'type': 'STRING', 'description': 'The type of product, e.g., health, technology.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified product type and year.'}]}], ['MarketData.get_realtime_data', {'name': 'MarketData.get_realtime_data', 'description': 'This function retrieves real-time market data for a specific product type.', 'required_parameters': [{'name': 'product_type', 'type': 'STRING', 'description': 'The type of product, e.g., health, technology.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified product type.'}]}], ['InvestmentAdvice.get_recommendations', {'name': 'InvestmentAdvice.get_recommendations', 'description': 'This function provides investment recommendations based on a specific product type.', 'required_parameters': [{'name': 'product_type', 'type': 'STRING', 'description': 'The type of product, e.g., health, technology.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Investment recommendations for the specified product type.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ArticleSearch.find_articles` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ArticleSearch.find_articles\",\n    \"args\": \"{'topic': 'retirement health investment', 'year': 2023'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过健康投资来保障我的退休生活。首先，获取3篇关于退休健康投资的最新文章。然后，获取2024年全年主要健康产品的历史数据。接着，获取当前的健康产品实时市场数据。最后，通过产品类型获取一些健康投资建议。"
            }
        ]
    },
    "95": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TravelInvestment.get_articles",
                "TravelInvestment.get_historical_data",
                "TravelInvestment.get_real_time_data",
                "TravelInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TravelInvestment.get_articles",
                "args": "{\"topic\": \"retirement tourism investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TravelInvestment.get_historical_data",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TravelInvestment.get_real_time_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TravelInvestment.get_investment_advice",
                "args": "{\"destination\": \"Bali\"}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TravelInvestment.get_articles', {'name': 'TravelInvestment.get_articles', 'description': 'This function retrieves the latest articles on a specified topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement tourism investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five latest articles on the topic.'}]}], ['TravelInvestment.get_historical_data', {'name': 'TravelInvestment.get_historical_data', 'description': 'This function retrieves historical data for major travel destinations for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': 'Historical data for the year, including visitor numbers and economic impact.'}]}], ['TravelInvestment.get_real_time_data', {'name': 'TravelInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for current travel destinations.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'real_time_data', 'description': 'Real-time market data, including current trends and visitor statistics.'}]}], ['TravelInvestment.get_investment_advice', {'name': 'TravelInvestment.get_investment_advice', 'description': 'This function provides investment advice for a specified travel destination.', 'required_parameters': [{'name': 'destination', 'type': 'STRING', 'description': 'The name of the travel destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice tailored to the destination, including potential returns and risks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `TravelInvestment.get_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"TravelInvestment.get_articles\",\n    \"args\": \"{'topic': 'retirement tourism investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过旅游投资来增加退休金。首先，获取5篇关于退休旅游投资的最新文章。然后，获取2023年全年主要旅游目的地的历史数据。接着，获取当前的旅游目的地实时市场数据。最后，通过目的地名称获取一些旅游投资建议。"
            }
        ]
    },
    "97": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EnergyInvestment.find_articles",
                "EnergyInvestment.get_historical_data",
                "EnergyInvestment.get_real_time_data",
                "EnergyInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EnergyInvestment.find_articles",
                "args": "{\"topic\": \"retirement energy investment\", \"year\": 2023}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EnergyInvestment.get_historical_data",
                "args": "{\"year\": 2023, \"companies\": [\"ExxonMobil\", \"Chevron\", \"BP\", \"Shell\", \"TotalEnergies\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EnergyInvestment.get_real_time_data",
                "args": "{\"companies\": [\"ExxonMobil\", \"Chevron\", \"BP\", \"Shell\", \"TotalEnergies\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "EnergyInvestment.get_investment_advice",
                "args": "{\"companyNames\": [\"ExxonMobil\", \"Chevron\", \"BP\", \"Shell\", \"TotalEnergies\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EnergyInvestment.find_articles', {'name': 'EnergyInvestment.find_articles', 'description': 'This function searches for articles on a specific topic and year.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles, e.g., retirement energy investment.'}, {'name': 'year', 'type': 'NUMBER', 'description': 'The year of the articles.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five matching articles, each with a title, summary, and link.'}]}], ['EnergyInvestment.get_historical_data', {'name': 'EnergyInvestment.get_historical_data', 'description': 'This function retrieves historical data for specified energy companies for a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data for the specified companies, including stock prices and financial performance.'}]}], ['EnergyInvestment.get_real_time_data', {'name': 'EnergyInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for specified energy companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Real-time market data for the specified companies, including current stock prices and trading volumes.'}]}], ['EnergyInvestment.get_investment_advice', {'name': 'EnergyInvestment.get_investment_advice', 'description': 'This function provides investment advice based on company names.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified companies, including potential risks and benefits.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `EnergyInvestment.find_articles` 并传入 `topic` 和 `year`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"EnergyInvestment.find_articles\",\n    \"args\": \"{'topic': 'retirement energy investment', 'year': 2023}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过能源投资来增加退休金。首先，获取5篇关于退休能源投资的最新文章。然后，获取2023年全年主要能源公司的历史数据。接着，获取当前的能源公司实时市场数据。最后，通过公司名称获取一些能源投资建议。"
            }
        ]
    },
    "98": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AgricultureInvestment.find_articles",
                "AgricultureInvestment.get_historical_data",
                "AgricultureInvestment.get_real_time_data",
                "AgricultureInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AgricultureInvestment.find_articles",
                "args": "{\"topic\": \"retirement agriculture investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AgricultureInvestment.get_historical_data",
                "args": "{\"year\": 2024, \"companies\": [\"CompanyA\", \"CompanyB\"]}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AgricultureInvestment.get_real_time_data",
                "args": "{\"companies\": [\"CompanyA\", \"CompanyB\"]}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AgricultureInvestment.get_investment_advice",
                "args": "{\"companyNames\": [\"CompanyA\", \"CompanyB\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AgricultureInvestment.find_articles', {'name': 'AgricultureInvestment.find_articles', 'description': 'This function searches for articles based on a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the articles to search for.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to three matching articles.'}]}], ['AgricultureInvestment.get_historical_data', {'name': 'AgricultureInvestment.get_historical_data', 'description': 'This function retrieves historical data for specified agricultural companies for a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}, {'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'historicalData', 'description': 'Historical data for the specified companies and year.'}]}], ['AgricultureInvestment.get_real_time_data', {'name': 'AgricultureInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for specified agricultural companies.', 'required_parameters': [{'name': 'companies', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'realTimeData', 'description': 'Real-time market data for the specified companies.'}]}], ['AgricultureInvestment.get_investment_advice', {'name': 'AgricultureInvestment.get_investment_advice', 'description': 'This function provides investment advice based on specified company names.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice for the specified companies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `AgricultureInvestment.find_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"AgricultureInvestment.find_articles\",\n    \"args\": \"{'topic': 'retirement agriculture investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑通过农业投资来增加退休收入。首先，获取3篇关于退休农业投资的最新文章。然后，获取2024年全年主要农业公司的历史数据。接着，获取当前的农业公司实时市场数据。最后，通过公司名称获取一些农业投资建议。"
            }
        ]
    },
    "99": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ManufacturingInvestment.find_articles",
                "ManufacturingInvestment.get_historical_data",
                "ManufacturingInvestment.get_real_time_data",
                "ManufacturingInvestment.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ManufacturingInvestment.find_articles",
                "args": "{\"topic\": \"retirement manufacturing investment\"}"
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ManufacturingInvestment.get_historical_data",
                "args": "{\"year\": 2023}"
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ManufacturingInvestment.get_real_time_data",
                "args": "{}"
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ManufacturingInvestment.get_investment_advice",
                "args": "{\"companyNames\": [\"General Electric\", \"Ford\"]}"
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": "{}"
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ManufacturingInvestment.find_articles', {'name': 'ManufacturingInvestment.find_articles', 'description': 'This function searches for articles related to a specific topic in manufacturing investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of interest, e.g., retirement manufacturing investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'A list of up to five relevant articles.'}]}], ['ManufacturingInvestment.get_historical_data', {'name': 'ManufacturingInvestment.get_historical_data', 'description': 'This function retrieves historical data for major manufacturing companies in a given year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is requested.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical data including financial metrics and market performance.'}]}], ['ManufacturingInvestment.get_real_time_data', {'name': 'ManufacturingInvestment.get_real_time_data', 'description': 'This function retrieves real-time market data for manufacturing companies.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'realTimeData', 'description': 'Current market data including stock prices and trading volumes.'}]}], ['ManufacturingInvestment.get_investment_advice', {'name': 'ManufacturingInvestment.get_investment_advice', 'description': 'This function provides investment advice based on company names.', 'required_parameters': [{'name': 'companyNames', 'type': 'ARRAY', 'description': 'An array of company names for which investment advice is sought.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment recommendations and potential risks.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `ManufacturingInvestment.find_articles` 并传入 `topic`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"ManufacturingInvestment.find_articles\",\n    \"args\": \"{'topic': 'retirement manufacturing investment'}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解如何通过制造业投资来增加退休金。首先，获取5篇关于退休制造业投资的最新文章。然后，获取2023年全年主要制造业公司的历史数据。接着，获取当前的制造业公司实时市场数据。最后，通过公司名称获取一些制造业投资建议。"
            }
        ]
    }
}